.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH SPLAIN 1 "perl 5.004, patch 01" "16/Jun/97" "Perl Programmers Reference Guide"
.IX Title "SPLAIN 1"
.UC
.IX Name "diagnostics - Perl compiler pragma to force verbose warning diagnostics"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
diagnostics \- Perl compiler pragma to force verbose warning diagnostics
.PP
splain \- standalone program to do the same thing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
As a pragma:
.PP
.Vb 2
\&    use diagnostics;
\&    use diagnostics -verbose;
.Ve
.Vb 2
\&    enable  diagnostics;
\&    disable diagnostics;
.Ve
Aa a program:
.PP
.Vb 2
\&    perl program 2>diag.out
\&    splain [-v] [-p] diag.out
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "The \f(CWdiagnostics\fR Pragma"
.IX Subsection "The \f(CWdiagnostics\fR Pragma"
This module extends the terse diagnostics normally emitted by both the
perl compiler and the perl interpeter, augmenting them with the more
explicative and endearing descriptions found in the \fIperldiag\fR manpage.  Like the
other pragmata, it affects the compilation phase of your program rather
than merely the execution phase.
.PP
To use in your program as a pragma, merely invoke
.PP
.Vb 1
\&    use diagnostics;
.Ve
at the start (or near the start) of your program.  (Note 
that this \fIdoes\fR enable perl's \fB\-w\fR flag.)  Your whole
compilation will then be \fIsubject\fR\|(ed :\-) to the enhanced diagnostics.
These still go out \fB\s-1STDERR\s0\fR.
.PP
Due to the interaction between runtime and compiletime issues,
and because it's probably not a very good idea anyway,
you may not use \f(CWno diagnostics\fR to turn them off at compiletime.
However, you may control there behaviour at runtime using the 
\fIdisable()\fR and \fIenable()\fR methods to turn them off and on respectively.
.PP
The \fB\-verbose\fR flag first prints out the the \fIperldiag\fR manpage introduction before
any other diagnostics.  The \f(CW$diagnostics::PRETTY\fR variable can generate nicer
escape sequences for pagers.
.Sh "The \fIsplain\fR Program"
.IX Subsection "The \fIsplain\fR Program"
While apparently a whole nuther program, \fIsplain\fR is actually nothing
more than a link to the (executable) \fIdiagnostics.pm\fR module, as well as
a link to the \fIdiagnostics.pod\fR documentation.  The \fB\-v\fR flag is like
the \f(CWuse diagnostics -verbose\fR directive.
The \fB\-p\fR flag is like the
\f(CW$diagnostics::PRETTY\fR variable.  Since you're post-processing with 
\fIsplain\fR, there's no sense in being able to \fIenable()\fR or \fIdisable()\fR processing.
.PP
Output from \fIsplain\fR is directed to \fB\s-1STDOUT\s0\fR, unlike the pragma.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following file is certain to trigger a few errors at both
runtime and compiletime:
.PP
.Vb 8
\&    use diagnostics;
\&    print NOWHERE "nothing\en";
\&    print STDERR "\en\etThis message should be unadorned.\en";
\&    warn "\etThis is a user warning";
\&    print "\enDIAGNOSTIC TESTER: Please enter a <CR> here: ";
\&    my $a, $b = scalar <STDIN>;
\&    print "\en";
\&    print $x/$y;
.Ve
If you prefer to run your program first and look at its problem
afterwards, do this:
.PP
.Vb 2
\&    perl -w test.pl 2>test.out
\&    ./splain < test.out
.Ve
Note that this is not in general possible in shells of more dubious heritage, 
as the theoretical 
.PP
.Vb 2
\&    (perl -w test.pl >/dev/tty) >& test.out
\&    ./splain < test.out
.Ve
Because you just moved the existing \fBstdout\fR to somewhere else.
.PP
If you don't want to modify your source code, but still have on-the-fly
warnings, do this:
.PP
.Vb 1
\&    exec 3>&1; perl -w test.pl 2>&1 1>&3 3>&- | splain 1>&2 3>&- 
.Ve
Nifty, eh?
.PP
If you want to control warnings on the fly, do something like this.
Make sure you do the \f(CWuse\fR first, or you won't be able to get
at the \fIenable()\fR or \fIdisable()\fR methods.
.PP
.Vb 4
\&    use diagnostics; # checks entire compilation phase 
\&        print "\entime for 1st bogus diags: SQUAWKINGS\en";
\&        print BOGUS1 'nada';
\&        print "done with 1st bogus\en";
.Ve
.Vb 4
\&    disable diagnostics; # only turns off runtime warnings
\&        print "\entime for 2nd bogus: (squelched)\en";
\&        print BOGUS2 'nada';
\&        print "done with 2nd bogus\en";
.Ve
.Vb 4
\&    enable diagnostics; # turns back on runtime warnings
\&        print "\entime for 3rd bogus: SQUAWKINGS\en";
\&        print BOGUS3 'nada';
\&        print "done with 3rd bogus\en";
.Ve
.Vb 4
\&    disable diagnostics;
\&        print "\entime for 4th bogus: (squelched)\en";
\&        print BOGUS4 'nada';
\&        print "done with 4th bogus\en";
.Ve
.SH "INTERNALS"
.IX Header "INTERNALS"
Diagnostic messages derive from the \fIperldiag.pod\fR file when available at
runtime.  Otherwise, they may be embedded in the file itself when the
splain package is built.   See the \fIMakefile\fR for details.
.PP
If an extant \f(CW$SIG\fR{_\|_WARN_\|_} handler is discovered, it will continue
to be honored, but only after the \fIdiagnostics::splainthis()\fR function 
(the module's \f(CW$SIG\fR{_\|_WARN_\|_} interceptor) has had its way with your
warnings.
.PP
There is a \f(CW$diagnostics::DEBUG\fR variable you may set if you're desperately
curious what sorts of things are being intercepted.
.PP
.Vb 1
\&    BEGIN { $diagnostics::DEBUG = 1 } 
.Ve
.SH "BUGS"
.IX Header "BUGS"
Not being able to say \*(L"no diagnostics\*(R" is annoying, but may not be
insurmountable.
.PP
The \f(CW-pretty\fR directive is called too late to affect matters.
You have to do this instead, and \fIbefore\fR you load the module.
.PP
.Vb 1
\&    BEGIN { $diagnostics::PRETTY = 1 } 
.Ve
I could start up faster by delaying compilation until it should be
needed, but this gets a \*(L"panic: top_level\*(R" when using the pragma form
in Perl 5.001e.
.PP
While it's true that this documentation is somewhat subserious, if you use
a program named \fIsplain\fR, you should expect a bit of whimsy.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen <\fItchrist@mox.perl.com\fR>, 25 June 1995.

.rn }` ''
