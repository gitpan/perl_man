.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLPORT 1 "perl 5.005, patch 53" "5/Nov/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perlport \- Writing portable Perl
.SH "DESCRIPTION"
Perl runs on a variety of operating systems.  While most of them share
a lot in common, they also have their own very particular and unique
features.
.PP
This document is meant to help you to find out what constitutes portable
Perl code, so that once you have made your decision to write portably,
you know where the lines are drawn, and you can stay within them.
.PP
There is a tradeoff between taking full advantage of \fBa\fR particular type
of computer, and taking advantage of a full \fBrange\fR of them.  Naturally,
as you make your range bigger (and thus more diverse), the common
denominators drop, and you are left with fewer areas of common ground in
which you can operate to accomplish a particular task.  Thus, when you
begin attacking a problem, it is important to consider which part of the
tradeoff curve you want to operate under. Specifically, whether it is
important to you that the task that you are coding needs the full
generality of being portable, or if it is sufficient to just get the job
done.  This is the hardest choice to be made.  The rest is easy, because
Perl provides lots of choices, whichever way you want to approach your
problem.
.PP
Looking at it another way, writing portable code is usually about
willfully limiting your available choices.  Naturally, it takes discipline
to do that.
.PP
Be aware of two important points:
.Ip "Not all Perl programs have to be portable" 4
There is no reason why you should not use Perl as a language to glue Unix
tools together, or to prototype a Macintosh application, or to manage the
Windows registry.  If it makes no sense to aim for portability for one
reason or another in a given program, then don't bother.
.Ip "The vast majority of Perl \fBis\fR portable" 4
Don't be fooled into thinking that it is hard to create portable Perl
code.  It isn't.  Perl tries its level-best to bridge the gaps between
what's available on different platforms, and all the means available to
use those features.  Thus almost all Perl code runs on any machine
without modification.  But there \fIare\fR some significant issues in
writing portable code, and this document is entirely about those issues.
.PP
Here's the general rule: When you approach a task that is commonly done
using a whole range of platforms, think in terms of writing portable
code.  That way, you don't sacrifice much by way of the implementation
choices you can avail yourself of, and at the same time you can give
your users lots of platform choices.  On the other hand, when you have to
take advantage of some unique feature of a particular platform, as is
often the case with systems programming (whether for Unix, Windows,
Mac\ \s-1OS\s0, \s-1VMS\s0, etc.), consider writing platform-specific code.
.PP
When the code will run on only two or three operating systems, then you
may only need to consider the differences of those particular systems.
The important thing is to decide where the code will run, and to be
deliberate in your decision.
.PP
The material below is separated into three main sections: main issues of
portability (the section on \fI\s-1ISSUES\s0\fR, platform-specific issues (the section on \fI\s-1PLATFORMS\s0\fR, and
builtin perl functions that behave differently on various ports
(the section on \fI\s-1FUNCTION\s0 \s-1IMPLEMENTATIONS\s0\fR.
.PP
This information should not be considered complete; it includes possibly
transient information about idiosyncrasies of some of the ports, almost
all of which are in a state of constant evolution.  Thus this material
should be considered a perpetual work in progress
(<\s-1IMG\s0 \s-1SRC\s0="yellow_sign.gif\*(R" \s-1ALT\s0="Under Construction">).
.SH "ISSUES"
.Sh "Newlines"
In most operating systems, lines in files are terminated by newlines.
Just what is used as a newline may vary from \s-1OS\s0 to \s-1OS\s0.  Unix
traditionally uses \f(CW\e012\fR, one kind of Windows I/O uses \f(CW\e015\e012\fR,
and Mac\ \s-1OS\s0 uses \f(CW\e015\fR.
.PP
Perl uses \f(CW\en\fR to represent the \*(L"logical\*(R" newline, where what
is logical may depend on the platform in use.  In MacPerl, \f(CW\en\fR
always means \f(CW\e015\fR.  In DOSish perls, \f(CW\en\fR usually means \f(CW\e012\fR, but
when accessing a file in \*(L"text\*(R" mode, \s-1STDIO\s0 translates it to (or from)
\f(CW\e015\e012\fR.
.PP
Due to the \*(L"text\*(R" mode translation, DOSish perls have limitations
of using \f(CWseek\fR and \f(CWtell\fR when a file is being accessed in \*(L"text\*(R"
mode.  Specifically, if you stick to \f(CWseek\fR\-ing to locations you got
from \f(CWtell\fR (and no others), you are usually free to use \f(CWseek\fR and
\f(CWtell\fR even in \*(L"text\*(R" mode.  In general, using \f(CWseek\fR or \f(CWtell\fR or
other file operations that count bytes instead of characters, without
considering the length of \f(CW\en\fR, may be non-portable.  If you use
\f(CWbinmode\fR on a file, however, you can usually use \f(CWseek\fR and \f(CWtell\fR
with arbitrary values quite safely.
.PP
A common misconception in socket programming is that \f(CW\en\fR eq \f(CW\e012\fR
everywhere.  When using protocols such as common Internet protocols,
\f(CW\e012\fR and \f(CW\e015\fR are called for specifically, and the values of
the logical \f(CW\en\fR and \f(CW\er\fR (carriage return) are not reliable.
.PP
.Vb 2
\&    print SOCKET "Hi there, client!\er\en";      # WRONG
\&    print SOCKET "Hi there, client!\e015\e012";  # RIGHT
.Ve
[\s-1NOTE\s0: this does not necessarily apply to communications that are
filtered by another program or module before sending to the socket; the
the most popular \s-1EBCDIC\s0 webserver, for instance, accepts \f(CW\er\en\fR,
which translates those characters, along with all other
characters in text streams, from \s-1EBCDIC\s0 to \s-1ASCII\s0.]
.PP
However, using \f(CW\e015\e012\fR (or \f(CW\ecM\ecJ\fR, or \f(CW\ex0D\ex0A\fR) can be tedious
and unsightly, as well as confusing to those maintaining the code.  As
such, the \f(CWSocket\fR module supplies the Right Thing for those who want it.
.PP
.Vb 2
\&    use Socket qw(:DEFAULT :crlf);
\&    print SOCKET "Hi there, client!$CRLF"      # RIGHT
.Ve
When reading \fIfrom\fR a socket, remember that the default input record
separator (\f(CW$/\fR) is \f(CW\en\fR, but code like this should recognize \f(CW$/\fR as
\f(CW\e012\fR or \f(CW\e015\e012\fR:
.PP
.Vb 3
\&    while (<SOCKET>) {
\&        # ...
\&    }
.Ve
Better:
.PP
.Vb 2
\&    use Socket qw(:DEFAULT :crlf);
\&    local($/) = LF;      # not needed if $/ is already \e012
.Ve
.Vb 4
\&    while (<SOCKET>) {
\&        s/$CR?$LF/\en/;   # not sure if socket uses LF or CRLF, OK
\&    #   s/\e015?\e012/\en/; # same thing
\&    }
.Ve
And this example is actually better than the previous one even for Unix
platforms, because now any \f(CW\e015\fR's (\f(CW\ecM\fR's) are stripped out
(and there was much rejoicing).
.Sh "Numbers endianness and Width"
Different CPUs store integers and floating point numbers in different
orders (called \fIendianness\fR) and widths (32-bit and 64-bit being the
most common).  This affects your programs if they attempt to transfer
numbers in binary format from a \s-1CPU\s0 architecture to another over some
channel: either \*(L'live\*(R' via network connections or storing the numbers
to secondary storage such as a disk file.
.PP
Conflicting storage orders make utter mess out of the numbers: if a
little-endian host (Intel, Alpha) stores 0x12345678 (305419896 in
decimal), a big-endian host (Motorola, \s-1MIPS\s0, Sparc, \s-1PA\s0) reads it as
0x78563412 (2018915346 in decimal).  To avoid this problem in network
(socket) connections use the \f(CWpack()\fR and \f(CWunpack()\fR formats \f(CW"n"\fR
and \f(CW"N"\fR, the \*(L"network\*(R" orders, they are guaranteed to be portable.
.PP
Different widths can cause truncation even between platforms of equal
endianness: the platform of shorter width loses the upper parts of the
number.  There is no good solution for this problem except to avoid
transferring or storing raw binary numbers.
.PP
One can circumnavigate both these problems in two ways: either
transfer and store numbers always in text format, instead of raw
binary, or consider using modules like \f(CWData::Dumper\fR (included in
the standard distribution as of Perl 5.005) and \f(CWStorable\fR.
.Sh "Files"
Most platforms these days structure files in a hierarchical fashion.
So, it is reasonably safe to assume that any platform supports the
notion of a \*(L"path\*(R" to uniquely identify a file on the system.  Just
how that path is actually written, differs.
.PP
While they are similar, file path specifications differ between Unix,
Windows, Mac\ \s-1OS\s0, \s-1OS/2\s0, \s-1VMS\s0, \s-1VOS\s0, \s-1RISC\s0\ \s-1OS\s0 and probably others.
Unix, for example, is one of the few OSes that has the idea of a single
root directory.
.PP
\s-1VMS\s0, Windows, and \s-1OS/2\s0 can work similarly to Unix with \f(CW/\fR as path
separator, or in their own idiosyncratic ways (such as having several
root directories and various \*(L"unrooted\*(R" device files such \s-1NIL\s0:  and
\s-1LPT\s0:).
.PP
Mac\ \s-1OS\s0 uses \f(CW:\fR as a path separator instead of \f(CW/\fR.
.PP
\s-1VOS\s0 perl can emulate Unix filenames with \f(CW/\fR as path separator.  The
native pathname characters greater-than, less-than, number-sign, and
percent-sign are always accepted.
.PP
\f(CWRISC OS\fR perl can emulate Unix filenames with \f(CW/\fR as path
separator, or go native and use \f(CW.\fR for path separator and \f(CW:\fR to
signal filing systems and disc names.
.PP
As with the newline problem above, there are modules that can help.  The
\f(CWFile::Spec\fR modules provide methods to do the Right Thing on whatever
platform happens to be running the program.
.PP
.Vb 7
\&    use File::Spec;
\&    chdir(File::Spec->updir());        # go up one directory
\&    $file = File::Spec->catfile(
\&        File::Spec->curdir(), 'temp', 'file.txt'
\&    );
\&    # on Unix and Win32, './temp/file.txt'
\&    # on Mac OS, ':temp:file.txt'
.Ve
File::Spec is available in the standard distribution, as of version
5.004_05.
.PP
In general, production code should not have file paths hardcoded; making
them user supplied or from a configuration file is better, keeping in mind
that file path syntax varies on different machines.
.PP
This is especially noticeable in scripts like Makefiles and test suites,
which often assume \f(CW/\fR as a path separator for subdirectories.
.PP
Also of use is \f(CWFile::Basename\fR, from the standard distribution, which
splits a pathname into pieces (base filename, full path to directory,
and file suffix).
.PP
Even when on a single platform (if you can call \s-1UNIX\s0 a single
platform), remember not to count on the existence or the contents of
system-specific files, like \fI/etc/passwd\fR, \fI/etc/sendmail.conf\fR, or
\fI/etc/resolv.conf\fR.  For example the \fI/etc/passwd\fR may exist but it
may not contain the encrypted passwords because the system is using
some form of enhanced security-- or it may not contain all the
accounts because the system is using \s-1NIS\s0.  If code does need to rely
on such a file, include a description of the file and its format in
the code's documentation, and make it easy for the user to override
the default location of the file.
.PP
Do not have two files of the same name with different case, like
\fItest.pl\fR and <Test.pl>, as many platforms have case-insensitive
filenames.  Also, try not to have non-word characters (except for \f(CW.\fR)
in the names, and keep them to the 8.3 convention, for maximum
portability.
.PP
Likewise, if using \f(CWAutoSplit\fR, try to keep the split functions to
8.3 naming and case-insensitive conventions; or, at the very least,
make it so the resulting files have a unique (case-insensitively)
first 8 characters.
.PP
Don't assume \f(CW<\fR won't be the first character of a filename.  Always
use \f(CW<\fR explicitly to open a file for reading:
.PP
.Vb 1
\&    open(FILE, "<$existing_file") or die $!;
.Ve
.Sh "System Interaction"
Not all platforms provide for the notion of a command line, necessarily.
These are usually platforms that rely on a Graphical User Interface (\s-1GUI\s0)
for user interaction.  So a program requiring command lines might not work
everywhere.  But this is probably for the user of the program to deal
with.
.PP
Some platforms can't delete or rename files that are being held open by
the system.  Remember to \f(CWclose\fR files when you are done with them.
Don't \f(CWunlink\fR or \f(CWrename\fR an open file.  Don't \f(CWtie\fR to or \f(CWopen\fR a
file that is already tied to or opened; \f(CWuntie\fR or \f(CWclose\fR first.
.PP
Don't open the same file more than once at a time for writing, as some
operating systems put mandatory locks on such files.
.PP
Don't count on a specific environment variable existing in \f(CW%ENV\fR.
Don't count on \f(CW%ENV\fR entries being case-sensitive, or even
case-preserving.
.PP
Don't count on signals.
.PP
Don't count on filename globbing.  Use \f(CWopendir\fR, \f(CWreaddir\fR, and
\f(CWclosedir\fR instead.
.PP
Don't count on per-program environment variables, or per-program current
directories.
.Sh "Interprocess Communication (\s-1IPC\s0)"
In general, don't directly access the system in code that is meant to be
portable.  That means, no \f(CWsystem\fR, \f(CWexec\fR, \f(CWfork\fR, \f(CWpipe\fR, \f(CW``\fR,
\f(CWqx//\fR, \f(CWopen\fR with a \f(CW|\fR, nor any of the other things that makes being
a Unix perl hacker worth being.
.PP
Commands that launch external processes are generally supported on
most platforms (though many of them do not support any type of forking),
but the problem with using them arises from what you invoke with them.
External tools are often named differently on different platforms, often
not available in the same location, often accept different arguments,
often behave differently, and often represent their results in a
platform-dependent way.  Thus you should seldom depend on them to produce
consistent results.
.PP
One especially common bit of Perl code is opening a pipe to sendmail:
.PP
.Vb 1
\&    open(MAIL, '|/usr/lib/sendmail -t') or die $!;
.Ve
This is fine for systems programming when sendmail is known to be
available.  But it is not fine for many non-Unix systems, and even
some Unix systems that may not have sendmail installed.  If a portable
solution is needed, see the \f(CWMail::Send\fR and \f(CWMail::Mailer\fR modules
in the \f(CWMailTools\fR distribution.  \f(CWMail::Mailer\fR provides several
mailing methods, including mail, sendmail, and direct \s-1SMTP\s0
(via \f(CWNet::SMTP\fR) if a mail transfer agent is not available.
.PP
The rule of thumb for portable code is: Do it all in portable Perl, or
use a module (that may internally implement it with platform-specific
code, but expose a common interface).
.PP
The \s-1UNIX\s0 System V \s-1IPC\s0 (\f(CWmsg*(), sem*(), shm*()\fR) is not available
even in all \s-1UNIX\s0 platforms.
.Sh "External Subroutines (\s-1XS\s0)"
\s-1XS\s0 code, in general, can be made to work with any platform; but dependent
libraries, header files, etc., might not be readily available or
portable, or the \s-1XS\s0 code itself might be platform-specific, just as Perl
code might be.  If the libraries and headers are portable, then it is
normally reasonable to make sure the \s-1XS\s0 code is portable, too.
.PP
There is a different kind of portability issue with writing \s-1XS\s0
code: availability of a C compiler on the end-user's system.  C brings
with it its own portability issues, and writing \s-1XS\s0 code will expose you to
some of those.  Writing purely in perl is a comparatively easier way to
achieve portability.
.Sh "Standard Modules"
In general, the standard modules work across platforms.  Notable
exceptions are \f(CWCPAN.pm\fR (which currently makes connections to external
programs that may not be available), platform-specific modules (like
\f(CWExtUtils::MM_VMS\fR), and \s-1DBM\s0 modules.
.PP
There is no one \s-1DBM\s0 module that is available on all platforms.
\f(CWSDBM_File\fR and the others are generally available on all Unix and DOSish
ports, but not in MacPerl, where only \f(CWNBDM_File\fR and \f(CWDB_File\fR are
available.
.PP
The good news is that at least some \s-1DBM\s0 module should be available, and
\f(CWAnyDBM_File\fR will use whichever module it can find.  Of course, then
the code needs to be fairly strict, dropping to the lowest common
denominator (e.g., not exceeding 1K for each record).
.Sh "Time and Date"
The system's notion of time of day and calendar date is controlled in
widely different ways. Don't assume the timezone is stored in \f(CW$ENV{TZ}\fR,
and even if it is, don't assume that you can control the timezone through
that variable.
.PP
Don't assume that the epoch starts at 00:00:00, January 1, 1970,
because that is \s-1OS\s0\-specific.  Better to store a date in an unambiguous
representation.  The \s-1ISO\s0 8601 standard defines \s-1YYYY\s0\-\s-1MM\s0\-\s-1DD\s0 as the date
format.  A text representation (like \f(CW1 Jan 1970\fR) can be easily
converted into an \s-1OS\s0\-specific value using a module like
\f(CWDate::Parse\fR.  An array of values, such as those returned by
\f(CWlocaltime\fR, can be converted to an \s-1OS\s0\-specific representation using
\f(CWTime::Local\fR.
.Sh "Character sets and character encoding"
Assume very little about character sets.  Do not assume anything about
the numerical values (\f(CWord()\fR, \f(CWchr()\fR) of characters.  Do not
assume that the alphabetic characters are encoded contiguously (in
numerical sense).  Do no assume anything about the ordering of the
characters.  The lowercase letters may come before or after the
uppercase letters, the lowercase and uppercase may be interlaced so
that both \*(L'a\*(R' and \*(L'A\*(R' come before the \*(L'b\*(R', the accented and other
international characters may be interlaced so that a\*: comes
before the \*(L'b\*(R'.
.Sh "Internationalisation"
If you may assume \s-1POSIX\s0 (a rather large assumption, that: in practise
that means \s-1UNIX\s0) you may read more about the \s-1POSIX\s0 locale system from
the \fIperllocale\fR manpage.  The locale system at least attempts to make things a
little bit more portable or at least more convenient and
native-friendly for non-English users.  The system affects character
sets and encoding, and date and time formatting, among other things.
.Sh "System Resources"
If your code is destined for systems with severely constrained (or
missing!) virtual memory systems then you want to be \fIespecially\fR mindful
of avoiding wasteful constructs such as:
.PP
.Vb 3
\&    # NOTE: this is no longer "bad" in perl5.005
\&    for (0..10000000) {}                       # bad
\&    for (my $x = 0; $x <= 10000000; ++$x) {}   # good
.Ve
.Vb 1
\&    @lines = <VERY_LARGE_FILE>;                # bad
.Ve
.Vb 2
\&    while (<FILE>) {$file .= $_}               # sometimes bad
\&    $file = join('', <FILE>);                  # better
.Ve
The last two may appear unintuitive to most people.  The first of those
two constructs repeatedly grows a string, while the second allocates a
large chunk of memory in one go.  On some systems, the latter is more
efficient that the former.
.Sh "Security"
Most multi-user platforms provide basic levels of security that is usually
felt at the file-system level.  Other platforms usually don't
(unfortunately).  Thus the notion of user id, or \*(L"home\*(R" directory, or even
the state of being logged-in, may be unrecognizable on many platforms.  If
you write programs that are security conscious, it is usually best to know
what type of system you will be operating under, and write code explicitly
for that platform (or class of platforms).
.Sh "Style"
For those times when it is necessary to have platform-specific code,
consider keeping the platform-specific code in one place, making porting
to other platforms easier.  Use the \f(CWConfig\fR module and the special
variable \f(CW$^O\fR to differentiate platforms, as described in
the section on \fI\s-1PLATFORMS\s0\fR.
.SH "CPAN Testers"
Modules uploaded to CPAN are tested by a variety of volunteers on
different platforms.  These CPAN testers are notified by mail of each
new upload, and reply to the list with PASS, FAIL, NA (not applicable to
this platform), or UNKNOWN (unknown), along with any relevant notations.
.PP
The purpose of the testing is twofold: one, to help developers fix any
problems in their code that crop up because of lack of testing on other
platforms; two, to provide users with information about whether or not
a given module works on a given platform.
.Ip "Mailing list: cpan-testers@perl.org" 4
.Ip "Testing results: \f(CWhttp://www.connect.net/gbarr/cpan-test/\fR" 4
.SH "PLATFORMS"
As of version 5.002, Perl is built with a \f(CW$^O\fR variable that
indicates the operating system it was built on.  This was implemented
to help speed up code that would otherwise have to \f(CWuse Config;\fR and
use the value of \f(CW$Config{'osname'}\fR.  Of course, to get
detailed information about the system, looking into \f(CW%Config\fR is
certainly recommended.
.Sh "Unix"
Perl works on a bewildering variety of Unix and Unix-like platforms (see
e.g. most of the files in the \fIhints/\fR directory in the source code kit).
On most of these systems, the value of \f(CW$^O\fR (hence \f(CW$Config{'osname'}\fR,
too) is determined by lowercasing and stripping punctuation from the first
field of the string returned by typing \f(CWuname -a\fR (or a similar command)
at the shell prompt.  Here, for example, are a few of the more popular
Unix flavors:
.PP
.Vb 11
\&    uname        $^O        $Config{'archname'}
\&    -------------------------------------------
\&    AIX          aix        aix
\&    FreeBSD      freebsd    freebsd-i386    
\&    Linux        linux      i386-linux
\&    HP-UX        hpux       PA-RISC1.1
\&    IRIX         irix       irix
\&    OSF1         dec_osf    alpha-dec_osf
\&    SunOS        solaris    sun4-solaris
\&    SunOS        solaris    i86pc-solaris
\&    SunOS4       sunos      sun4-sunos
.Ve
Note that because the \f(CW$Config{'archname'}\fR may depend on the hardware
architecture it may vary quite a lot, much more than the \f(CW$^O\fR.
.Sh "\s-1DOS\s0 and Derivatives"
Perl has long been ported to \s-1PC\s0 style microcomputers running under
systems like \s-1PC\s0\-\s-1DOS\s0, \s-1MS\s0\-\s-1DOS\s0, \s-1OS/2\s0, and most Windows platforms you can
bring yourself to mention (except for Windows \s-1CE\s0, if you count that).
Users familiar with \fI\s-1COMMAND\s0.\s-1COM\s0\fR and/or \fI\s-1CMD\s0.\s-1EXE\s0\fR style shells should
be aware that each of these file specifications may have subtle
differences:
.PP
.Vb 4
\&    $filespec0 = "c:/foo/bar/file.txt";
\&    $filespec1 = "c:\e\efoo\e\ebar\e\efile.txt";
\&    $filespec2 = 'c:\efoo\ebar\efile.txt';
\&    $filespec3 = 'c:\e\efoo\e\ebar\e\efile.txt';
.Ve
System calls accept either \f(CW/\fR or \f(CW\e\fR as the path separator.  However,
many command-line utilities of \s-1DOS\s0 vintage treat \f(CW/\fR as the option
prefix, so they may get confused by filenames containing \f(CW/\fR.  Aside
from calling any external programs, \f(CW/\fR will work just fine, and
probably better, as it is more consistent with popular usage, and avoids
the problem of remembering what to backwhack and what not to.
.PP
The \s-1DOS\s0 \s-1FAT\s0 filesystem can only accommodate \*(L"8.3\*(R" style filenames.  Under
the \*(L"case insensitive, but case preserving\*(R" \s-1HPFS\s0 (\s-1OS/2\s0) and \s-1NTFS\s0 (\s-1NT\s0)
filesystems you may have to be careful about case returned with functions
like \f(CWreaddir\fR or used with functions like \f(CWopen\fR or \f(CWopendir\fR.
.PP
\s-1DOS\s0 also treats several filenames as special, such as \s-1AUX\s0, \s-1PRN\s0, \s-1NUL\s0, \s-1CON\s0,
\s-1COM1\s0, \s-1LPT1\s0, \s-1LPT2\s0 etc.  Unfortunately these filenames won't even work
if you include an explicit directory prefix, in some cases.  It is best
to avoid such filenames, if you want your code to be portable to \s-1DOS\s0
and its derivatives.
.PP
Users of these operating systems may also wish to make use of
scripts such as \fIpl2bat.bat\fR or \fIpl2cmd\fR as appropriate to
put wrappers around your scripts.
.PP
Newline (\f(CW\en\fR) is translated as \f(CW\e015\e012\fR by \s-1STDIO\s0 when reading from
and writing to files.  \f(CWbinmode(FILEHANDLE)\fR will keep \f(CW\en\fR translated
as \f(CW\e012\fR for that filehandle.  Since it is a noop on other systems,
\f(CWbinmode\fR should be used for cross-platform code that deals with binary
data.
.PP
The \f(CW$^O\fR variable and the \f(CW$Config{'archname'}\fR values for various
DOSish perls are as follows:
.PP
.Vb 9
\&    OS            $^O        $Config{'archname'}
\&    --------------------------------------------
\&    MS-DOS        dos
\&    PC-DOS        dos
\&    OS/2          os2
\&    Windows 95    MSWin32    MSWin32-x86
\&    Windows NT    MSWin32    MSWin32-x86
\&    Windows NT    MSWin32    MSWin32-alpha
\&    Windows NT    MSWin32    MSWin32-ppc
.Ve
Also see:
.Ip "The djgpp environment for \s-1DOS\s0, \f(CWhttp://www.delorie.com/djgpp/\fR" 4
.Ip "The \s-1EMX\s0 environment for \s-1DOS\s0, \s-1OS/2\s0, etc. \f(CWemx@iaehv.nl\fR, \f(CWhttp://www.juge.com/bbs/Hobb.19.html\fR" 4
.Ip "Build instructions for Win32, the \fIperlwin32\fR manpage." 4
.Ip "The ActiveState Pages, \f(CWhttp://www.activestate.com/\fR" 4
.Sh "Mac\ \s-1OS\s0"
Any module requiring \s-1XS\s0 compilation is right out for most people, because
MacPerl is built using non-free (and non-cheap!) compilers.  Some \s-1XS\s0
modules that can work with MacPerl are built and distributed in binary
form on \s-1CPAN\s0.  See \fIMacPerl: Power and Ease\fR and the section on \fI\s-1CPAN\s0 Testers\fR
for more details.
.PP
Directories are specified as:
.PP
.Vb 6
\&    volume:folder:file              for absolute pathnames
\&    volume:folder:                  for absolute pathnames
\&    :folder:file                    for relative pathnames
\&    :folder:                        for relative pathnames
\&    :file                           for relative pathnames
\&    file                            for relative pathnames
.Ve
Files in a directory are stored in alphabetical order.  Filenames are
limited to 31 characters, and may include any character except \f(CW:\fR,
which is reserved as a path separator.
.PP
Instead of \f(CWflock\fR, see \f(CWFSpSetFLock\fR and \f(CWFSpRstFLock\fR in the
\f(CWMac::Files\fR module.
.PP
In the MacPerl application, you can't run a program from the command line;
programs that expect \f(CW@ARGV\fR to be populated can be edited with something
like the following, which brings up a dialog box asking for the command
line arguments.
.PP
.Vb 3
\&    if (!@ARGV) {
\&        @ARGV = split /\es+/, MacPerl::Ask('Arguments?');
\&    }
.Ve
A MacPerl script saved as a droplet will populate \f(CW@ARGV\fR with the full
pathnames of the files dropped onto the script.
.PP
Mac users can use programs on a kind of command line under \s-1MPW\s0 (Macintosh
Programmer's Workshop, a free development environment from Apple).
MacPerl was first introduced as an \s-1MPW\s0 tool, and \s-1MPW\s0 can be used like a
shell:
.PP
.Vb 1
\&    perl myscript.plx some arguments
.Ve
ToolServer is another app from Apple that provides access to \s-1MPW\s0 tools
from \s-1MPW\s0 and the MacPerl app, which allows MacPerl programs to use
\f(CWsystem\fR, backticks, and piped \f(CWopen\fR.
.PP
\*(L"Mac\ \s-1OS\s0\*(R" is the proper name for the operating system, but the value
in \f(CW$^O\fR is \*(L"MacOS\*(R".  To determine architecture, version, or whether
the application or \s-1MPW\s0 tool version is running, check:
.PP
.Vb 5
\&    $is_app    = $MacPerl::Version =~ /App/;
\&    $is_tool   = $MacPerl::Version =~ /MPW/;
\&    ($version) = $MacPerl::Version =~ /^(\eS+)/;
\&    $is_ppc    = $MacPerl::Architecture eq 'MacPPC';
\&    $is_68k    = $MacPerl::Architecture eq 'Mac68K';
.Ve
Mac\ \s-1OS\s0\ X, to be based on NeXT's OpenStep \s-1OS\s0, will be able to run
MacPerl natively (in the Blue Box, and even in the Yellow Box, once some
changes to the toolbox calls are made), but Unix perl will also run
natively.
.PP
Also see:
.Ip "The MacPerl Pages, \f(CWhttp://www.ptf.com/macperl/\fR." 4
.Ip "The MacPerl mailing list, \f(CWmac-perl-request@iis.ee.ethz.ch\fR." 4
.Sh "\s-1VMS\s0"
Perl on \s-1VMS\s0 is discussed in \fIvms/perlvms.pod\fR in the perl distribution.
Note that perl on \s-1VMS\s0 can accept either \s-1VMS\s0\- or Unix-style file
specifications as in either of the following:
.PP
.Vb 2
\&    $ perl -ne "print if /perl_setup/i" SYS$LOGIN:LOGIN.COM
\&    $ perl -ne "print if /perl_setup/i" /sys$login/login.com
.Ve
but not a mixture of both as in:
.PP
.Vb 2
\&    $ perl -ne "print if /perl_setup/i" sys$login:/login.com
\&    Can't open sys$login:/login.com: file specification syntax error
.Ve
Interacting with Perl from the Digital Command Language (\s-1DCL\s0) shell
often requires a different set of quotation marks than Unix shells do.
For example:
.PP
.Vb 2
\&    $ perl -e "print ""Hello, world.\en"""
\&    Hello, world.
.Ve
There are a number of ways to wrap your perl scripts in \s-1DCL\s0 .\s-1COM\s0 files if
you are so inclined.  For example:
.PP
.Vb 6
\&    $ write sys$output "Hello from DCL!"
\&    $ if p1 .eqs. ""
\&    $ then perl -x 'f$environment("PROCEDURE")
\&    $ else perl -x - 'p1 'p2 'p3 'p4 'p5 'p6 'p7 'p8
\&    $ deck/dollars="__END__"
\&    #!/usr/bin/perl
.Ve
.Vb 1
\&    print "Hello from Perl!\en";
.Ve
.Vb 2
\&    __END__
\&    $ endif
.Ve
Do take care with \f(CW$ ASSIGN/nolog/user SYS$COMMAND: SYS$INPUT\fR if your
perl-in-\s-1DCL\s0 script expects to do things like \f(CW$read = <STDIN>;\fR.
.PP
Filenames are in the format \*(L"name.extension;version\*(R".  The maximum
length for filenames is 39 characters, and the maximum length for
extensions is also 39 characters.  Version is a number from 1 to
32767.  Valid characters are \f(CW/[A-Z0-9$_-]/\fR.
.PP
\s-1VMS\s0\*(R' \s-1RMS\s0 filesystem is case insensitive and does not preserve case.
\f(CWreaddir\fR returns lowercased filenames, but specifying a file for
opening remains case insensitive.  Files without extensions have a
trailing period on them, so doing a \f(CWreaddir\fR with a file named \fIA.;5\fR
will return \fIa.\fR (though that file could be opened with
\f(CWopen(FH, 'A')\fR).
.PP
\s-1RMS\s0 had an eight level limit on directory depths from any rooted logical
(allowing 16 levels overall) prior to \s-1VMS\s0 7.2.  Hence
\f(CWPERL_ROOT:[LIB.2.3.4.5.6.7.8]\fR is a valid directory specification but
\f(CWPERL_ROOT:[LIB.2.3.4.5.6.7.8.9]\fR is not.  \fIMakefile.\s-1PL\s0\fR authors might
have to take this into account, but at least they can refer to the former
as \f(CW/PERL_ROOT/lib/2/3/4/5/6/7/8/\fR.
.PP
The \f(CWVMS::Filespec\fR module, which gets installed as part of the build
process on \s-1VMS\s0, is a pure Perl module that can easily be installed on
non-\s-1VMS\s0 platforms and can be helpful for conversions to and from \s-1RMS\s0
native formats.
.PP
What \f(CW\en\fR represents depends on the type of file that is open.  It could
be \f(CW\e015\fR, \f(CW\e012\fR, \f(CW\e015\e012\fR, or nothing.  Reading from a file
translates newlines to \f(CW\e012\fR, unless \f(CWbinmode\fR was executed on that
handle, just like DOSish perls.
.PP
\s-1TCP/IP\s0 stacks are optional on \s-1VMS\s0, so socket routines might not be
implemented.  \s-1UDP\s0 sockets may not be supported.
.PP
The value of \f(CW$^O\fR on OpenVMS is \*(L"\s-1VMS\s0\*(R".  To determine the architecture
that you are running on without resorting to loading all of \f(CW%Config\fR
you can examine the content of the \f(CW@INC\fR array like so:
.PP
.Vb 7
\&    if (grep(/VMS_AXP/, @INC)) {
\&        print "I'm on Alpha!\en";
\&    } elsif (grep(/VMS_VAX/, @INC)) {
\&        print "I'm on VAX!\en";
\&    } else {
\&        print "I'm not so sure about where $^O is...\en";
\&    }
.Ve
Also see:
.Ip "the \fIperlvms.pod\fR manpage" 4
.Ip "vmsperl list, \f(CWvmsperl-request@newman.upenn.edu\fR" 4
Put words \f(CWSUBSCRIBE VMSPERL\fR in message body.
.Ip "vmsperl on the web, \f(CWhttp://www.sidhe.org/vmsperl/index.html\fR" 4
.Sh "\s-1VOS\s0"
Perl on \s-1VOS\s0 is discussed in \fI\s-1README\s0.vos\fR in the perl distribution.
Note that perl on \s-1VOS\s0 can accept either \s-1VOS\s0\- or Unix-style file
specifications as in either of the following:
.PP
.Vb 2
\&    $ perl -ne "print if /perl_setup/i" >system>notices
\&    $ perl -ne "print if /perl_setup/i" /system/notices
.Ve
or even a mixture of both as in:
.PP
.Vb 1
\&    $ perl -ne "print if /perl_setup/i" >system/notices
.Ve
Note that even though \s-1VOS\s0 allows the slash character to appear in object
names, because the \s-1VOS\s0 port of Perl interprets it as a pathname
delimiting character, \s-1VOS\s0 files, directories, or links whose names
contain a slash character cannot be processed.  Such files must be
renamed before they can be processed by Perl.
.PP
The following C functions are unimplemented on \s-1VOS\s0, any any attempt by
Perl to use them will result in a fatal error message and an immediate
exit from Perl:  dup, do_aspawn, do_spawn, execlp, execl, execvp, fork,
waitpid.  Once these functions become available in the \s-1VOS\s0 \s-1POSIX\s0.1
implementation, you can either recompile and rebind Perl, or you can
download a newer port from ftp.stratus.com.
.PP
The value of \f(CW$^O\fR on \s-1VOS\s0 is \*(L"\s-1VOS\s0\*(R".  To determine the architecture that
you are running on without resorting to loading all of \f(CW%Config\fR you
can examine the content of the \f(CW@INC\fR array like so:
.PP
.Vb 6
\&    if (grep(/VOS/, @INC)) {
\&        print "I'm on a Stratus box!\en";
\&    } else {
\&        print "I'm not on a Stratus box!\en";
\&        die;
\&    }
.Ve
.Vb 9
\&    if (grep(/860/, @INC)) {
\&        print "This box is a Stratus XA/R!\en";
\&    } elsif (grep(/7100/, @INC)) {
\&        print "This box is a Stratus HP 7100 or 8000!\en";
\&    } elsif (grep(/8000/, @INC)) {
\&        print "This box is a Stratus HP 8000!\en";
\&    } else {
\&        print "This box is a Stratus 68K...\en";
\&    }
.Ve
Also see:
.Ip "the \fI\s-1README\s0.vos\fR manpage" 4
.Ip "\s-1VOS\s0 mailing list" 4
There is no specific mailing list for Perl on \s-1VOS\s0.  You can post
comments to the comp.sys.stratus newsgroup, or subscribe to the general
Stratus mailing list.  Send a letter with \*(L"Subscribe Info-Stratus\*(R" in
the message body to majordomo@list.stratagy.com.
.Ip "\s-1VOS\s0 Perl on the web at \f(CWhttp://ftp.stratus.com/pub/vos/vos.html\fR" 4
.Sh "\s-1EBCDIC\s0 Platforms"
Recent versions of Perl have been ported to platforms such as \s-1OS/400\s0 on
\s-1AS/400\s0 minicomputers as well as \s-1OS/390\s0 for \s-1IBM\s0 Mainframes.  Such computers
use \s-1EBCDIC\s0 character sets internally (usually Character Code Set \s-1ID\s0 00819
for \s-1OS/400\s0 and \s-1IBM\s0\-1047 for \s-1OS/390\s0).  Note that on the mainframe perl
currently works under the \*(L"Unix system services for \s-1OS/390\s0\*(R" (formerly
known as OpenEdition).
.PP
As of R2.5 of \s-1USS\s0 for \s-1OS/390\s0 that Unix sub-system did not support the
\f(CW#!\fR shebang trick for script invocation.  Hence, on \s-1OS/390\s0 perl scripts
can executed with a header similar to the following simple script:
.PP
.Vb 4
\&    : # use perl
\&        eval 'exec /usr/local/bin/perl -S $0 ${1+"$@"}'
\&            if 0;
\&    #!/usr/local/bin/perl     # just a comment really
.Ve
.Vb 1
\&    print "Hello from perl!\en";
.Ve
On these platforms, bear in mind that the \s-1EBCDIC\s0 character set may have
an effect on what happens with some perl functions (such as \f(CWchr\fR,
\f(CWpack\fR, \f(CWprint\fR, \f(CWprintf\fR, \f(CWord\fR, \f(CWsort\fR, \f(CWsprintf\fR, \f(CWunpack\fR), as
well as bit-fiddling with \s-1ASCII\s0 constants using operators like \f(CW^\fR, \f(CW&\fR
and \f(CW|\fR, not to mention dealing with socket interfaces to \s-1ASCII\s0 computers
(see the section on \fI\s-1NEWLINES\s0\fR).
.PP
Fortunately, most web servers for the mainframe will correctly translate
the \f(CW\en\fR in the following statement to its \s-1ASCII\s0 equivalent (note that
\f(CW\er\fR is the same under both Unix and \s-1OS/390\s0):
.PP
.Vb 1
\&    print "Content-type: text/html\er\en\er\en";
.Ve
The value of \f(CW$^O\fR on \s-1OS/390\s0 is \*(L"os390\*(R".
.PP
Some simple tricks for determining if you are running on an \s-1EBCDIC\s0
platform could include any of the following (perhaps all):
.PP
.Vb 1
\&    if ("\et" eq "\e05")   { print "EBCDIC may be spoken here!\en"; }
.Ve
.Vb 1
\&    if (ord('A') == 193) { print "EBCDIC may be spoken here!\en"; }
.Ve
.Vb 1
\&    if (chr(169) eq 'z') { print "EBCDIC may be spoken here!\en"; }
.Ve
Note that one thing you may not want to rely on is the \s-1EBCDIC\s0 encoding
of punctuation characters since these may differ from code page to code
page (and once your module or script is rumoured to work with \s-1EBCDIC\s0,
folks will want it to work with all \s-1EBCDIC\s0 character sets).
.PP
Also see:
.Ip "perl-mvs list" 4
The perl-mvs@perl.org list is for discussion of porting issues as well as
general usage issues for all \s-1EBCDIC\s0 Perls.  Send a message body of
\*(L"subscribe perl-mvs\*(R" to majordomo@perl.org.
.Ip "\s-1AS/400\s0 Perl information at \f(CWhttp://as400.rochester.ibm.com/\fR" 4
.Sh "Acorn \s-1RISC\s0 \s-1OS\s0"
As Acorns use \s-1ASCII\s0 with newlines (\f(CW\en\fR) in text files as \f(CW\e012\fR like
Unix and Unix filename emulation is turned on by default, it is quite
likely that most simple scripts will work \*(L"out of the box\*(R".  The native
filing system is modular, and individual filing systems are free to be
case-sensitive or insensitive, and are usually case-preserving.  Some
native filing systems have name length limits which file and directory
names are silently truncated to fit \- scripts should be aware that the
standard disc filing system currently has a name length limit of \fB10\fR
characters, with up to 77 items in a directory, but other filing systems
may not impose such limitations.
.PP
Native filenames are of the form
.PP
.Vb 1
\&    Filesystem#Special_Field::DiscName.$.Directory.Directory.File
.Ve
where
.PP
.Vb 8
\&    Special_Field is not usually present, but may contain . and $ .
\&    Filesystem =~ m|[A-Za-z0-9_]|
\&    DsicName   =~ m|[A-Za-z0-9_/]|
\&    $ represents the root directory
\&    . is the path separator
\&    @ is the current directory (per filesystem but machine global)
\&    ^ is the parent directory
\&    Directory and File =~ m|[^\e0- "\e.\e$\e%\e&:\e@\e\e^\e|\e177]+|
.Ve
The default filename translation is roughly \f(CWtr|/.|./|;\fR
.PP
Note that \f(CW"ADFS::HardDisc.$.File" ne 'ADFS::HardDisc.$.File'\fR and that
the second stage of \f(CW$\fR interpolation in regular expressions will fall
foul of the \f(CW$.\fR if scripts are not careful.
.PP
Logical paths specified by system variables containing comma-separated
search lists are also allowed, hence \f(CWSystem:Modules\fR is a valid
filename, and the filesystem will prefix \f(CWModules\fR with each section of
\f(CWSystem$Path\fR until a name is made that points to an object on disc.
Writing to a new file \f(CWSystem:Modules\fR would only be allowed if
\f(CWSystem$Path\fR contains a single item list.  The filesystem will also
expand system variables in filenames if enclosed in angle brackets, so
\f(CW<System$Dir>.Modules\fR would look for the file
\f(CW$ENV{'System$Dir'} . 'Modules'\fR.  The obvious implication of this is
that B<fully qualified filenames can start with \f(CW<>\fR and should
be protected when \f(CWopen\fR is used for input.
.PP
Because \f(CW.\fR was in use as a directory separator and filenames could not
be assumed to be unique after 10 characters, Acorn implemented the C
compiler to strip the trailing \f(CW.c\fR \f(CW.h\fR \f(CW.s\fR and \f(CW.o\fR suffix from
filenames specified in source code and store the respective files in
subdirectories named after the suffix. Hence files are translated:
.PP
.Vb 6
\&    foo.h           h.foo
\&    C:foo.h         C:h.foo        (logical path variable)
\&    sys/os.h        sys.h.os       (C compiler groks Unix-speak)
\&    10charname.c    c.10charname
\&    10charname.o    o.10charname
\&    11charname_.c   c.11charname   (assuming filesystem truncates at 10)
.Ve
The Unix emulation library's translation of filenames to native assumes
that this sort of translation is required, and allows a user defined list
of known suffixes which it will transpose in this fashion.  This may
appear transparent, but consider that with these rules \f(CWfoo/bar/baz.h\fR
and \f(CWfoo/bar/h/baz\fR both map to \f(CWfoo.bar.h.baz\fR, and that \f(CWreaddir\fR and
\f(CWglob\fR cannot and do not attempt to emulate the reverse mapping.  Other
\&\f(CW.\fRs in filenames are translated to \f(CW/\fR.
.PP
As implied above the environment accessed through \f(CW%ENV\fR is global, and
the convention is that program specific environment variables are of the
form \f(CWProgram$Name\fR.  Each filing system maintains a current directory,
and the current filing system's current directory is the \fBglobal\fR current
directory.  Consequently, sociable scripts don't change the current
directory but rely on full pathnames, and scripts (and Makefiles) cannot
assume that they can spawn a child process which can change the current
directory without affecting its parent (and everyone else for that
matter).
.PP
As native operating system filehandles are global and currently are
allocated down from 255, with 0 being a reserved value the Unix emulation
library emulates Unix filehandles.  Consequently, you can't rely on
passing \f(CWSTDIN\fR, \f(CWSTDOUT\fR, or \f(CWSTDERR\fR to your children.
.PP
The desire of users to express filenames of the form
\f(CW<Foo$Dir>.Bar\fR on the command line unquoted causes problems,
too: \f(CW``\fR command output capture has to perform a guessing game.  It
assumes that a string \f(CW<[^<>]+\e$[^<>]>\fR is a
reference to an environment variable, whereas anything else involving
\f(CW<\fR or \f(CW>\fR is redirection, and generally manages to be 99%
right.  Of course, the problem remains that scripts cannot rely on any
Unix tools being available, or that any tools found have Unix-like command
line arguments.
.PP
Extensions and \s-1XS\s0 are, in theory, buildable by anyone using free tools.
In practice, many don't, as users of the Acorn platform are used to binary
distribution.  MakeMaker does run, but no available make currently copes
with MakeMaker's makefiles; even if/when this is fixed, the lack of a
Unix-like shell can cause problems with makefile rules, especially lines
of the form \f(CWcd sdbm && make all\fR, and anything using quoting.
.PP
\*(L"\s-1RISC\s0\ \s-1OS\s0\*(R" is the proper name for the operating system, but the value
in \f(CW$^O\fR is \*(L"riscos\*(R" (because we don't like shouting).
.PP
Also see:
.Ip "perl list" 4
.Sh "Other perls"
Perl has been ported to a variety of platforms that do not fit into any of
the above categories.  Some, such as AmigaOS, BeOS, \s-1QNX\s0, and Plan 9, have
been well-integrated into the standard Perl source code kit.  You may need
to see the \fIports/\fR directory on \s-1CPAN\s0 for information, and possibly
binaries, for the likes of: aos, atari, lynxos, riscos, Tandem Guardian,
vos, \fIetc.\fR (yes we know that some of these OSes may fall under the Unix
category, but we are not a standards body.)
.PP
See also:
.Ip "Atari, Guido Flohr's page \f(CWhttp://stud.uni-sb.de/~gufl0000/\fR" 4
.Ip "\s-1HP\s0 300 \s-1MPE/\s0iX  \f(CWhttp://www.cccd.edu/~markb/perlix.html\fR" 4
.Ip "Novell Netware" 4
A free perl5-based \s-1PERL\s0.\s-1NLM\s0 for Novell Netware is available from
\f(CWhttp://www.novell.com/\fR
.SH "FUNCTION IMPLEMENTATIONS"
Listed below are functions unimplemented or implemented differently on
various platforms.  Following each description will be, in parentheses, a
list of platforms that the description applies to.
.PP
The list may very well be incomplete, or wrong in some places.  When in
doubt, consult the platform-specific README files in the Perl source
distribution, and other documentation resources for a given port.
.PP
Be aware, moreover, that even among Unix-ish systems there are variations.
.PP
For many functions, you can also query \f(CW%Config\fR, exported by default
from \f(CWConfig.pm\fR.  For example, to check if the platform has the \f(CWlstat\fR
call, check \f(CW$Config{'d_lstat'}\fR.  See the \fIConfig.pm\fR manpage for a full
description of available variables.
.Sh "Alphabetical Listing of Perl Functions"
.Ip "-X \s-1FILEHANDLE\s0" 8
.Ip "-X \s-1EXPR\s0" 8
.Ip "-X" 8
\f(CW-r\fR, \f(CW-w\fR, and \f(CW-x\fR have only a very limited meaning; directories
and applications are executable, and there are no uid/gid
considerations. \f(CW-o\fR is not supported. (Mac\ \s-1OS\s0)
.Sp
\f(CW-r\fR, \f(CW-w\fR, \f(CW-x\fR, and \f(CW-o\fR tell whether or not file is accessible,
which may not reflect \s-1UIC\s0\-based file protections. (\s-1VMS\s0)
.Sp
\f(CW-s\fR returns the size of the data fork, not the total size of data fork
plus resource fork.  (Mac\ \s-1OS\s0).
.Sp
\f(CW-s\fR by name on an open file will return the space reserved on disk,
rather than the current extent.  \f(CW-s\fR on an open filehandle returns the
current size. (\s-1RISC\s0\ \s-1OS\s0)
.Sp
\f(CW-R\fR, \f(CW-W\fR, \f(CW-X\fR, \f(CW-O\fR are indistinguishable from \f(CW-r\fR, \f(CW-w\fR,
\f(CW-x\fR, \f(CW-o\fR. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
\f(CW-b\fR, \f(CW-c\fR, \f(CW-k\fR, \f(CW-g\fR, \f(CW-p\fR, \f(CW-u\fR, \f(CW-A\fR are not implemented.
(Mac\ \s-1OS\s0)
.Sp
\f(CW-g\fR, \f(CW-k\fR, \f(CW-l\fR, \f(CW-p\fR, \f(CW-u\fR, \f(CW-A\fR are not particularly meaningful.
(Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
\f(CW-d\fR is true if passed a device spec without an explicit directory.
(\s-1VMS\s0)
.Sp
\f(CW-T\fR and \f(CW-B\fR are implemented, but might misclassify Mac text files
with foreign characters; this is the case will all platforms, but may
affect Mac\ \s-1OS\s0 often. (Mac\ \s-1OS\s0)
.Sp
\f(CW-x\fR (or \f(CW-X\fR) determine if a file ends in one of the executable
suffixes. \f(CW-S\fR is meaningless. (Win32)
.Sp
\f(CW-x\fR (or \f(CW-X\fR) determine if a file has an executable file type.
(\s-1RISC\s0\ \s-1OS\s0)
.Ip "binmode \s-1FILEHANDLE\s0" 8
Meaningless. (Mac\ \s-1OS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
Reopens file and restores pointer; if function fails, underlying
filehandle may be closed, or pointer may be in a different position.
(\s-1VMS\s0)
.Sp
The value returned by \f(CWtell\fR may be affected after the call, and
the filehandle may be flushed. (Win32)
.Ip "chmod \s-1LIST\s0" 8
Only limited meaning. Disabling/enabling write permission is mapped to
locking/unlocking the file. (Mac\ \s-1OS\s0)
.Sp
Only good for changing \*(L"owner\*(R" read-write access, \*(L"group\*(R", and \*(L"other\*(R"
bits are meaningless. (Win32)
.Sp
Only good for changing \*(L"owner\*(R" and \*(L"other\*(R" read-write access. (\s-1RISC\s0\ \s-1OS\s0)
.Sp
Access permissions are mapped onto \s-1VOS\s0 access-control list changes. (\s-1VOS\s0)
.Ip "chown \s-1LIST\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Sp
Does nothing, but won't fail. (Win32)
.Ip "chroot \s-1FILENAME\s0" 8
.Ip "chroot" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, Plan9, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "crypt \s-1PLAINTEXT\s0,\s-1SALT\s0" 8
May not be available if library or source was not provided when building
perl. (Win32)
.Sp
Not implemented. (\s-1VOS\s0)
.Ip "dbmclose \s-1HASH\s0" 8
Not implemented. (\s-1VMS\s0, Plan9, \s-1VOS\s0)
.Ip "dbmopen \s-1HASH\s0,\s-1DBNAME\s0,\s-1MODE\s0" 8
Not implemented. (\s-1VMS\s0, Plan9, \s-1VOS\s0)
.Ip "dump \s-1LABEL\s0" 8
Not useful. (Mac\ \s-1OS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
Not implemented. (Win32)
.Sp
Invokes \s-1VMS\s0 debugger. (\s-1VMS\s0)
.Ip "exec \s-1LIST\s0" 8
Not implemented. (Mac\ \s-1OS\s0)
.Ip "fcntl \s-1FILEHANDLE\s0,\s-1FUNCTION\s0,\s-1SCALAR\s0" 8
Not implemented. (Win32, \s-1VMS\s0)
.Ip "flock \s-1FILEHANDLE\s0,\s-1OPERATION\s0" 8
Not implemented (Mac\ \s-1OS\s0, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0).
.Sp
Available only on Windows \s-1NT\s0 (not on Windows 95). (Win32)
.Ip "fork" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, AmigaOS, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "getlogin" 8
Not implemented. (Mac\ \s-1OS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "getpgrp \s-1PID\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "getppid" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "getpriority \s-1WHICH\s0,\s-1WHO\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "getpwnam \s-1NAME\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Sp
Not useful. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "getgrnam \s-1NAME\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "getnetbyname \s-1NAME\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "getpwuid \s-1UID\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Sp
Not useful. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "getgrgid \s-1GID\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "getnetbyaddr \s-1ADDR\s0,\s-1ADDRTYPE\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "getprotobynumber \s-1NUMBER\s0" 8
Not implemented. (Mac\ \s-1OS\s0)
.Ip "getservbyport \s-1PORT\s0,\s-1PROTO\s0" 8
Not implemented. (Mac\ \s-1OS\s0)
.Ip "getpwent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Ip "getgrent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0)
.Ip "gethostent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Ip "getnetent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "getprotoent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "getservent" 8
Not implemented. (Win32, Plan9)
.Ip "setpwent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1RISC\s0\ \s-1OS\s0)
.Ip "setgrent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "sethostent \s-1STAYOPEN\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9, \s-1RISC\s0\ \s-1OS\s0)
.Ip "setnetent \s-1STAYOPEN\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9, \s-1RISC\s0\ \s-1OS\s0)
.Ip "setprotoent \s-1STAYOPEN\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9, \s-1RISC\s0\ \s-1OS\s0)
.Ip "setservent \s-1STAYOPEN\s0" 8
Not implemented. (Plan9, Win32, \s-1RISC\s0\ \s-1OS\s0)
.Ip "endpwent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Ip "endgrent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "endhostent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32)
.Ip "endnetent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "endprotoent" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, Plan9)
.Ip "endservent" 8
Not implemented. (Plan9, Win32)
.Ip "getsockopt \s-1SOCKET\s0,\s-1LEVEL\s0,\s-1OPTNAME\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Plan9)
.Ip "glob \s-1EXPR\s0" 8
.Ip "glob" 8
Globbing built-in, but only \f(CW*\fR and \f(CW?\fR metacharacters are supported.
(Mac\ \s-1OS\s0)
.Sp
Features depend on external perlglob.exe or perlglob.bat. May be
overridden with something like File::DosGlob, which is recommended.
(Win32)
.Sp
Globbing built-in, but only \f(CW*\fR and \f(CW?\fR metacharacters are supported.
Globbing relies on operating system calls, which may return filenames
in any order.  As most filesystems are case-insensitive, even \*(L"sorted\*(R"
filenames will not be in case-sensitive order. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "ioctl \s-1FILEHANDLE\s0,\s-1FUNCTION\s0,\s-1SCALAR\s0" 8
Not implemented. (\s-1VMS\s0)
.Sp
Available only for socket handles, and it does what the \fIioctlsocket()\fR call
in the Winsock \s-1API\s0 does. (Win32)
.Sp
Available only for socket handles. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "kill \s-1LIST\s0" 8
Not implemented, hence not useful for taint checking. (Mac\ \s-1OS\s0,
\s-1RISC\s0\ \s-1OS\s0)
.Sp
Available only for process handles returned by the \f(CWsystem(1, ...)\fR
method of spawning a process. (Win32)
.Ip "link \s-1OLDFILE\s0,\s-1NEWFILE\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "lstat \s-1FILEHANDLE\s0" 8
.Ip "lstat \s-1EXPR\s0" 8
.Ip "lstat" 8
Not implemented. (\s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
Return values may be bogus. (Win32)
.Ip "msgctl \s-1ID\s0,\s-1CMD\s0,\s-1ARG\s0" 8
.Ip "msgget \s-1KEY\s0,\s-1FLAGS\s0" 8
.Ip "msgsnd \s-1ID\s0,\s-1MSG\s0,\s-1FLAGS\s0" 8
.Ip "msgrcv \s-1ID\s0,\s-1VAR\s0,\s-1SIZE\s0,\s-1TYPE\s0,\s-1FLAGS\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, Plan9, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "open \s-1FILEHANDLE\s0,\s-1EXPR\s0" 8
.Ip "open \s-1FILEHANDLE\s0" 8
The \f(CW|\fR variants are only supported if ToolServer is installed.
(Mac\ \s-1OS\s0)
.Sp
open to \f(CW|-\fR and \f(CW-|\fR are unsupported. (Mac\ \s-1OS\s0, Win32, \s-1RISC\s0\ \s-1OS\s0)
.Ip "pipe \s-1READHANDLE\s0,\s-1WRITEHANDLE\s0" 8
Not implemented. (Mac\ \s-1OS\s0)
.Ip "readlink \s-1EXPR\s0" 8
.Ip "readlink" 8
Not implemented. (Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "select \s-1RBITS\s0,\s-1WBITS\s0,\s-1EBITS\s0,\s-1TIMEOUT\s0" 8
Only implemented on sockets. (Win32)
.Sp
Only reliable on sockets. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "semctl \s-1ID\s0,\s-1SEMNUM\s0,\s-1CMD\s0,\s-1ARG\s0" 8
.Ip "semget \s-1KEY\s0,\s-1NSEMS\s0,\s-1FLAGS\s0" 8
.Ip "semop \s-1KEY\s0,\s-1OPSTRING\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "setpgrp \s-1PID\s0,\s-1PGRP\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "setpriority \s-1WHICH\s0,\s-1WHO\s0,\s-1PRIORITY\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "setsockopt \s-1SOCKET\s0,\s-1LEVEL\s0,\s-1OPTNAME\s0,\s-1OPTVAL\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Plan9)
.Ip "shmctl \s-1ID\s0,\s-1CMD\s0,\s-1ARG\s0" 8
.Ip "shmget \s-1KEY\s0,\s-1SIZE\s0,\s-1FLAGS\s0" 8
.Ip "shmread \s-1ID\s0,\s-1VAR\s0,\s-1POS\s0,\s-1SIZE\s0" 8
.Ip "shmwrite \s-1ID\s0,\s-1STRING\s0,\s-1POS\s0,\s-1SIZE\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "socketpair \s-1SOCKET1\s0,\s-1SOCKET2\s0,\s-1DOMAIN\s0,\s-1TYPE\s0,\s-1PROTOCOL\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "stat \s-1FILEHANDLE\s0" 8
.Ip "stat \s-1EXPR\s0" 8
.Ip "stat" 8
mtime and atime are the same thing, and ctime is creation time instead of
inode change time. (Mac\ \s-1OS\s0)
.Sp
device and inode are not meaningful.  (Win32)
.Sp
device and inode are not necessarily reliable.  (\s-1VMS\s0)
.Sp
mtime, atime and ctime all return the last modification time.  Device and
inode are not necessarily reliable.  (\s-1RISC\s0\ \s-1OS\s0)
.Ip "symlink \s-1OLDFILE\s0,\s-1NEWFILE\s0" 8
Not implemented. (Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Ip "syscall \s-1LIST\s0" 8
Not implemented. (Mac\ \s-1OS\s0, Win32, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0, \s-1VOS\s0)
.Ip "sysopen \s-1FILEHANDLE\s0,\s-1FILENAME\s0,\s-1MODE\s0,\s-1PERMS\s0" 8
The traditional \*(L"0\*(R", \*(L"1\*(R", and \*(L"2\*(R" MODEs are implemented with different
numeric values on some systems.  The flags exported by \f(CWFcntl\fR
(O_RDONLY, O_WRONLY, O_RDWR) should work everywhere though.  (Mac
\s-1OS\s0, \s-1OS/390\s0)
.Ip "system \s-1LIST\s0" 8
Only implemented if ToolServer is installed. (Mac\ \s-1OS\s0)
.Sp
As an optimization, may not call the command shell specified in
\f(CW$ENV{PERL5SHELL}\fR. \f(CWsystem(1, @args)\fR spawns an external
process and immediately returns its process designator, without
waiting for it to terminate.  Return value may be used subsequently
in \f(CWwait\fR or \f(CWwaitpid\fR.  (Win32)
.Sp
There is no shell to process metacharacters, and the native standard is
to pass a command line terminated by \*(L"\en" \*(L"\er\*(R" or \*(L"\e0\*(R" to the spawned
program.  Redirection such as \f(CW> foo\fR is performed (if at all) by
the run time library of the spawned program.  \f(CWsystem\fR \fIlist\fR will call
the Unix emulation library's \f(CWexec\fR emulation, which attempts to provide
emulation of the stdin, stdout, stderr in force in the parent, providing
the child program uses a compatible version of the emulation library.
\fIscalar\fR will call the native command line direct and no such emulation
of a child Unix program will exists.  Mileage \fBwill\fR vary.  (\s-1RISC\s0\ \s-1OS\s0)
.Ip "times" 8
Only the first entry returned is nonzero. (Mac\ \s-1OS\s0)
.Sp
\*(L"cumulative\*(R" times will be bogus.  On anything other than Windows \s-1NT\s0,
\*(L"system\*(R" time will be bogus, and \*(L"user\*(R" time is actually the time
returned by the \fIclock()\fR function in the C runtime library. (Win32)
.Sp
Not useful. (\s-1RISC\s0\ \s-1OS\s0)
.Ip "truncate \s-1FILEHANDLE\s0,\s-1LENGTH\s0" 8
.Ip "truncate \s-1EXPR\s0,\s-1LENGTH\s0" 8
Not implemented. (\s-1VMS\s0)
.Sp
Truncation to zero-length only. (\s-1VOS\s0)
.Sp
If a \s-1FILEHANDLE\s0 is supplied, it must be writable and opened in append
mode (i.e., use \f(CWopen(FH, '\fR>filename')>
or \f(CWsysopen(FH,...,O_APPEND|O_RDWR)\fR.  If a filename is supplied, it
should not be held open elsewhere. (Win32)
.Ip "umask \s-1EXPR\s0" 8
.Ip "umask" 8
Returns undef where unavailable, as of version 5.005.
.Ip "utime \s-1LIST\s0" 8
Only the modification time is updated. (Mac\ \s-1OS\s0, \s-1VMS\s0, \s-1RISC\s0\ \s-1OS\s0)
.Sp
May not behave as expected.  Behavior depends on the C runtime
library's implementation of \fIutime()\fR, and the filesystem being
used.  The \s-1FAT\s0 filesystem typically does not support an \*(L"access
time\*(R" field, and it may limit timestamps to a granularity of
two seconds. (Win32)
.Ip "wait" 8
.Ip "waitpid \s-1PID\s0,\s-1FLAGS\s0" 8
Not implemented. (Mac\ \s-1OS\s0, \s-1VOS\s0)
.Sp
Can only be applied to process handles returned for processes spawned
using \f(CWsystem(1, ...)\fR. (Win32)
.Sp
Not useful. (\s-1RISC\s0\ \s-1OS\s0)
.SH "CHANGES"
.Ip "1.35, 9 September 1998" 4
Updated for Stratus \s-1VOS\s0.
.Ip "1.33, 06 August 1998" 4
Integrate more minor changes.
.Ip "1.32, 05 August 1998" 4
Integrate more minor changes.
.Ip "1.30, 03 August 1998" 4
Major update for \s-1RISC\s0 \s-1OS\s0, other minor changes.
.Ip "1.23, 10 July 1998" 4
First public release with perl5.005.
.SH "AUTHORS / CONTRIBUTORS"
Abigail <abigail@fnx.com>,
Charles Bailey <bailey@newman.upenn.edu>,
Graham Barr <gbarr@pobox.com>,
Tom Christiansen <tchrist@perl.com>,
Nicholas Clark <Nicholas.Clark@liverpool.ac.uk>,
Andy Dougherty <doughera@lafcol.lafayette.edu>,
Dominic Dunlop <domo@vo.lu>,
Paul Green <Paul_Green@stratus.com>,
M.J.T. Guy <mjtg@cus.cam.ac.uk>,
Luther Huffman <lutherh@stratcom.com>,
Nick Ing-Simmons <nick@ni-s.u-net.com>,
Andreas J. Ko\*:nig <koenig@kulturbox.de>,
Andrew M. Langmead <aml@world.std.com>,
Paul Moore <Paul.Moore@uk.origin-it.com>,
Chris Nandor <pudge@pobox.com>,
Matthias Neeracher <neeri@iis.ee.ethz.ch>,
Gary Ng <71564.1743@CompuServe.COM>,
Tom Phoenix <rootbeer@teleport.com>,
Peter Prymmer <pvhp@forte.com>,
Hugo van der Sanden <hv@crypt0.demon.co.uk>,
Gurusamy Sarathy <gsar@umich.edu>,
Paul J. Schinder <schinder@pobox.com>,
Dan Sugalski <sugalskd@ous.edu>,
Nathan Torkington <gnat@frii.com>.
.PP
This document is maintained by Chris Nandor.
.SH "VERSION"
Version 1.35, last modified 09 September 1998.

.rn }` ''
.IX Title "PERLPORT 1"
.IX Name "perlport - Writing portable Perl"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Item "Not all Perl programs have to be portable"

.IX Item "The vast majority of Perl \fBis\fR portable"

.IX Header "ISSUES"

.IX Subsection "Newlines"

.IX Subsection "Numbers endianness and Width"

.IX Subsection "Files"

.IX Subsection "System Interaction"

.IX Subsection "Interprocess Communication (\s-1IPC\s0)"

.IX Subsection "External Subroutines (\s-1XS\s0)"

.IX Subsection "Standard Modules"

.IX Subsection "Time and Date"

.IX Subsection "Character sets and character encoding"

.IX Subsection "Internationalisation"

.IX Subsection "System Resources"

.IX Subsection "Security"

.IX Subsection "Style"

.IX Header "CPAN Testers"

.IX Item "Mailing list: cpan-testers@perl.org"

.IX Item "Testing results: \f(CWhttp://www.connect.net/gbarr/cpan-test/\fR"

.IX Header "PLATFORMS"

.IX Subsection "Unix"

.IX Subsection "\s-1DOS\s0 and Derivatives"

.IX Item "The djgpp environment for \s-1DOS\s0, \f(CWhttp://www.delorie.com/djgpp/\fR"

.IX Item "The \s-1EMX\s0 environment for \s-1DOS\s0, \s-1OS/2\s0, etc. \f(CWemx@iaehv.nl\fR, \f(CWhttp://www.juge.com/bbs/Hobb.19.html\fR"

.IX Item "Build instructions for Win32, the \fIperlwin32\fR manpage."

.IX Item "The ActiveState Pages, \f(CWhttp://www.activestate.com/\fR"

.IX Subsection "Mac\ \s-1OS\s0"

.IX Item "The MacPerl Pages, \f(CWhttp://www.ptf.com/macperl/\fR."

.IX Item "The MacPerl mailing list, \f(CWmac-perl-request@iis.ee.ethz.ch\fR."

.IX Subsection "\s-1VMS\s0"

.IX Item "the \fIperlvms.pod\fR manpage"

.IX Item "vmsperl list, \f(CWvmsperl-request@newman.upenn.edu\fR"

.IX Item "vmsperl on the web, \f(CWhttp://www.sidhe.org/vmsperl/index.html\fR"

.IX Subsection "\s-1VOS\s0"

.IX Item "the \fI\s-1README\s0.vos\fR manpage"

.IX Item "\s-1VOS\s0 mailing list"

.IX Item "\s-1VOS\s0 Perl on the web at \f(CWhttp://ftp.stratus.com/pub/vos/vos.html\fR"

.IX Subsection "\s-1EBCDIC\s0 Platforms"

.IX Item "perl-mvs list"

.IX Item "\s-1AS/400\s0 Perl information at \f(CWhttp://as400.rochester.ibm.com/\fR"

.IX Subsection "Acorn \s-1RISC\s0 \s-1OS\s0"

.IX Item "perl list"

.IX Subsection "Other perls"

.IX Item "Atari, Guido Flohr's page \f(CWhttp://stud.uni-sb.de/~gufl0000/\fR"

.IX Item "\s-1HP\s0 300 \s-1MPE/\s0iX  \f(CWhttp://www.cccd.edu/~markb/perlix.html\fR"

.IX Item "Novell Netware"

.IX Header "FUNCTION IMPLEMENTATIONS"

.IX Subsection "Alphabetical Listing of Perl Functions"

.IX Item "-X \s-1FILEHANDLE\s0"

.IX Item "-X \s-1EXPR\s0"

.IX Item "-X"

.IX Item "binmode \s-1FILEHANDLE\s0"

.IX Item "chmod \s-1LIST\s0"

.IX Item "chown \s-1LIST\s0"

.IX Item "chroot \s-1FILENAME\s0"

.IX Item "chroot"

.IX Item "crypt \s-1PLAINTEXT\s0,\s-1SALT\s0"

.IX Item "dbmclose \s-1HASH\s0"

.IX Item "dbmopen \s-1HASH\s0,\s-1DBNAME\s0,\s-1MODE\s0"

.IX Item "dump \s-1LABEL\s0"

.IX Item "exec \s-1LIST\s0"

.IX Item "fcntl \s-1FILEHANDLE\s0,\s-1FUNCTION\s0,\s-1SCALAR\s0"

.IX Item "flock \s-1FILEHANDLE\s0,\s-1OPERATION\s0"

.IX Item "fork"

.IX Item "getlogin"

.IX Item "getpgrp \s-1PID\s0"

.IX Item "getppid"

.IX Item "getpriority \s-1WHICH\s0,\s-1WHO\s0"

.IX Item "getpwnam \s-1NAME\s0"

.IX Item "getgrnam \s-1NAME\s0"

.IX Item "getnetbyname \s-1NAME\s0"

.IX Item "getpwuid \s-1UID\s0"

.IX Item "getgrgid \s-1GID\s0"

.IX Item "getnetbyaddr \s-1ADDR\s0,\s-1ADDRTYPE\s0"

.IX Item "getprotobynumber \s-1NUMBER\s0"

.IX Item "getservbyport \s-1PORT\s0,\s-1PROTO\s0"

.IX Item "getpwent"

.IX Item "getgrent"

.IX Item "gethostent"

.IX Item "getnetent"

.IX Item "getprotoent"

.IX Item "getservent"

.IX Item "setpwent"

.IX Item "setgrent"

.IX Item "sethostent \s-1STAYOPEN\s0"

.IX Item "setnetent \s-1STAYOPEN\s0"

.IX Item "setprotoent \s-1STAYOPEN\s0"

.IX Item "setservent \s-1STAYOPEN\s0"

.IX Item "endpwent"

.IX Item "endgrent"

.IX Item "endhostent"

.IX Item "endnetent"

.IX Item "endprotoent"

.IX Item "endservent"

.IX Item "getsockopt \s-1SOCKET\s0,\s-1LEVEL\s0,\s-1OPTNAME\s0"

.IX Item "glob \s-1EXPR\s0"

.IX Item "glob"

.IX Item "ioctl \s-1FILEHANDLE\s0,\s-1FUNCTION\s0,\s-1SCALAR\s0"

.IX Item "kill \s-1LIST\s0"

.IX Item "link \s-1OLDFILE\s0,\s-1NEWFILE\s0"

.IX Item "lstat \s-1FILEHANDLE\s0"

.IX Item "lstat \s-1EXPR\s0"

.IX Item "lstat"

.IX Item "msgctl \s-1ID\s0,\s-1CMD\s0,\s-1ARG\s0"

.IX Item "msgget \s-1KEY\s0,\s-1FLAGS\s0"

.IX Item "msgsnd \s-1ID\s0,\s-1MSG\s0,\s-1FLAGS\s0"

.IX Item "msgrcv \s-1ID\s0,\s-1VAR\s0,\s-1SIZE\s0,\s-1TYPE\s0,\s-1FLAGS\s0"

.IX Item "open \s-1FILEHANDLE\s0,\s-1EXPR\s0"

.IX Item "open \s-1FILEHANDLE\s0"

.IX Item "pipe \s-1READHANDLE\s0,\s-1WRITEHANDLE\s0"

.IX Item "readlink \s-1EXPR\s0"

.IX Item "readlink"

.IX Item "select \s-1RBITS\s0,\s-1WBITS\s0,\s-1EBITS\s0,\s-1TIMEOUT\s0"

.IX Item "semctl \s-1ID\s0,\s-1SEMNUM\s0,\s-1CMD\s0,\s-1ARG\s0"

.IX Item "semget \s-1KEY\s0,\s-1NSEMS\s0,\s-1FLAGS\s0"

.IX Item "semop \s-1KEY\s0,\s-1OPSTRING\s0"

.IX Item "setpgrp \s-1PID\s0,\s-1PGRP\s0"

.IX Item "setpriority \s-1WHICH\s0,\s-1WHO\s0,\s-1PRIORITY\s0"

.IX Item "setsockopt \s-1SOCKET\s0,\s-1LEVEL\s0,\s-1OPTNAME\s0,\s-1OPTVAL\s0"

.IX Item "shmctl \s-1ID\s0,\s-1CMD\s0,\s-1ARG\s0"

.IX Item "shmget \s-1KEY\s0,\s-1SIZE\s0,\s-1FLAGS\s0"

.IX Item "shmread \s-1ID\s0,\s-1VAR\s0,\s-1POS\s0,\s-1SIZE\s0"

.IX Item "shmwrite \s-1ID\s0,\s-1STRING\s0,\s-1POS\s0,\s-1SIZE\s0"

.IX Item "socketpair \s-1SOCKET1\s0,\s-1SOCKET2\s0,\s-1DOMAIN\s0,\s-1TYPE\s0,\s-1PROTOCOL\s0"

.IX Item "stat \s-1FILEHANDLE\s0"

.IX Item "stat \s-1EXPR\s0"

.IX Item "stat"

.IX Item "symlink \s-1OLDFILE\s0,\s-1NEWFILE\s0"

.IX Item "syscall \s-1LIST\s0"

.IX Item "sysopen \s-1FILEHANDLE\s0,\s-1FILENAME\s0,\s-1MODE\s0,\s-1PERMS\s0"

.IX Item "system \s-1LIST\s0"

.IX Item "times"

.IX Item "truncate \s-1FILEHANDLE\s0,\s-1LENGTH\s0"

.IX Item "truncate \s-1EXPR\s0,\s-1LENGTH\s0"

.IX Item "umask \s-1EXPR\s0"

.IX Item "umask"

.IX Item "utime \s-1LIST\s0"

.IX Item "wait"

.IX Item "waitpid \s-1PID\s0,\s-1FLAGS\s0"

.IX Header "CHANGES"

.IX Item "1.35, 9 September 1998"

.IX Item "1.33, 06 August 1998"

.IX Item "1.32, 05 August 1998"

.IX Item "1.30, 03 August 1998"

.IX Item "1.23, 10 July 1998"

.IX Header "AUTHORS / CONTRIBUTORS"

.IX Header "VERSION"

