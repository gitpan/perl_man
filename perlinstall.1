.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLINSTALL 1 "perl 5.005, patch 52" "8/Aug/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
Install \- Build and Installation guide for perl5.
.SH "SYNOPSIS"
The basic steps to build and install perl5 on a Unix system are:
.PP
.Vb 5
\&        rm -f config.sh Policy.sh
\&        sh Configure
\&        make
\&        make test
\&        make install
.Ve
.Vb 4
\&        # You may also wish to add these:
\&        (cd /usr/include && h2ph *.h sys/*.h)
\&        (installhtml --help)
\&        (cd pod && make tex  && <process the latex files>)
.Ve
Each of these is explained in further detail below.
.PP
For information on non-Unix systems, see the section on
the section on \fIPorting information\fR below.
.PP
For information on what's new in this release, see the
pod/perldelta.pod file.  For more detailed information about specific
changes, see the Changes file.
.SH "DESCRIPTION"
This document is written in pod format as an easy way to indicate its
structure.  The pod format is described in pod/perlpod.pod, but you can
read it as is with any pager or editor.  Headings and items are marked
by lines beginning with \*(L'=\*(R'.  The other mark-up used is
.PP
.Vb 3
\&    B<text>     embolden text, used for switches, programs or commands
\&    C<code>     literal code
\&    L<name>     A link (cross reference) to name
.Ve
You should probably at least skim through this entire document before
proceeding.
.PP
If you're building Perl on a non-Unix system, you should also read
the README file specific to your operating system, since this may
provide additional or different instructions for building Perl.
.PP
If there is a hint file for your system (in the hints/ directory) you
should also read that hint file for specific information for your
system.  (Unixware users should use the svr4.sh hint file.)
.SH "WARNING:  This version is not binary compatible with Perl 5.004."
Starting with Perl 5.004_50 there were many deep and far-reaching changes
to the language internals.  If you have dynamically loaded extensions
that you built under perl 5.003 or 5.004, you can continue to use them
with 5.004, but you will need to rebuild and reinstall those extensions
to use them 5.005.  See the discussions below on
the section on \fICoexistence with earlier versions of perl5\fR and
the section on \fIUpgrading from 5.004 to 5.005\fR for more details.
.PP
The standard extensions supplied with Perl will be handled automatically.
.PP
In a related issue, old extensions may possibly be affected by the
changes in the Perl language in the current release.  Please see
pod/perldelta.pod for a description of what's changed.
.SH "Space Requirements"
The complete perl5 source tree takes up about 10 MB of disk space.  The
complete tree after completing make takes roughly 20 MB, though the
actual total is likely to be quite system-dependent.  The installation
directories need something on the order of 10 MB, though again that
value is system-dependent.
.SH "Start with a Fresh Distribution"
If you have built perl before, you should clean out the build directory
with the command
.PP
.Vb 1
\&        make distclean
.Ve
or
.PP
.Vb 1
\&        make realclean
.Ve
The only difference between the two is that make distclean also removes
your old config.sh and Policy.sh files.
.PP
The results of a Configure run are stored in the config.sh and Policy.sh
files.  If you are upgrading from a previous version of perl, or if you
change systems or compilers or make other significant changes, or if
you are experiencing difficulties building perl, you should probably
not re-use your old config.sh.  Simply remove it or rename it, e.g.
.PP
.Vb 1
\&        mv config.sh config.sh.old
.Ve
If you wish to use your old config.sh, be especially attentive to the
version and architecture-specific questions and answers.  For example,
the default directory for architecture-dependent library modules
includes the version name.  By default, Configure will reuse your old
name (e.g. /opt/perl/lib/i86pc-solaris/5.003) even if you're running
Configure for a different version, e.g. 5.004.  Yes, Configure should
probably check and correct for this, but it doesn't, presently.
Similarly, if you used a shared libperl.so (see below) with version
numbers, you will probably want to adjust them as well.
.PP
Also, be careful to check your architecture name.  Some Linux systems
(such as Debian) use i386, while others may use i486, i586, or i686.
If you pick up a precompiled binary, it might not use the same name.
.PP
In short, if you wish to use your old config.sh, I recommend running
Configure interactively rather than blindly accepting the defaults.
.PP
If your reason to reuse your old config.sh is to save your
particular installation choices, then you can probably achieve the
same effect by using the new Policy.sh file.  See the section on
the section on \fISite-wide Policy settings\fR below.
.SH "Run Configure"
Configure will figure out various things about your system.  Some
things Configure will figure out for itself, other things it will ask
you about.  To accept the default, just press RETURN.   The default
is almost always okay.  At any Configure prompt, you can type  &\-d
and Configure will use the defaults from then on.
.PP
After it runs, Configure will perform variable substitution on all the
*.SH files and offer to run make depend.
.PP
Configure supports a number of useful options.  Run \fBConfigure \-h\fR to
get a listing.  See the Porting/Glossary file for a complete list of
Configure variables you can set and their definitions.
.PP
To compile with gcc, for example, you should run
.PP
.Vb 1
\&        sh Configure -Dcc=gcc
.Ve
This is the preferred way to specify gcc (or another alternative
compiler) so that the hints files can set appropriate defaults.
.PP
If you want to use your old config.sh but override some of the items
with command line options, you need to use \fBConfigure \-O\fR.
.PP
By default, for most systems, perl will be installed in
/usr/local/{bin, lib, man}.  You can specify a different \*(L'prefix\*(R' for
the default installation directory, when Configure prompts you or by
using the Configure command line option \-Dprefix='/some/directory\*(R',
e.g.
.PP
.Vb 1
\&        sh Configure -Dprefix=/opt/perl
.Ve
If your prefix contains the string \*(L"perl\*(R", then the directories
are simplified.  For example, if you use prefix=/opt/perl,
then Configure will suggest /opt/perl/lib instead of
/opt/perl/lib/perl5/.
.PP
NOTE:  You must not specify an installation directory that is below
your perl source directory.  If you do, installperl will attempt
infinite recursion.
.PP
It may seem obvious to say, but Perl is useful only when users can
easily find it.  It's often a good idea to have both /usr/bin/perl and
/usr/local/bin/perl be symlinks to the actual binary.  Be especially
careful, however, of overwriting a version of perl supplied by your
vendor.  In any case, system administrators are strongly encouraged to
put (symlinks to) perl and its accompanying utilities, such as perldoc,
into a directory typically found along a user's PATH, or in another
obvious and convenient place.
.PP
By default, Configure will compile perl to use dynamic loading if
your system supports it.  If you want to force perl to be compiled
statically, you can either choose this when Configure prompts you or
you can use the Configure command line option \-Uusedl.
.PP
If you are willing to accept all the defaults, and you want terse
output, you can run
.PP
.Vb 1
\&        sh Configure -des
.Ve
For my Solaris system, I usually use
.PP
.Vb 1
\&        sh Configure -Dprefix=/opt/perl -Doptimize='-xpentium -xO4' -des
.Ve
.Sh "\s-1GNU\s0\-style configure"
If you prefer the \s-1GNU\s0\-style configure command line interface, you can
use the supplied configure.gnu command, e.g.
.PP
.Vb 1
\&        CC=gcc ./configure.gnu
.Ve
The configure.gnu script emulates a few of the more common configure
options.  Try
.PP
.Vb 1
\&        ./configure.gnu --help
.Ve
for a listing.
.PP
Cross compiling is not supported.
.PP
(The file is called configure.gnu to avoid problems on systems
that would not distinguish the files \*(L"Configure\*(R" and \*(L"configure\*(R".)
.Sh "Extensions"
By default, Configure will offer to build every extension which appears
to be supported.  For example, Configure will offer to build GDBM_File
only if it is able to find the gdbm library.  (See examples below.)
B, DynaLoader, Fcntl, \s-1IO\s0, and attrs are always built by default.
Configure does not contain code to test for \s-1POSIX\s0 compliance, so \s-1POSIX\s0
is always built by default as well.  If you wish to skip \s-1POSIX\s0, you can
set the Configure variable useposix=false either in a hint file or from
the Configure command line.  Similarly, the Opcode extension is always
built by default, but you can skip it by setting the Configure variable
useopcode=false either in a hint file for from the command line.
.PP
You can learn more about each of these extensions by consulting the
documentation in the individual .pm modules, located under the
ext/ subdirectory.
.PP
Even if you do not have dynamic loading, you must still build the
DynaLoader extension; you should just build the stub dl_none.xs
version.  (Configure will suggest this as the default.)
.PP
In summary, here are the Configure command-line variables you can set
to turn off each extension:
.PP
.Vb 14
\&    B                   (Always included by default)
\&    DB_File             i_db
\&    DynaLoader          (Must always be included as a static extension)
\&    Fcntl               (Always included by default)
\&    GDBM_File           i_gdbm
\&    IO                  (Always included by default)
\&    NDBM_File           i_ndbm
\&    ODBM_File           i_dbm
\&    POSIX               useposix
\&    SDBM_File           (Always included by default)
\&    Opcode              useopcode
\&    Socket              d_socket
\&    Threads             usethreads
\&    attrs               (Always included by default)
.Ve
Thus to skip the NDBM_File extension, you can use
.PP
.Vb 1
\&        sh Configure -Ui_ndbm
.Ve
Again, this is taken care of automatically if you don't have the ndbm
library.
.PP
Of course, you may always run Configure interactively and select only
the extensions you want.
.PP
Note:  The DB_File module will only work with version 1.x of Berkeley
\s-1DB\s0 or newer releases of version 2.  Configure will automatically detect
this for you and refuse to try to build DB_File with version 2.
.PP
If you re-use your old config.sh but change your system (e.g. by
adding libgdbm) Configure will still offer your old choices of extensions
for the default answer, but it will also point out the discrepancy to
you.
.PP
Finally, if you have dynamic loading (most modern Unix systems do)
remember that these extensions do not increase the size of your perl
executable, nor do they impact start-up time, so you probably might as
well build all the ones that will work on your system.
.Sh "Including locally-installed libraries"
Perl5 comes with interfaces to number of database extensions, including
dbm, ndbm, gdbm, and Berkeley db.  For each extension, if
Configure can find the appropriate header files and libraries, it will
automatically include that extension.  The gdbm and db libraries
are not included with perl.  See the library documentation for
how to obtain the libraries.
.PP
Note:  If your database header (.h) files are not in a
directory normally searched by your C compiler, then you will need to
include the appropriate \-I/your/directory option when prompted by
Configure.  If your database library (.a) files are not in a directory
normally searched by your C compiler and linker, then you will need to
include the appropriate \-L/your/directory option when prompted by
Configure.  See the examples below.
.Sh "Examples"
.Ip "gdbm in /usr/local" 4
Suppose you have gdbm and want Configure to find it and build the
GDBM_File extension.  This examples assumes you have gdbm.h
installed in /usr/local/include/gdbm.h and libgdbm.a installed in
/usr/local/lib/libgdbm.a.  Configure should figure all the
necessary steps out automatically.
.Sp
Specifically, when Configure prompts you for flags for
your C compiler, you should include  \-I/usr/local/include.
.Sp
When Configure prompts you for linker flags, you should include
\-L/usr/local/lib.
.Sp
If you are using dynamic loading, then when Configure prompts you for
linker flags for dynamic loading, you should again include
\-L/usr/local/lib.
.Sp
Again, this should all happen automatically.  If you want to accept the
defaults for all the questions and have Configure print out only terse
messages, then you can just run
.Sp
.Vb 1
\&        sh Configure -des
.Ve
and Configure should include the GDBM_File extension automatically.
.Sp
This should actually work if you have gdbm installed in any of
(/usr/local, /opt/local, /usr/gnu, /opt/gnu, /usr/\s-1GNU\s0, or /opt/\s-1GNU\s0).
.Ip "gdbm in /usr/you" 4
Suppose you have gdbm installed in some place other than /usr/local/,
but you still want Configure to find it.  To be specific, assume you
have /usr/you/include/gdbm.h and /usr/you/lib/libgdbm.a.  You
still have to add \-I/usr/you/include to cc flags, but you have to take
an extra step to help Configure find libgdbm.a.  Specifically, when
Configure prompts you for library directories, you have to add
/usr/you/lib to the list.
.Sp
It is possible to specify this from the command line too (all on one
line):
.Sp
.Vb 3
\&        sh Configure -des \e
\&                -Dlocincpth="/usr/you/include" \e
\&                -Dloclibpth="/usr/you/lib"
.Ve
locincpth is a space-separated list of include directories to search.
Configure will automatically add the appropriate \-I directives.
.Sp
loclibpth is a space-separated list of library directories to search.
Configure will automatically add the appropriate \-L directives.  If
you have some libraries under /usr/local/ and others under
/usr/you, then you have to include both, namely
.Sp
.Vb 3
\&        sh Configure -des \e
\&                -Dlocincpth="/usr/you/include /usr/local/include" \e
\&                -Dloclibpth="/usr/you/lib /usr/local/lib"
.Ve
.Sh "Installation Directories"
The installation directories can all be changed by answering the
appropriate questions in Configure.  For convenience, all the
installation questions are near the beginning of Configure.
.PP
I highly recommend running Configure interactively to be sure it puts
everything where you want it.  At any point during the Configure
process, you can answer a question with  &\-d  and Configure
will use the defaults from then on.
.PP
By default, Configure will use the following directories for library files
for 5.005 (archname is a string like sun4-sunos, determined by Configure).
.PP
.Vb 5
\&    Configure variable          Default value
\&        $archlib        /usr/local/lib/perl5/5.005/archname
\&        $privlib        /usr/local/lib/perl5/5.005
\&        $sitearch       /usr/local/lib/perl5/site_perl/5.005/archname
\&        $sitelib        /usr/local/lib/perl5/site_perl/5.005
.Ve
Some users prefer to append a \*(L"/share\*(R" to \f(CW$privlib\fR and \f(CW$sitelib\fR
to emphasize that those directories can be shared among different
architectures.
.PP
By default, Configure will use the following directories for manual pages:
.PP
.Vb 3
\&    Configure variable          Default value
\&        $man1dir        /usr/local/man/man1
\&        $man3dir        /usr/local/lib/perl5/man/man3
.Ve
(Actually, Configure recognizes the \s-1SVR3-\s0style
/usr/local/man/l_man/man1 directories, if present, and uses those
instead.)
.PP
The module man pages are stuck in that strange spot so that
they don't collide with other man pages stored in /usr/local/man/man3,
and so that Perl's man pages don't hide system man pages.  On some
systems, \fBman less\fR would end up calling up Perl's less.pm module man
page, rather than the less program.  (This default location will likely
change to /usr/local/man/man3 in a future release of perl.)
.PP
Note:  Many users prefer to store the module man pages in
/usr/local/man/man3.  You can do this from the command line with
.PP
.Vb 1
\&        sh Configure -Dman3dir=/usr/local/man/man3
.Ve
Some users also prefer to use a .3pm suffix.  You can do that with
.PP
.Vb 1
\&        sh Configure -Dman3ext=3pm
.Ve
If you specify a prefix that contains the string \*(L"perl\*(R", then the
directory structure is simplified.  For example, if you Configure with
\-Dprefix=/opt/perl, then the defaults for 5.005 are
.PP
.Vb 5
\&    Configure variable          Default value
\&        $archlib        /opt/perl/lib/5.005/archname
\&        $privlib        /opt/perl/lib/5.005
\&        $sitearch       /opt/perl/lib/site_perl/5.005/archname
\&        $sitelib        /opt/perl/lib/site_perl/5.005
.Ve
.Vb 2
\&        $man1dir        /opt/perl/man/man1
\&        $man3dir        /opt/perl/man/man3
.Ve
The perl executable will search the libraries in the order given
above.
.PP
The directories under site_perl are empty, but are intended to be used
for installing local or site-wide extensions.  Perl will automatically
look in these directories.
.PP
In order to support using things like #!/usr/local/bin/perl5.005 after
a later version is released, architecture-dependent libraries are
stored in a version-specific directory, such as
/usr/local/lib/perl5/archname/5.005/.
.PP
Further details about the installation directories, maintenance and
development subversions, and about supporting multiple versions are
discussed in the section on \fICoexistence with earlier versions of perl5\fR below.
.PP
Again, these are just the defaults, and can be changed as you run
Configure.
.Sh "Changing the installation directory"
Configure distinguishes between the directory in which perl (and its
associated files) should be installed and the directory in which it
will eventually reside.  For most sites, these two are the same; for
sites that use \s-1AFS\s0, this distinction is handled automatically.
However, sites that use software such as depot to manage software
packages may also wish to install perl into a different directory and
use that management software to move perl to its final destination.
This section describes how to do this.  Someday, Configure may support
an option \-Dinstallprefix=/foo to simplify this.
.PP
Suppose you want to install perl under the /tmp/perl5 directory.  You
can edit config.sh and change all the install* variables to point to
/tmp/perl5 instead of /usr/local/wherever.  Or, you can automate this
process by placing the following lines in a file config.over before you
run Configure (replace /tmp/perl5 by a directory of your choice):
.PP
.Vb 11
\&    installprefix=/tmp/perl5
\&    test -d $installprefix || mkdir $installprefix
\&    test -d $installprefix/bin || mkdir $installprefix/bin
\&    installarchlib=`echo $installarchlib | sed "s!$prefix!$installprefix!"`
\&    installbin=`echo $installbin | sed "s!$prefix!$installprefix!"`
\&    installman1dir=`echo $installman1dir | sed "s!$prefix!$installprefix!"`
\&    installman3dir=`echo $installman3dir | sed "s!$prefix!$installprefix!"`
\&    installprivlib=`echo $installprivlib | sed "s!$prefix!$installprefix!"`
\&    installscript=`echo $installscript | sed "s!$prefix!$installprefix!"`
\&    installsitelib=`echo $installsitelib | sed "s!$prefix!$installprefix!"`
\&    installsitearch=`echo $installsitearch | sed "s!$prefix!$installprefix!"`
.Ve
Then, you can Configure and install in the usual way:
.PP
.Vb 4
\&    sh Configure -des
\&    make
\&    make test
\&    make install
.Ve
Beware, though, that if you go to try to install new add-on
extensions, they too will get installed in under \*(L'/tmp/perl5\*(R' if you
follow this example.  The next section shows one way of dealing with
that problem.
.Sh "Creating an installable tar archive"
If you need to install perl on many identical systems, it is
convenient to compile it once and create an archive that can be
installed on multiple systems.  Here's one way to do that:
.PP
.Vb 16
\&    # Set up config.over to install perl into a different directory,
\&    # e.g. /tmp/perl5 (see previous part).
\&    sh Configure -des
\&    make
\&    make test
\&    make install
\&    cd /tmp/perl5
\&    # Edit $archlib/Config.pm to change all the
\&    # install* variables back to reflect where everything will
\&    # really be installed.
\&    # Edit any of the scripts in $scriptdir to have the correct
\&    # #!/wherever/perl line.
\&    tar cvf ../perl5-archive.tar .
\&    # Then, on each machine where you want to install perl,
\&    cd /usr/local  # Or wherever you specified as $prefix
\&    tar xvf perl5-archive.tar
.Ve
.Sh "Site-wide Policy settings"
After Configure runs, it stores a number of common site-wide \*(L"policy\*(R"
answers (such as installation directories and the local perl contact
person) in the Policy.sh file.  If you want to build perl on another
system using the same policy defaults, simply copy the Policy.sh file
to the new system and Configure will use it along with the appropriate
hint file for your system.
.PP
Alternatively, if you wish to change some or all of those policy
answers, you should
.PP
.Vb 1
\&        rm -f Policy.sh
.Ve
to ensure that Configure doesn't re-use them.
.PP
Further information is in the Policy_sh.\s-1SH\s0 file itself.
.Sh "Configure-time Options"
There are several different ways to Configure and build perl for your
system.  For most users, the defaults are sensible and will work.
Some users, however, may wish to further customize perl.  Here are
some of the main things you can change.
.Sh "Threads"
On some platforms, perl5.005 can be compiled to use threads.  To
enable this, read the file \s-1README\s0.threads, and then try
.PP
.Vb 1
\&        sh Configure -Dusethreads
.Ve
Currently, you need to specify \-Dusethreads on the Configure command
line so that the hint files can make appropriate adjustments.
.PP
The default is to compile without thread support.
.Sh "Selecting File \s-1IO\s0 mechanisms"
Previous versions of perl used the standard \s-1IO\s0 mechanisms as defined in
stdio.h.  Versions 5.003_02 and later of perl allow alternate \s-1IO\s0
mechanisms via a \*(L"PerlIO\*(R" abstraction, but the stdio mechanism is still
the default and is the only supported mechanism.
.PP
This PerlIO abstraction can be enabled either on the Configure command
line with
.PP
.Vb 1
\&        sh Configure -Duseperlio
.Ve
or interactively at the appropriate Configure prompt.
.PP
If you choose to use the PerlIO abstraction layer, there are two
(experimental) possibilities for the underlying \s-1IO\s0 calls.  These have been
tested to some extent on some platforms, but are not guaranteed to work
everywhere.
.Ip "1." 4
\s-1AT\s0&T's \*(L"sfio\*(R".  This has superior performance to stdio.h in many
cases, and is extensible by the use of \*(L"discipline\*(R" modules.  Sfio
currently only builds on a subset of the \s-1UNIX\s0 platforms perl supports.
Because the data structures are completely different from stdio, perl
extension modules or external libraries may not work.  This
configuration exists to allow these issues to be worked on.
.Sp
This option requires the \*(L'sfio\*(R' package to have been built and installed.
A (fairly old) version of sfio is in \s-1CPAN\s0.
.Sp
You select this option by
.Sp
.Vb 1
\&        sh Configure -Duseperlio -Dusesfio
.Ve
If you have already selected \-Duseperlio, and if Configure detects
that you have sfio, then sfio will be the default suggested by
Configure.
.Sp
Note:  On some systems, sfio's iffe configuration script fails
to detect that you have an atexit function (or equivalent).
Apparently, this is a problem at least for some versions of Linux
and SunOS 4.
.Sp
You can test if you have this problem by trying the following shell
script.  (You may have to add some extra cflags and libraries.  A
portable version of this may eventually make its way into Configure.)
.Sp
.Vb 12
\&    #!/bin/sh
\&    cat > try.c <<'EOCP'
\&    #include <stdio.h>
\&    main() { printf("42\en"); }
\&    EOCP
\&    cc -o try try.c -lsfio
\&    val=`./try`
\&    if test X$val = X42; then
\&        echo "Your sfio looks ok"
\&    else
\&        echo "Your sfio has the exit problem."
\&    fi
.Ve
If you have this problem, the fix is to go back to your sfio sources
and correct iffe's guess about atexit.
.Sp
There also might be a more recent release of Sfio that fixes your
problem.
.Ip "2." 4
Normal stdio \s-1IO\s0, but with all \s-1IO\s0 going through calls to the PerlIO
abstraction layer.  This configuration can be used to check that perl and
extension modules have been correctly converted to use the PerlIO
abstraction.
.Sp
This configuration should work on all platforms (but might not).
.Sp
You select this option via:
.Sp
.Vb 1
\&        sh Configure -Duseperlio -Uusesfio
.Ve
If you have already selected \-Duseperlio, and if Configure does not
detect sfio, then this will be the default suggested by Configure.
.Sh "Building a shared libperl.so Perl library"
Currently, for most systems, the main perl executable is built by
linking the \*(L"perl library\*(R" libperl.a with perlmain.o, your static
extensions (usually just DynaLoader.a) and various extra libraries,
such as \-lm.
.PP
On some systems that support dynamic loading, it may be possible to
replace libperl.a with a shared libperl.so.  If you anticipate building
several different perl binaries (e.g. by embedding libperl into
different programs, or by using the optional compiler extension), then
you might wish to build a shared libperl.so so that all your binaries
can share the same library.
.PP
The disadvantages are that there may be a significant performance
penalty associated with the shared libperl.so, and that the overall
mechanism is still rather fragile with respect to different versions
and upgrades.
.PP
In terms of performance, on my test system (Solaris 2.5_x86) the perl
test suite took roughly 15% longer to run with the shared libperl.so.
Your system and typical applications may well give quite different
results.
.PP
The default name for the shared library is typically something like
libperl.so.3.2 (for Perl 5.003_02) or libperl.so.302 or simply
libperl.so.  Configure tries to guess a sensible naming convention
based on your C library name.  Since the library gets installed in a
version-specific architecture-dependent directory, the exact name
isn't very important anyway, as long as your linker is happy.
.PP
For some systems (mostly \s-1SVR4\s0), building a shared libperl is required
for dynamic loading to work, and hence is already the default.
.PP
You can elect to build a shared libperl by
.PP
.Vb 1
\&        sh Configure -Duseshrplib
.Ve
To actually build perl, you must add the current working directory to your
\s-1LD_LIBRARY_PATH\s0 environment variable before running make.  You can do
this with
.PP
.Vb 1
\&   LD_LIBRARY_PATH=`pwd`:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
.Ve
for Bourne-style shells, or
.PP
.Vb 1
\&   setenv LD_LIBRARY_PATH `pwd`
.Ve
for Csh-style shells.  You *\s-1MUST\s0* do this before running make.
Folks running NeXT \s-1OPENSTEP\s0 must substitute \s-1DYLD_LIBRARY_PATH\s0 for
\s-1LD_LIBRARY_PATH\s0 above.
.PP
There is also an potential problem with the shared perl library if you
want to have more than one \*(L"flavor\*(R" of the same version of perl (e.g.
with and without \-\s-1DDEBUGGING\s0).  For example, suppose you build and
install a standard Perl 5.004 with a shared library.  Then, suppose you
try to build Perl 5.004 with \-\s-1DDEBUGGING\s0 enabled, but everything else
the same, including all the installation directories.  How can you
ensure that your newly built perl will link with your newly built
libperl.so.4 rather with the installed libperl.so.4?  The answer is
that you might not be able to.  The installation directory is encoded
in the perl binary with the \s-1LD_RUN_PATH\s0 environment variable (or
equivalent ld command-line option).  On Solaris, you can override that
with \s-1LD_LIBRARY_PATH\s0; on Linux you can't.  On Digital Unix, you can
override \s-1LD_LIBRARY_PATH\s0 by setting the _RLD_ROOT environment variable
to point to the perl build directory.
.PP
The only reliable answer is that you should specify a different
directory for the architecture-dependent library for your \-\s-1DDEBUGGING\s0
version of perl.  You can do this by changing all the *archlib*
variables in config.sh, namely archlib, archlib_exp, and
installarchlib, to point to your new architecture-dependent library.
.Sh "Malloc Issues"
Perl relies heavily on \fImalloc\fR\|(3) to grow data structures as needed, so
perl's performance can be noticeably affected by the performance of
the malloc function on your system.
.PP
The perl source is shipped with a version of malloc that is very fast but
somewhat wasteful of space.  On the other hand, your system's malloc
function may be a bit slower but also a bit more frugal.  However,
as of 5.004_68, perl's malloc has been optimized for the typical
requests from perl, so there's a chance that it may be both faster and
use less memory.
.PP
For many uses, speed is probably the most important consideration, so
the default behavior (for most systems) is to use the malloc supplied
with perl.  However, if you will be running very large applications
(e.g. Tk or \s-1PDL\s0) or if your system already has an excellent malloc, or
if you are experiencing difficulties with extensions that use
third-party libraries that call malloc, then you might wish to use
your system's malloc.  (Or, you might wish to explore the malloc flags
discussed below.)
.PP
To build without perl's malloc, you can use the Configure command
.PP
.Vb 1
\&        sh Configure -Uusemymalloc
.Ve
or you can answer \*(L'n\*(R' at the appropriate interactive Configure prompt.
.Sh "Malloc Performance Flags"
If you are using Perl's malloc, you may add one or more of the following
items to your ccflags config.sh variable to change its behavior.  You can
find out more about these and other flags by reading the commentary near
the top of the malloc.c source.  The defaults should be fine for
nearly everyone.
.Ip "-\s-1DNO_FANCY_MALLOC\s0" 4
Undefined by default.  Defining it returns malloc to the version used
in Perl 5.004.
.Ip "-\s-1DPLAIN_MALLOC\s0" 4
Undefined by default.  Defining it in addition to \s-1NO_FANCY_MALLOC\s0 returns
malloc to the version used in Perl version 5.000.
.Sh "Building a debugging perl"
You can run perl scripts under the perl debugger at any time with
\fBperl \-d your_script\fR.  If, however, you want to debug perl itself,
you probably want to do
.PP
.Vb 1
\&        sh Configure -Doptimize='-g'
.Ve
This will do two independent things:  First, it will force compilation
to use cc \-g so that you can use your system's debugger on the
executable.  (Note:  Your system may actually require something like
cc \-g2.  Check your man pages for \fIcc\fR\|(1) and also any hint file for your
system.)  Second, it will add \-\s-1DDEBUGGING\s0 to your ccflags variable in
config.sh so that you can use \fBperl \-D\fR to access perl's internal
state.  (Note: Configure will only add \-\s-1DDEBUGGING\s0 by
default if you are not reusing your old config.sh.  If you want to
reuse your old config.sh, then you can just edit it and change the
optimize and ccflags variables by hand and then propagate your changes
as shown in the section on \fIPropagating your changes to config.sh\fR below.)
.PP
You can actually specify \-g and \-\s-1DDEBUGGING\s0 independently, but usually
it's convenient to have both.
.PP
If you are using a shared libperl, see the warnings about multiple
versions of perl under the section on \fIBuilding a shared libperl.so Perl library\fR.
.Sh "Other Compiler Flags"
For most users, all of the Configure defaults are fine.  However,
you can change a number of factors in the way perl is built
by adding appropriate \-D directives to your ccflags variable in
config.sh.
.PP
For example, you can replace the \fIrand()\fR and \fIsrand()\fR functions in the
perl source by any other random number generator by a trick such as the
following (this should all be on one line):
.PP
.Vb 2
\&        sh Configure -Dccflags='-Dmy_rand=random -Dmy_srand=srandom' \e
\&                -Drandbits=31
.Ve
or you can use the drand48 family of functions with
.PP
.Vb 2
\&        sh Configure -Dccflags='-Dmy_rand=lrand48 -Dmy_srand=srand48' \e
\&                -Drandbits=31
.Ve
or by adding the \-D flags to your ccflags at the appropriate Configure
prompt.  (Read pp.c to see how this works.)
.PP
You should also run Configure interactively to verify that a hint file
doesn't inadvertently override your ccflags setting.  (Hints files
shouldn't do that, but some might.)
.Sh "What if it doesn't work?"
.Ip "Running Configure Interactively" 4
If Configure runs into trouble, remember that you can always run
Configure interactively so that you can check (and correct) its
guesses.
.Sp
All the installation questions have been moved to the top, so you don't
have to wait for them.  Once you've handled them (and your C compiler and
flags) you can type  &\-d  at the next Configure prompt and Configure
will use the defaults from then on.
.Sp
If you find yourself trying obscure command line incantations and
config.over tricks, I recommend you run Configure interactively
instead.  You'll probably save yourself time in the long run.
.Ip "Hint files" 4
The perl distribution includes a number of system-specific hints files
in the hints/ directory.  If one of them matches your system, Configure
will offer to use that hint file.
.Sp
Several of the hint files contain additional important information.
If you have any problems, it is a good idea to read the relevant hint file
for further information.  See hints/solaris_2.sh for an extensive example.
More information about writing good hints is in the hints/\s-1README\s0.hints
file.
.Ip "*** \s-1WHOA\s0 \s-1THERE\s0!!! ***" 4
Occasionally, Configure makes a wrong guess.  For example, on SunOS
4.1.3, Configure incorrectly concludes that tzname[] is in the
standard C library.  The hint file is set up to correct for this.  You
will see a message:
.Sp
.Vb 3
\&    *** WHOA THERE!!! ***
\&        The recommended value for $d_tzname on this machine was "undef"!
\&        Keep the recommended value? [y]
.Ve
You should always keep the recommended value unless, after reading the
relevant section of the hint file, you are sure you want to try
overriding it.
.Sp
If you are re-using an old config.sh, the word \*(L"previous\*(R" will be
used instead of \*(L"recommended\*(R".  Again, you will almost always want
to keep the previous value, unless you have changed something on your
system.
.Sp
For example, suppose you have added libgdbm.a to your system
and you decide to reconfigure perl to use GDBM_File.  When you run
Configure again, you will need to add \-lgdbm to the list of libraries.
Now, Configure will find your gdbm include file and library and will
issue a message:
.Sp
.Vb 3
\&    *** WHOA THERE!!! ***
\&        The previous value for $i_gdbm on this machine was "undef"!
\&        Keep the previous value? [y]
.Ve
In this case, you do not want to keep the previous value, so you
should answer \*(L'n\*(R'.  (You'll also have to manually add GDBM_File to
the list of dynamic extensions to build.)
.Ip "Changing Compilers" 4
If you change compilers or make other significant changes, you should
probably not re-use your old config.sh.  Simply remove it or
rename it, e.g. mv config.sh config.sh.old.  Then rerun Configure
with the options you want to use.
.Sp
This is a common source of problems.  If you change from cc to
gcc, you should almost always remove your old config.sh.
.Ip "Propagating your changes to config.sh" 4
If you make any changes to config.sh, you should propagate
them to all the .\s-1SH\s0 files by running
.Sp
.Vb 1
\&        sh Configure -S
.Ve
You will then have to rebuild by running
.Sp
.Vb 2
\&        make depend
\&        make
.Ve
.Ip "config.over" 4
You can also supply a shell script config.over to over-ride Configure's
guesses.  It will get loaded up at the very end, just before config.sh
is created.  You have to be careful with this, however, as Configure
does no checking that your changes make sense.  See the section on
the section on \fIChanging the installation directory\fR for an example.
.Ip "config.h" 4
Many of the system dependencies are contained in config.h.
Configure builds config.h by running the config_h.\s-1SH\s0 script.
The values for the variables are taken from config.sh.
.Sp
If there are any problems, you can edit config.h directly.  Beware,
though, that the next time you run Configure, your changes will be
lost.
.Ip "cflags" 4
If you have any additional changes to make to the C compiler command
line, they can be made in cflags.\s-1SH\s0.  For instance, to turn off the
optimizer on toke.c, find the line in the switch structure for
toke.c and put the command optimize=\*(R'\-g\*(R' before the ;; .  You
can also edit cflags directly, but beware that your changes will be
lost the next time you run Configure.
.Sp
To explore various ways of changing ccflags from within a hint file,
see the file hints/\s-1README\s0.hints.
.Sp
To change the C flags for all the files, edit config.sh and change either
\f(CW$ccflags\fR or \f(CW$optimize\fR, and then re-run
.Sp
.Vb 2
\&        sh Configure -S
\&        make depend
.Ve
.Ip "No sh" 4
If you don't have sh, you'll have to copy the sample file Porting/config_H
to config.h and edit the config.h to reflect your system's peculiarities.
You'll probably also have to extensively modify the extension building
mechanism.
.Ip "Porting information" 4
Specific information for the \s-1OS/2\s0, Plan9, \s-1VMS\s0 and Win32 ports is in the
corresponding \s-1README\s0 files and subdirectories.  Additional information,
including a glossary of all those config.sh variables, is in the Porting
subdirectory.
.Sp
Ports for other systems may also be available.  You should check out
http://www.perl.com/\s-1CPAN/\s0ports for current information on ports to
various other operating systems.
.SH "make depend"
This will look for all the includes.  The output is stored in makefile.
The only difference between Makefile and makefile is the dependencies at
the bottom of makefile.  If you have to make any changes, you should edit
makefile, not Makefile since the Unix make command reads makefile first.
(On non-Unix systems, the output may be stored in a different file.
Check the value of \f(CW$firstmakefile\fR in your config.sh if in doubt.)
.PP
Configure will offer to do this step for you, so it isn't listed
explicitly above.
.SH "make"
This will attempt to make perl in the current directory.
.PP
If you can't compile successfully, try some of the following ideas.
If none of them help, and careful reading of the error message and
the relevant manual pages on your system doesn't help, you can
send a message to either the comp.lang.perl.misc newsgroup or to
perlbug@perl.com with an accurate description of your problem.
See the section on \fIReporting Problems\fR below.
.Ip "hints" 4
If you used a hint file, try reading the comments in the hint file
for further tips and information.
.Ip "extensions" 4
If you can successfully build miniperl, but the process crashes
during the building of extensions, you should run
.Sp
.Vb 1
\&        make minitest
.Ve
to test your version of miniperl.
.Ip "locale" 4
If you have any locale-related environment variables set, try unsetting
them.  I have some reports that some versions of \s-1IRIX\s0 hang while
running \fB./miniperl configpm\fR with locales other than the C locale.
See the discussion under the section on \fImake test\fR below about locales and the
whole the section on \fILocale problems\fR section in the file pod/perllocale.pod.
The latter is especially useful if you see something like this
.Sp
.Vb 6
\&        perl: warning: Setting locale failed.
\&        perl: warning: Please check that your locale settings:
\&                LC_ALL = "En_US",
\&                LANG = (unset)
\&            are supported and installed on your system.
\&        perl: warning: Falling back to the standard locale ("C").
.Ve
at Perl startup.
.Ip "malloc duplicates" 4
If you get duplicates upon linking for malloc et al, add \-\s-1DEMBEDMYMALLOC\s0
to your ccflags variable in config.sh.
.Ip "varargs" 4
If you get varargs problems with gcc, be sure that gcc is installed
correctly and that you are not passing \-I/usr/include to gcc.  When using
gcc, you should probably have i_stdarg='define\*(R' and i_varargs='undef\*(R'
in config.sh.  The problem is usually solved by running fixincludes
correctly.  If you do change config.sh, don't forget to propagate
your changes (see the section on \fIPropagating your changes to config.sh\fR below).
See also the the section on \fIvsprintf\fR item below.
.Ip "util.c" 4
If you get error messages such as the following (the exact line
numbers and function name may vary in different versions of perl):
.Sp
.Vb 3
\&    util.c: In function `Perl_form':
\&    util.c:1107: number of arguments doesn't match prototype
\&    proto.h:125: prototype declaration
.Ve
it might well be a symptom of the gcc \*(L"varargs problem\*(R".  See the
previous the section on \fIvarargs\fR item.
.Ip "Solaris and SunOS dynamic loading" 4
If you have problems with dynamic loading using gcc on SunOS or
Solaris, and you are using \s-1GNU\s0 as and \s-1GNU\s0 ld, you may need to add
\-B/bin/ (for SunOS) or \-B/usr/ccs/bin/ (for Solaris) to your
\f(CW$ccflags\fR, \f(CW$ldflags\fR, and \f(CW$lddlflags\fR so that the system's versions of as
and ld are used.  Note that the trailing \*(L'/\*(R' is required.
Alternatively, you can use the \s-1GCC_EXEC_PREFIX\s0
environment variable to ensure that Sun's as and ld are used.  Consult
your gcc documentation for further information on the \-B option and
the \s-1GCC_EXEC_PREFIX\s0 variable.
.Sp
One convenient way to ensure you are not using \s-1GNU\s0 as and ld is to
invoke Configure with
.Sp
.Vb 1
\&    sh Configure -Dcc='gcc -B/usr/ccs/bin/'
.Ve
for Solaris systems.  For a SunOS system, you must use \-B/bin/
instead.
.Sp
Alternatively, recent versions of \s-1GNU\s0 ld reportedly work if you
include \f(CW-Wl,-export-dynamic\fR in the ccdlflags variable in
config.sh.
.Ip "ld.so.1: ./perl: fatal: relocation error:" 4
If you get this message on SunOS or Solaris, and you're using gcc,
it's probably the \s-1GNU\s0 as or \s-1GNU\s0 ld problem in the previous item
the section on \fISolaris and SunOS dynamic loading\fR.
.Ip "\s-1LD_LIBRARY_PATH\s0" 4
If you run into dynamic loading problems, check your setting of
the \s-1LD_LIBRARY_PATH\s0 environment variable.  If you're creating a static
Perl library (libperl.a rather than libperl.so) it should build
fine with \s-1LD_LIBRARY_PATH\s0 unset, though that may depend on details
of your local set-up.
.Ip "dlopen: stub interception failed" 4
The primary cause of the \*(L'dlopen: stub interception failed\*(R' message is
that the \s-1LD_LIBRARY_PATH\s0 environment variable includes a directory
which is a symlink to /usr/lib (such as /lib).
.Sp
The reason this causes a problem is quite subtle.  The file libdl.so.1.0
actually *only* contains functions which generate \*(L'stub interception
failed\*(R' errors!  The runtime linker intercepts links to
\*(L"/usr/lib/libdl.so.1.0\*(R" and links in internal implementation of those
functions instead.  [Thanks to Tim Bunce for this explanation.]
.Ip "nm extraction" 4
If Configure seems to be having trouble finding library functions,
try not using nm extraction.  You can do this from the command line
with
.Sp
.Vb 1
\&        sh Configure -Uusenm
.Ve
or by answering the nm extraction question interactively.
If you have previously run Configure, you should not reuse your old
config.sh.
.Ip "umask not found" 4
If the build processes encounters errors relating to \fIumask()\fR, the problem
is probably that Configure couldn't find your \fIumask()\fR system call.
Check your config.sh.  You should have d_umask='define\*(R'.  If you don't,
this is probably the the section on \fInm extraction\fR problem discussed above.  Also,
try reading the hints file for your system for further information.
.Ip "vsprintf" 4
If you run into problems with vsprintf in compiling util.c, the
problem is probably that Configure failed to detect your system's
version of \fIvsprintf()\fR.  Check whether your system has \fIvprintf()\fR.
(Virtually all modern Unix systems do.)  Then, check the variable
d_vprintf in config.sh.  If your system has vprintf, it should be:
.Sp
.Vb 1
\&        d_vprintf='define'
.Ve
If Configure guessed wrong, it is likely that Configure guessed wrong
on a number of other common functions too.  This is probably
the the section on \fInm extraction\fR problem discussed above.
.Ip "do_aspawn" 4
If you run into problems relating to do_aspawn or do_spawn, the
problem is probably that Configure failed to detect your system's
\fIfork()\fR function.  Follow the procedure in the previous item
on the section on \fInm extraction\fR.
.Ip "_\|_inet_* errors" 4
If you receive unresolved symbol errors during Perl build and/or test
referring to _\|_inet_* symbols, check to see whether \s-1BIND\s0 8.1 is
installed.  It installs a /usr/local/include/arpa/inet.h that refers to
these symbols.  Versions of \s-1BIND\s0 later than 8.1 do not install inet.h
in that location and avoid the errors.  You should probably update to a
newer version of \s-1BIND\s0.  If you can't, you can either link with the
updated resolver library provided with \s-1BIND\s0 8.1 or rename
/usr/local/bin/arpa/inet.h during the Perl build and test process to
avoid the problem.
.Ip "Optimizer" 4
If you can't compile successfully, try turning off your compiler's
optimizer.  Edit config.sh and change the line
.Sp
.Vb 1
\&        optimize='-O'
.Ve
to
.Sp
.Vb 1
\&        optimize=' '
.Ve
then propagate your changes with \fBsh Configure \-S\fR and rebuild
with \fBmake depend; make\fR.
.Ip "\s-1CRIPPLED_CC\s0" 4
If you still can't compile successfully, try adding a \-\s-1DCRIPPLED_CC\s0
flag.  (Just because you get no errors doesn't mean it compiled right!)
This simplifies some complicated expressions for compilers that get
indigestion easily.
.Ip "Missing functions" 4
If you have missing routines, you probably need to add some library or
other, or you need to undefine some feature that Configure thought was
there but is defective or incomplete.  Look through config.h for
likely suspects.  If Configure guessed wrong on a number of functions,
you might have the the section on \fInm extraction\fR problem discussed above.
.Ip "toke.c" 4
Some compilers will not compile or optimize the larger files (such as
toke.c) without some extra switches to use larger jump offsets or
allocate larger internal tables.  You can customize the switches for
each file in cflags.  It's okay to insert rules for specific files into
makefile since a default rule only takes effect in the absence of a
specific rule.
.Ip "Missing dbmclose" 4
\s-1SCO\s0 prior to 3.2.4 may be missing \fIdbmclose()\fR.  An upgrade to 3.2.4
that includes libdbm.nfs (which includes \fIdbmclose()\fR) may be available.
.Ip "Note (probably harmless): No library found for \-lsomething" 4
If you see such a message during the building of an extension, but
the extension passes its tests anyway (see the section on \fImake test\fR below),
then don't worry about the warning message.  The extension
Makefile.\s-1PL\s0 goes looking for various libraries needed on various
systems; few systems will need all the possible libraries listed.
For example, a system may have \-lcposix or \-lposix, but it's
unlikely to have both, so most users will see warnings for the one
they don't have.  The phrase \*(L'probably harmless\*(R' is intended to
reassure you that nothing unusual is happening, and the build
process is continuing.
.Sp
On the other hand, if you are building GDBM_File and you get the
message
.Sp
.Vb 1
\&    Note (probably harmless): No library found for -lgdbm
.Ve
then it's likely you're going to run into trouble somewhere along
the line, since it's hard to see how you can use the GDBM_File
extension without the \-lgdbm library.
.Sp
It is true that, in principle, Configure could have figured all of
this out, but Configure and the extension building process are not
quite that tightly coordinated.
.Ip "sh: ar: not found" 4
This is a message from your shell telling you that the command \*(L'ar\*(R'
was not found.  You need to check your \s-1PATH\s0 environment variable to
make sure that it includes the directory with the \*(L'ar\*(R' command.  This
is a common problem on Solaris, where \*(L'ar\*(R' is in the /usr/ccs/bin
directory.
.Ip "db-recno failure on tests 51, 53 and 55" 4
Old versions of the \s-1DB\s0 library (including the \s-1DB\s0 library which comes
with FreeBSD 2.1) had broken handling of recno databases with modified
bval settings.  Upgrade your \s-1DB\s0 library or \s-1OS\s0.
.Ip "Bad arg length for semctl, is \s-1XX\s0, should be \s-1ZZZ\s0" 4
If you get this error message from the lib/ipc_sysv test, your System
V \s-1IPC\s0 may be broken.  The \s-1XX\s0 typically is 20, and that is what \s-1ZZZ\s0
also should be.  Consider upgrading your \s-1OS\s0, or reconfiguring your \s-1OS\s0
to include the System V semaphores.
.Ip "lib/ipc_sysv........semget: No space left on device" 4
Either your account or the whole system has run out of semaphores.  Or
both.  Either list the semaphores with \*(L"ipcs\*(R" and remove the unneeded
ones (which ones these are depends on your system and applications)
with \*(L"ipcrm \-s \s-1SEMAPHORE_ID_HERE\s0\*(R" or configure more semaphores to your
system.
.Ip "Miscellaneous" 4
Some additional things that have been reported for either perl4 or perl5:
.Sp
Genix may need to use libc rather than libc_s, or #undef \s-1VARARGS\s0.
.Sp
\s-1NCR\s0 Tower 32 (\s-1OS\s0 2.01.01) may need \-W2,\-Sl,2000 and #undef \s-1MKDIR\s0.
.Sp
\s-1UTS\s0 may need one or more of \-\s-1DCRIPPLED_CC\s0, \-K or \-g, and undef \s-1LSTAT\s0.
.Sp
FreeBSD can fail the lib/ipc_sysv.t test if SysV \s-1IPC\s0 has not been
configured to the kernel.  Perl tries to detect this, though, and
you will get a message telling what to do.
.Sp
If you get syntax errors on \*(L'(\*(R', try \-\s-1DCRIPPLED_CC\s0.
.Sp
Machines with half-implemented dbm routines will need to #undef I_ODBM
.SH "make test"
This will run the regression tests on the perl you just made (you
should run plain \*(L'make\*(R' before \*(L'make test\*(R' otherwise you won't have a
complete build).  If \*(L'make test\*(R' doesn't say \*(L"All tests successful\*(R"
then something went wrong.  See the file t/README in the t subdirectory.
.PP
Note that you can't run the tests in background if this disables
opening of /dev/tty. You can use \*(L'make test-notty\*(R' in that case but
a few tty tests will be skipped.
.Sh "What if make test doesn't work?"
If make test bombs out, just cd to the t directory and run ./\s-1TEST\s0
by hand to see if it makes any difference.  If individual tests
bomb, you can run them by hand, e.g.,
.PP
.Vb 1
\&        ./perl op/groups.t
.Ve
Another way to get more detailed information about failed tests and
individual subtests is to cd to the t directory and run
.PP
.Vb 1
\&        ./perl harness
.Ve
(this assumes that most basic tests succeed, since harness uses
complicated constructs).
.PP
You should also read the individual tests to see if there are any helpful
comments that apply to your system.
.Ip "locale" 4
Note:  One possible reason for errors is that some external programs
may be broken due to the combination of your environment and the way
\fBmake test\fR exercises them.  For example, this may happen if you have
one or more of these environment variables set:  \s-1LC_ALL\s0 \s-1LC_CTYPE\s0
\s-1LC_COLLATE\s0 \s-1LANG\s0.  In some versions of \s-1UNIX\s0, the non-English locales
are known to cause programs to exhibit mysterious errors.
.Sp
If you have any of the above environment variables set, please try
.Sp
.Vb 1
\&        setenv LC_ALL C
.Ve
(for C shell) or
.Sp
.Vb 1
\&        LC_ALL=C;export LC_ALL
.Ve
for Bourne or Korn shell) from the command line and then retry
make test.  If the tests then succeed, you may have a broken program that
is confusing the testing.  Please run the troublesome test by hand as
shown above and see whether you can locate the program.  Look for
things like:  exec, `backquoted command`, system, \fIopen\fR\|("|...") or
\fIopen\fR\|(\*(R"...|").  All these mean that Perl is trying to run some
external program.
.Ip "Out of memory" 4
On some systems, particularly those with smaller amounts of \s-1RAM\s0, some
of the tests in t/op/pat.t may fail with an \*(L"Out of memory\*(R" message.
Specifically, in perl5.004_64, tests 74 and 78 have been reported to
fail on some systems.  On my SparcStation \s-1IPC\s0 with 8 \s-1MB\s0 of \s-1RAM\s0, test 78
will fail if the system is running any other significant tasks at the
same time.
.Sp
Try stopping other jobs on the system and then running the test by itself:
.Sp
.Vb 1
\&        cd t; ./perl op/pat.t
.Ve
to see if you have any better luck.  If your perl still fails this
test, it does not necessarily mean you have a broken perl.  This test
tries to exercise the regular expression subsystem quite thoroughly,
and may well be far more demanding than your normal usage.
.SH "make install"
This will put perl into the public directory you specified to
Configure; by default this is /usr/local/bin.  It will also try
to put the man pages in a reasonable place.  It will not nroff the man
pages, however.  You may need to be root to run \fBmake install\fR.  If you
are not root, you must own the directories in question and you should
ignore any messages about chown not working.
.Sh "Installing perl under different names"
If you want to install perl under a name other than \*(L"perl\*(R" (for example,
when installing perl with special features enabled, such as debugging),
indicate the alternate name on the \*(L"make install\*(R" line, such as:
.PP
.Vb 1
\&    make install PERLNAME=myperl
.Ve
.Sh "Installed files"
If you want to see exactly what will happen without installing
anything, you can run
.PP
.Vb 2
\&        ./perl installperl -n
\&        ./perl installman -n
.Ve
make install will install the following:
.PP
.Vb 21
\&        perl,
\&            perl5.nnn   where nnn is the current release number.  This
\&                        will be a link to perl.
\&        suidperl,
\&            sperl5.nnn  If you requested setuid emulation.
\&        a2p             awk-to-perl translator
\&        cppstdin        This is used by perl -P, if your cc -E can't
\&                        read from stdin.
\&        c2ph, pstruct   Scripts for handling C structures in header files.
\&        s2p             sed-to-perl translator
\&        find2perl       find-to-perl translator
\&        h2ph            Extract constants and simple macros from C headers
\&        h2xs            Converts C .h header files to Perl extensions.
\&        perlbug         Tool to report bugs in Perl.
\&        perldoc         Tool to read perl's pod documentation.
\&        pl2pm           Convert Perl 4 .pl files to Perl 5 .pm modules
\&        pod2html,       Converters from perl's pod documentation format
\&        pod2latex,      to other useful formats.
\&        pod2man, and
\&        pod2text
\&        splain          Describe Perl warnings and errors
.Ve
.Vb 7
\&        library files   in $privlib and $archlib specified to
\&                        Configure, usually under /usr/local/lib/perl5/.
\&        man pages       in the location specified to Configure, usually
\&                        something like /usr/local/man/man1.
\&        module          in the location specified to Configure, usually
\&        man pages       under /usr/local/lib/perl5/man/man3.
\&        pod/*.pod       in $privlib/pod/.
.Ve
Installperl will also create the library directories \f(CW$siteperl\fR and
\f(CW$sitearch\fR listed in config.sh.  Usually, these are something like
.PP
.Vb 2
\&        /usr/local/lib/perl5/site_perl/5.005
\&        /usr/local/lib/perl5/site_perl/5.005/archname
.Ve
where archname is something like sun4-sunos.  These directories
will be used for installing extensions.
.PP
Perl's *.h header files and the libperl.a library are also installed
under \f(CW$archlib\fR so that any user may later build new extensions, run the
optional Perl compiler, or embed the perl interpreter into another
program even if the Perl source is no longer available.
.SH "Coexistence with earlier versions of perl5"
WARNING:  The upgrade from 5.004_0x to 5.005 is going to be a bit
tricky.  See the section on \fIUpgrading from 5.004 to 5.005\fR  below.
.PP
In general, you can usually safely upgrade from one version of Perl (e.g.
5.004_04) to another similar version (e.g. 5.004_05) without re-compiling
all of your add-on extensions.  You can also safely leave the old version
around in case the new version causes you problems for some reason.
For example, if you want to be sure that your script continues to run
with 5.004_04, simply replace the \*(L'#!/usr/local/bin/perl\*(R' line at the
top of the script with the particular version you want to run, e.g.
#!/usr/local/bin/perl5.00404.
.PP
Most extensions will probably not need to be recompiled to use
with a newer version of perl.   Here is how it is supposed to work.
(These examples assume you accept all the Configure defaults.)
.PP
The directories searched by version 5.005 will be
.PP
.Vb 5
\&    Configure variable          Default value
\&        $archlib        /usr/local/lib/perl5/5.005/archname
\&        $privlib        /usr/local/lib/perl5/5.005
\&        $sitearch       /usr/local/lib/perl5/site_perl/5.005/archname
\&        $sitelib        /usr/local/lib/perl5/site_perl/5.005
.Ve
while the directories searched by version 5.005_01 will be
.PP
.Vb 4
\&        $archlib        /usr/local/lib/perl5/5.00501/archname
\&        $privlib        /usr/local/lib/perl5/5.00501
\&        $sitearch       /usr/local/lib/perl5/site_perl/5.005/archname
\&        $sitelib        /usr/local/lib/perl5/site_perl/5.005
.Ve
When you install an add-on extension, it gets installed into \f(CW$sitelib\fR (or
\f(CW$sitearch\fR if it is architecture-specific).  This directory deliberately
does NOT include the sub-version number (01) so that both 5.005 and
5.005_01 can use the extension.  Only when a perl version changes to
break backwards compatibility will the default suggestions for the
\f(CW$sitearch\fR and \f(CW$sitelib\fR version numbers be increased.
.PP
However, if you do run into problems, and you want to continue to use the
old version of perl along with your extension, move those extension files
to the appropriate version directory, such as \f(CW$privlib\fR (or \f(CW$archlib\fR).
(The extension's .packlist file lists the files installed with that
extension.  For the Tk extension, for example, the list of files installed
is in \f(CW$sitearch\fR/auto/Tk/.packlist.)  Then use your newer version of perl
to rebuild and re-install the extension into \f(CW$sitelib\fR.  This way, Perl
5.005 will find your files in the 5.005 directory, and newer versions
of perl will find your newer extension in the \f(CW$sitelib\fR directory.
(This is also why perl searches the site-specific libraries last.)
.PP
Alternatively, if you are willing to reinstall all your extensions
every time you upgrade perl, then you can include the subversion
number in \f(CW$sitearch\fR and \f(CW$sitelib\fR when you run Configure.
.Sh "Maintaining completely separate versions"
Many users prefer to keep all versions of perl in completely
separate directories.  One convenient way to do this is by
using a separate prefix for each version, such as
.PP
.Vb 1
\&        sh Configure -Dprefix=/opt/perl5.004
.Ve
and adding /opt/perl5.004/bin to the shell \s-1PATH\s0 variable.  Such users
may also wish to add a symbolic link /usr/local/bin/perl so that
scripts can still start with #!/usr/local/bin/perl.
.PP
Others might share a common directory for maintenance sub-versions
(e.g. 5.004 for all 5.004_0x versions), but change directory with
each major version.
.PP
If you are installing a development subversion, you probably ought to
seriously consider using a separate directory, since development
subversions may not have all the compatibility wrinkles ironed out
yet.
.Sh "Upgrading from 5.004 to 5.005"
Extensions built and installed with versions of perl prior to 5.004_50
will need to be recompiled to be used with 5.004_50 and later.  You will,
however, be able to continue using 5.004 even after you install 5.005.
The 5.004 binary will still be able to find the extensions built under
5.004; the 5.005 binary will look in the new \f(CW$sitearch\fR and \f(CW$sitelib\fR
directories, and will not find them.
.SH "Coexistence with perl4"
You can safely install perl5 even if you want to keep perl4 around.
.PP
By default, the perl5 libraries go into /usr/local/lib/perl5/, so
they don't override the perl4 libraries in /usr/local/lib/perl/.
.PP
In your /usr/local/bin directory, you should have a binary named
perl4.036.  That will not be touched by the perl5 installation
process.  Most perl4 scripts should run just fine under perl5.
However, if you have any scripts that require perl4, you can replace
the #! line at the top of them by #!/usr/local/bin/perl4.036
(or whatever the appropriate pathname is).  See pod/perltrap.pod
for possible problems running perl4 scripts under perl5.
.SH "cd /usr/include; h2ph *.h sys/*.h"
Some perl scripts need to be able to obtain information from
the system header files.  This command will convert the most commonly used
header files in /usr/include into files that can be easily interpreted
by perl.  These files will be placed in the architecture-dependent library
($archlib) directory you specified to Configure.
.PP
Note:  Due to differences in the C and perl languages, the
conversion of the header files is not perfect.  You will probably have
to hand-edit some of the converted files to get them to parse
correctly.  For example, h2ph breaks spectacularly on type casting and
certain structures.
.SH "installhtml --help"
Some sites may wish to make perl documentation available in HTML
format.  The installhtml utility can be used to convert pod
documentation into linked HTML files and install them.
.PP
The following command-line is an example of one used to convert
perl documentation:
.PP
.Vb 10
\&  ./installhtml                   \e
\&      --podroot=.                 \e
\&      --podpath=lib:ext:pod:vms   \e
\&      --recurse                   \e
\&      --htmldir=/perl/nmanual     \e
\&      --htmlroot=/perl/nmanual    \e
\&      --splithead=pod/perlipc     \e
\&      --splititem=pod/perlfunc    \e
\&      --libpods=perlfunc:perlguts:perlvar:perlrun:perlop \e
\&      --verbose
.Ve
See the documentation in installhtml for more details.  It can take
many minutes to execute a large installation and you should expect to
see warnings like \*(L"no title\*(R", \*(L"unexpected directive\*(R" and \*(L"cannot
resolve\*(R" as the files are processed. We are aware of these problems
(and would welcome patches for them).
.PP
You may find it helpful to run installhtml twice. That should reduce
the number of \*(L"cannot resolve\*(R" warnings.
.SH "cd pod && make tex && (process the latex files)"
Some sites may also wish to make the documentation in the pod/ directory
available in TeX format.  Type
.PP
.Vb 1
\&        (cd pod && make tex && <process the latex files>)
.Ve
.SH "Reporting Problems"
If you have difficulty building perl, and none of the advice in this file
helps, and careful reading of the error message and the relevant manual
pages on your system doesn't help either, then you should send a message
to either the comp.lang.perl.misc newsgroup or to perlbug@perl.com with
an accurate description of your problem.
.PP
Please include the output of the ./myconfig shell script that comes with
the distribution.  Alternatively, you can use the perlbug program that
comes with the perl distribution, but you need to have perl compiled
before you can use it.  (If you have not installed it yet, you need to
run \f(CW./perl -Ilib utils/perlbug\fR instead of a plain \f(CWperlbug\fR.)
.PP
You might also find helpful information in the Porting directory of the
perl distribution.
.SH "DOCUMENTATION"
Read the manual entries before running perl.  The main documentation
is in the pod/ subdirectory and should have been installed during the
build process.  Type \fBman perl\fR to get started.  Alternatively, you
can type \fBperldoc perl\fR to use the supplied perldoc script.  This is
sometimes useful for finding things in the library modules.
.PP
Under UNIX, you can produce a documentation book in postscript form,
along with its table of contents, by going to the pod/ subdirectory and
running (either):
.PP
.Vb 2
\&        ./roffitall -groff              # If you have GNU groff installed
\&        ./roffitall -psroff             # If you have psroff
.Ve
This will leave you with two postscript files ready to be printed.
(You may need to fix the roffitall command to use your local troff
set-up.)
.PP
Note that you must have performed the installation already before running
the above, since the script collects the installed files to generate
the documentation.
.SH "AUTHOR"
Original author:  Andy Dougherty doughera@lafayette.edu , borrowing very
heavily from the original README by Larry Wall, with lots of helpful
feedback and additions from the perl5-porters@perl.org folks.
.PP
If you have problems, corrections, or questions, please see
the section on \fIReporting Problems\fR above.
.SH "REDISTRIBUTION"
This document is part of the Perl package and may be distributed under
the same terms as perl itself.
.PP
If you are distributing a modified version of perl (perhaps as part of
a larger package) please do modify these installation instructions and
the contact information to match your distribution.
.SH "LAST MODIFIED"
$Id: INSTALL,v 1.42 1998/07/15 18:04:44 doughera Released $

.rn }` ''
.IX Title "PERLINSTALL 1"
.IX Name "Install - Build and Installation guide for perl5."

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Header "WARNING:  This version is not binary compatible with Perl 5.004."

.IX Header "Space Requirements"

.IX Header "Start with a Fresh Distribution"

.IX Header "Run Configure"

.IX Subsection "\s-1GNU\s0\-style configure"

.IX Subsection "Extensions"

.IX Subsection "Including locally-installed libraries"

.IX Subsection "Examples"

.IX Item "gdbm in /usr/local"

.IX Item "gdbm in /usr/you"

.IX Subsection "Installation Directories"

.IX Subsection "Changing the installation directory"

.IX Subsection "Creating an installable tar archive"

.IX Subsection "Site-wide Policy settings"

.IX Subsection "Configure-time Options"

.IX Subsection "Threads"

.IX Subsection "Selecting File \s-1IO\s0 mechanisms"

.IX Item "1."

.IX Item "2."

.IX Subsection "Building a shared libperl.so Perl library"

.IX Subsection "Malloc Issues"

.IX Subsection "Malloc Performance Flags"

.IX Item "-\s-1DNO_FANCY_MALLOC\s0"

.IX Item "-\s-1DPLAIN_MALLOC\s0"

.IX Subsection "Building a debugging perl"

.IX Subsection "Other Compiler Flags"

.IX Subsection "What if it doesn't work?"

.IX Item "Running Configure Interactively"

.IX Item "Hint files"

.IX Item "*** \s-1WHOA\s0 \s-1THERE\s0!!! ***"

.IX Item "Changing Compilers"

.IX Item "Propagating your changes to config.sh"

.IX Item "config.over"

.IX Item "config.h"

.IX Item "cflags"

.IX Item "No sh"

.IX Item "Porting information"

.IX Header "make depend"

.IX Header "make"

.IX Item "hints"

.IX Item "extensions"

.IX Item "locale"

.IX Item "malloc duplicates"

.IX Item "varargs"

.IX Item "util.c"

.IX Item "Solaris and SunOS dynamic loading"

.IX Item "ld.so.1: ./perl: fatal: relocation error:"

.IX Item "\s-1LD_LIBRARY_PATH\s0"

.IX Item "dlopen: stub interception failed"

.IX Item "nm extraction"

.IX Item "umask not found"

.IX Item "vsprintf"

.IX Item "do_aspawn"

.IX Item "_\|_inet_* errors"

.IX Item "Optimizer"

.IX Item "\s-1CRIPPLED_CC\s0"

.IX Item "Missing functions"

.IX Item "toke.c"

.IX Item "Missing dbmclose"

.IX Item "Note (probably harmless): No library found for \-lsomething"

.IX Item "sh: ar: not found"

.IX Item "db-recno failure on tests 51, 53 and 55"

.IX Item "Bad arg length for semctl, is \s-1XX\s0, should be \s-1ZZZ\s0"

.IX Item "lib/ipc_sysv........semget: No space left on device"

.IX Item "Miscellaneous"

.IX Header "make test"

.IX Subsection "What if make test doesn't work?"

.IX Item "locale"

.IX Item "Out of memory"

.IX Header "make install"

.IX Subsection "Installing perl under different names"

.IX Subsection "Installed files"

.IX Header "Coexistence with earlier versions of perl5"

.IX Subsection "Maintaining completely separate versions"

.IX Subsection "Upgrading from 5.004 to 5.005"

.IX Header "Coexistence with perl4"

.IX Header "cd /usr/include; h2ph *.h sys/*.h"

.IX Header "installhtml --help"

.IX Header "cd pod && make tex && (process the latex files)"

.IX Header "Reporting Problems"

.IX Header "DOCUMENTATION"

.IX Header "AUTHOR"

.IX Header "REDISTRIBUTION"

.IX Header "LAST MODIFIED"

