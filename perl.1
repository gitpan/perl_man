.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERL 1 "perl 5.004, patch 01" "8/May/97" "Perl Programmers Reference Guide"
.IX Title "PERL 1"
.UC
.IX Name "perl - Practical Extraction and Report Language"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
perl \- Practical Extraction and Report Language
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\fBperl\fR	[\ \fB\-sTuU\fR\ ]
	[\ \fB\-hv\fR\ ]\ [\ \fB\-V\fR[:\fIconfigvar\fR]\ ]
	[\ \fB\-cw\fR\ ]\ [\ \fB\-d\fR[:\fIdebugger\fR]\ ]\ [\ \fB\-D\fR[\fInumber/list\fR]\ ]
	[\ \fB\-pna\fR\ ]\ [\ \fB\-F\fR\fIpattern\fR\ ]\ [\ \fB\-l\fR[\fIoctal\fR]\ ]\ [\ \fB\-0\fR[\fIoctal\fR]\ ]
	[\ \fB\-I\fR\fIdir\fR\ ]\ [\ \fB\-m\fR[\fB\-\fR]\fImodule\fR\ ]\ [\ \fB\-M\fR[\fB\-\fR]\fI'module...\*(R'\fR\ ]
	[\ \fB\-P\fR\ ]
	[\ \fB\-S\fR\ ]
	[\ \fB\-x\fR[\fIdir\fR]\ ]
	[\ \fB\-i\fR[\fIextension\fR]\ ]
	[\ \fB\-e\fR\ \fI'command\*(R'\fR\ ]\ [\ \fB--\fR\ ]\ [\ \fIprogramfile\fR\ ]\ [\ \fIargument\fR\ ]...
.PP
For ease of access, the Perl manual has been split up into a number
of sections:
.PP
.Vb 3
\&    perl        Perl overview (this section)
\&    perldelta   Perl changes since previous version
\&    perlfaq     Perl frequently asked questions
.Ve
.Vb 12
\&    perldata    Perl data structures
\&    perlsyn     Perl syntax
\&    perlop      Perl operators and precedence
\&    perlre      Perl regular expressions
\&    perlrun     Perl execution and options
\&    perlfunc    Perl builtin functions
\&    perlvar     Perl predefined variables
\&    perlsub     Perl subroutines
\&    perlmod     Perl modules: how they work
\&    perlmodlib  Perl modules: how to write and use
\&    perlform    Perl formats
\&    perllocale  Perl locale support
.Ve
.Vb 8
\&    perlref     Perl references
\&    perldsc     Perl data structures intro
\&    perllol     Perl data structures: lists of lists
\&    perltoot    Perl OO tutorial
\&    perlobj     Perl objects
\&    perltie     Perl objects hidden behind simple variables
\&    perlbot     Perl OO tricks and examples
\&    perlipc     Perl interprocess communication
.Ve
.Vb 5
\&    perldebug   Perl debugging
\&    perldiag    Perl diagnostic messages
\&    perlsec     Perl security
\&    perltrap    Perl traps for the unwary
\&    perlstyle   Perl style guide
.Ve
.Vb 2
\&    perlpod     Perl plain old documentation
\&    perlbook    Perl book information
.Ve
.Vb 6
\&    perlembed   Perl ways to embed perl in your C or C++ application
\&    perlapio    Perl internal IO abstraction interface
\&    perlxs      Perl XS application programming interface
\&    perlxstut   Perl XS tutorial
\&    perlguts    Perl internal functions for those doing extensions
\&    perlcall    Perl calling conventions from C
.Ve
(If you're intending to read these straight through for the first time,
the suggested order will tend to reduce the number of forward references.)
.PP
By default, all of the above manpages are installed in the 
\fI/usr/local/man/\fR directory.  
.PP
Extensive additional documentation for Perl modules is available.  The
default configuration for perl will place this additional documentation
in the \fI/usr/local/lib/perl5/man\fR directory (or else in the \fIman\fR
subdirectory of the Perl library directory).  Some of this additional
documentation is distributed standard with Perl, but you'll also find
documentation for third-party modules there.
.PP
You should be able to view Perl's documentation with your \fIman\fR\|(1)
program by including the proper directories in the appropriate start-up
files, or in the MANPATH environment variable.  To find out where the
configuration has installed the manpages, type:
.PP
.Vb 1
\&    perl -V:man.dir
.Ve
If the directories have a common stem, such as \fI/usr/local/man/man1\fR
and \fI/usr/local/man/man3\fR, you need only to add that stem
(\fI/usr/local/man\fR) to your \fIman\fR\|(1) configuration files or your MANPATH
environment variable.  If they do not share a stem, you'll have to add
both stems.
.PP
If that doesn't work for some reason, you can still use the
supplied \fIperldoc\fR script to view module information.  You might
also look into getting a replacement man program.
.PP
If something strange has gone wrong with your program and you're not
sure where you should look for help, try the \fB\-w\fR switch first.  It
will often point out exactly where the trouble is.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl is a language optimized for scanning arbitrary
text files, extracting information from those text files, and printing
reports based on that information.  It's also a good language for many
system management tasks.  The language is intended to be practical
(easy to use, efficient, complete) rather than beautiful (tiny,
elegant, minimal).
.PP
Perl combines (in the author's opinion, anyway) some of the best
features of C, \fBsed\fR, \fBawk\fR, and \fBsh\fR, so people familiar with
those languages should have little difficulty with it.  (Language
historians will also note some vestiges of \fBcsh\fR, Pascal, and even
BASIC\-PLUS.)  Expression syntax corresponds quite closely to C
expression syntax.  Unlike most Unix utilities, Perl does not
arbitrarily limit the size of your data\*(--if you've got the memory,
Perl can slurp in your whole file as a single string.  Recursion is of
unlimited depth.  And the tables used by hashes (previously called
\*(L"associative arrays") grow as necessary to prevent degraded
performance.  Perl uses sophisticated pattern matching techniques to
scan large amounts of data very quickly.  Although optimized for
scanning text, Perl can also deal with binary data, and can make dbm
files look like hashes.  Setuid Perl scripts are safer than C programs
through a dataflow tracing mechanism which prevents many stupid
security holes.
.PP
If you have a problem that would ordinarily use \fBsed\fR or \fBawk\fR or
\fBsh\fR, but it exceeds their capabilities or must run a little faster,
and you don't want to write the silly thing in C, then Perl may be for
you.  There are also translators to turn your \fBsed\fR and \fBawk\fR
scripts into Perl scripts.
.PP
But wait, there's more...
.PP
Perl version 5 is nearly a complete rewrite, and provides
the following additional benefits:
.Ip "\(bu Many usability enhancements" 5
.IX Item "\(bu Many usability enhancements"
It is now possible to write much more readable Perl code (even within
regular expressions).  Formerly cryptic variable names can be replaced
by mnemonic identifiers.  Error messages are more informative, and the
optional warnings will catch many of the mistakes a novice might make.
This cannot be stressed enough.  Whenever you get mysterious behavior,
try the \fB\-w\fR switch!!!  Whenever you don't get mysterious behavior,
try using \fB\-w\fR anyway.
.Ip "\(bu Simplified grammar" 5
.IX Item "\(bu Simplified grammar"
The new yacc grammar is one half the size of the old one.  Many of the
arbitrary grammar rules have been regularized.  The number of reserved
words has been cut by 2/3.  Despite this, nearly all old Perl scripts
will continue to work unchanged.
.Ip "\(bu Lexical scoping" 5
.IX Item "\(bu Lexical scoping"
Perl variables may now be declared within a lexical scope, like \*(L"auto\*(R"
variables in C.  Not only is this more efficient, but it contributes
to better privacy for \*(L"programming in the large\*(R".  Anonymous
subroutines exhibit deep binding of lexical variables (closures).
.Ip "\(bu Arbitrarily nested data structures" 5
.IX Item "\(bu Arbitrarily nested data structures"
Any scalar value, including any array element, may now contain a
reference to any other variable or subroutine.  You can easily create
anonymous variables and subroutines.  Perl manages your reference
counts for you.
.Ip "\(bu Modularity and reusability" 5
.IX Item "\(bu Modularity and reusability"
The Perl library is now defined in terms of modules which can be easily
shared among various packages.  A package may choose to import all or a
portion of a module's published interface.  Pragmas (that is, compiler
directives) are defined and used by the same mechanism.
.Ip "\(bu Object-oriented programming" 5
.IX Item "\(bu Object-oriented programming"
A package can function as a class.  Dynamic multiple inheritance and
virtual methods are supported in a straightforward manner and with very
little new syntax.  Filehandles may now be treated as objects.
.Ip "\(bu Embeddable and Extensible" 5
.IX Item "\(bu Embeddable and Extensible"
Perl may now be embedded easily in your C or \*(C+ application, and can
either call or be called by your routines through a documented
interface.  The \s-1XS\s0 preprocessor is provided to make it easy to glue
your C or \*(C+ routines into Perl.  Dynamic loading of modules is
supported, and Perl itself can be made into a dynamic library.
.Ip "\(bu \s-1POSIX\s0 compliant" 5
.IX Item "\(bu \s-1POSIX\s0 compliant"
A major new module is the \s-1POSIX\s0 module, which provides access to all
available \s-1POSIX\s0 routines and definitions, via object classes where
appropriate.
.Ip "\(bu Package constructors and destructors" 5
.IX Item "\(bu Package constructors and destructors"
The new \s-1BEGIN\s0 and \s-1END\s0 blocks provide means to capture control as
a package is being compiled, and after the program exits.  As a
degenerate case they work just like awk's \s-1BEGIN\s0 and \s-1END\s0 when you
use the \fB\-p\fR or \fB\-n\fR switches.
.Ip "\(bu Multiple simultaneous \s-1DBM\s0 implementations" 5
.IX Item "\(bu Multiple simultaneous \s-1DBM\s0 implementations"
A Perl program may now access \s-1DBM\s0, \s-1NDBM\s0, \s-1SDBM\s0, \s-1GDBM\s0, and Berkeley \s-1DB\s0
files from the same script simultaneously.  In fact, the old dbmopen
interface has been generalized to allow any variable to be tied
to an object class which defines its access methods.
.Ip "\(bu Subroutine definitions may now be autoloaded" 5
.IX Item "\(bu Subroutine definitions may now be autoloaded"
In fact, the \s-1AUTOLOAD\s0 mechanism also allows you to define any arbitrary
semantics for undefined subroutine calls.  It's not for just autoloading.
.Ip "\(bu Regular expression enhancements" 5
.IX Item "\(bu Regular expression enhancements"
You can now specify nongreedy quantifiers.  You can now do grouping
without creating a backreference.  You can now write regular expressions
with embedded whitespace and comments for readability.  A consistent
extensibility mechanism has been added that is upwardly compatible with
all old regular expressions.
.Ip "\(bu Innumerable Unbundled Modules" 5
.IX Item "\(bu Innumerable Unbundled Modules"
The Comprehensive Perl Archive Network described in the \fIperlmodlib\fR manpage
contains hundreds of plug-and-play modules full of reusable code.
See \fIhttp://www.perl.com/\s-1CPAN\s0\fR for a site near you.
.Ip "\(bu Compilability" 5
.IX Item "\(bu Compilability"
While not yet in full production mode, a working perl-to-C compiler
does exist.  It can generate portable byte code, simple C, or
optimized C code.
.PP
Okay, that's \fIdefinitely\fR enough hype.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
See the \fIperlrun\fR manpage.
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall <\fIlarry@wall.org\fR>, with the help of oodles of other folks.
.SH "FILES"
.IX Header "FILES"
.PP
.Vb 2
\& "/tmp/perl-e$$"        temporary file for -e commands
\& "@INC"                 locations of perl libraries
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.PP
.Vb 1
\& a2p    awk to perl translator
.Ve
.Vb 1
\& s2p    sed to perl translator
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
The \fB\-w\fR switch produces some lovely diagnostics.
.PP
See the \fIperldiag\fR manpage for explanations of all Perl's diagnostics.
.PP
Compilation errors will tell you the line number of the error, with an
indication of the next token or token type that was to be examined.
(In the case of a script passed to Perl via \fB\-e\fR switches, each
\fB\-e\fR is counted as one line.)
.PP
Setuid scripts have additional constraints that can produce error
messages such as \*(L"Insecure dependency\*(R".  See the \fIperlsec\fR manpage.
.PP
Did we mention that you should definitely consider using the \fB\-w\fR
switch?
.SH "BUGS"
.IX Header "BUGS"
The \fB\-w\fR switch is not mandatory.
.PP
Perl is at the mercy of your machine's definitions of various
operations such as type casting, \fIatof()\fR, and floating-point
output with \fIsprintf()\fR.
.PP
If your stdio requires a seek or eof between reads and writes on a
particular stream, so does Perl.  (This doesn't apply to \fIsysread()\fR
and \fIsyswrite()\fR.)
.PP
While none of the built-in data types have any arbitrary size limits
(apart from memory size), there are still a few arbitrary limits:  a
given variable name may not be longer than 255 characters, and no
component of your PATH may be longer than 255 if you use \fB\-S\fR.  A regular
expression may not compile to more than 32767 bytes internally.
.PP
You may mail your bug reports (be sure to include full configuration
information as output by the myconfig program in the perl source tree,
or by \f(CWperl -V\fR) to <\fIperlbug@perl.com\fR>.
If you've succeeded in compiling perl, the perlbug script in the utils/
subdirectory can be used to help mail in a bug report.
.PP
Perl actually stands for Pathologically Eclectic Rubbish Lister, but
don't tell anyone I said that.
.SH "NOTES"
.IX Header "NOTES"
The Perl motto is \*(L"There's more than one way to do it.\*(R"  Divining
how many more is left as an exercise to the reader.
.PP
The three principal virtues of a programmer are Laziness,
Impatience, and Hubris.  See the Camel Book for why.

.rn }` ''
