.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLPOD 1 "perl 5.003, patch 93" "7/Jan/97" "Perl Programmers Reference Guide"
.IX Title "PERLPOD 1"
.UC
.IX Name "perlpod - plain old documentation"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
perlpod \- plain old documentation
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A pod-to-whatever translator reads a pod file paragraph by paragraph,
and translates it to the appropriate output format.  There are
three kinds of paragraphs:
.Ip "\(bu" 4
.IX Item "\(bu"
A verbatim paragraph, distinguished by being indented (that is,
it starts with space or tab).  It should be reproduced exactly,
with tabs assumed to be on 8-column boundaries.  There are no
special formatting escapes, so you can't italicize or anything
like that.  A \e means \e, and nothing else.
.Ip "\(bu" 4
.IX Item "\(bu"
A command.  All command paragraphs start with \*(L"=\*(R", followed by an
identifier, followed by arbitrary text that the command can
use however it pleases.  Currently recognized commands are
.Sp
.Vb 10
\&    =head1 heading
\&    =head2 heading
\&    =item text
\&    =over N
\&    =back
\&    =cut
\&    =pod
\&    =for X
\&    =begin X
\&    =end X
.Ve
The \*(L"=pod\*(R" directive does nothing beyond telling the compiler to lay
off parsing code through the next \*(L"=cut\*(R".  It's useful for adding
another paragraph to the doc if you're mixing up code and pod a lot.
.Sp
Head1 and head2 produce first and second level headings, with the text in
the same paragraph as the \*(L"=headn\*(R" directive forming the heading description.
.Sp
Item, over, and back require a little more explanation: \*(L"=over\*(R" starts a
section specifically for the generation of a list using \*(L"=item\*(R" commands. At
the end of your list, use \*(L"=back\*(R" to end it. You will probably want to give
\*(L"4\*(R" as the number to \*(L"=over\*(R", as some formatters will use this for indentation.
This should probably be a default. Note also that there are some basic rules
to using =item: don't use them outside of an =over/=back block, use at least
one inside an =over/=back block, you don't _have_ to include the =back if
the list just runs off the document, and perhaps most importantly, keep the
items consistent: either use \*(L"=item *\*(R" for all of them, to produce bullets,
or use \*(L"=item 1.\*(R", \*(L"=item 2.\*(R", etc., to produce numbered lists, or use
\*(L"=item foo\*(R", \*(L"=item bar\*(R", etc., i.e., things that looks nothing like bullets
or numbers. If you start with bullets or numbers, stick with them, as many
formatters use the first \*(L"=item\*(R" type to decide how to format the list.  
.Sp
For, begin, and end let you include sections that are not interpreted
as pod text, but passed directly to particular formatters. A formatter
that can utilize that format will use the section, otherwise it will be
completely ignored.  The directive \*(L"=for\*(R" specifies that the entire next
paragraph is in the format indicated by the first word after
\*(L"=for\*(R", like this:
.Sp
.Vb 2
\& =for html <br> 
\&  <p> This is a raw HTML paragraph </p>
.Ve
The paired commands \*(L"=begin\*(R" and \*(L"=end\*(R" work very similarly to \*(L"=for\*(R", but
instead of only accepting a single paragraph, all text from \*(L"=begin\*(R" to a
paragraph with a matching \*(L"=end\*(R" are treated as a particular format. 
.Sp
Here are some examples of how to use these:
.Sp
.Vb 1
\& =begin html
.Ve
.Vb 1
\& <br>Figure 1.<IMG SRC="figure1.png"><br>
.Ve
.Vb 1
\& =end html
.Ve
.Vb 1
\& =begin text
.Ve
.Vb 4
\&   ---------------
\&   |  foo        |
\&   |        bar  |
\&   ---------------
.Ve
.Vb 1
\& ^^^^ Figure 1. ^^^^
.Ve
.Vb 1
\& =end text
.Ve
Some format names that formatters currently are known to accept include
\*(L"roff\*(R", \*(L"man\*(R", \*(L"latex\*(R", \*(L"tex\*(R", \*(L"text\*(R", and \*(L"html\*(R". (Some formatters will
treat some of these as synonyms.)
.Sp
And don't forget, when using any command, that the command lasts up until
the end of the \fBparagraph\fR, not the line. Hence in the examples below, you
can see the blank lines after each command to end its paragraph.
.Sp
Some examples of lists include:
.Sp
.Vb 1
\& =over 4
.Ve
.Vb 1
\& =item *
.Ve
.Vb 1
\& First item
.Ve
.Vb 1
\& =item *
.Ve
.Vb 1
\& Second item
.Ve
.Vb 1
\& =back
.Ve
.Vb 1
\& =over 4
.Ve
.Vb 1
\& =item Foo()
.Ve
.Vb 1
\& Description of Foo function
.Ve
.Vb 1
\& =item Bar()
.Ve
.Vb 1
\& Description of Bar function
.Ve
.Vb 1
\& =back
.Ve
.Ip "\(bu" 4
.IX Item "\(bu"
An ordinary block of text.  It will be filled, and maybe even
justified.  Certain interior sequences are recognized both
here and in commands:
.Sp
.Vb 22
\&    I<text>     italicize text, used for emphasis or variables
\&    B<text>     embolden text, used for switches and programs
\&    S<text>     text contains non-breaking spaces
\&    C<code>     literal code 
\&    L<name>     A link (cross reference) to name
\&                    L<name>             manual page
\&                    L<name/ident>       item in manual page
\&                    L<name/"sec">       section in other manual page
\&                    L<"sec">            section in this manual page
\&                                        (the quotes are optional)
\&                    L</"sec">           ditto
\&    F<file>     Used for filenames
\&    X<index>    An index entry
\&    ZE<lt>E<gt> A zero-width character
\&    E<escape>   A named character (very similar to HTML escapes)
\&                    E<lt>               A literal <
\&                    E<gt>               A literal >
\&                    (these are optional except in other interior
\&                     sequences and when preceded by a capital letter)
\&                    E<n>                Character number n (probably in ASCII)
\&                    E<html>             Some non-numeric HTML entity, such
\&                                        as E<Agrave>
.Ve
.PP
That's it.  The intent is simplicity, not power.  I wanted paragraphs
to look like paragraphs (block format), so that they stand out
visually, and so that I could run them through fmt easily to reformat
them (that's F7 in my version of \fBvi\fR).  I wanted the translator (and not
me) to worry about whether \*(L" or \*(L' is a left quote or a right quote
within filled text, and I wanted it to leave the quotes alone, dammit, in
verbatim mode, so I could slurp in a working program, shift it over 4
spaces, and have it print out, er, verbatim.  And presumably in a
constant width font.
.PP
In particular, you can leave things like this verbatim in your text:
.PP
.Vb 5
\&    Perl
\&    FILEHANDLE
\&    $variable
\&    function()
\&    manpage(3r)
.Ve
Doubtless a few other commands or sequences will need to be added along
the way, but I've gotten along surprisingly well with just these.
.PP
Note that I'm not at all claiming this to be sufficient for producing a
book.  I'm just trying to make an idiot-proof common source for nroff,
TeX, and other markup languages, as used for online documentation.
Translators exist for \fBpod2man\fR  (that's for \fInroff\fR\|(1) and \fItroff\fR\|(1)),
\fBpod2html\fR, \fBpod2latex\fR, and \fBpod2fm\fR.
.SH "Embedding Pods in Perl Modules"
.IX Header "Embedding Pods in Perl Modules"
You can embed pod documentation in your Perl scripts.  Start your
documentation with a \*(L"=head1\*(R" command at the beginning, and end it
with a \*(L"=cut\*(R" command.  Perl will ignore the pod text.  See any of the
supplied library modules for examples.  If you're going to put your
pods at the end of the file, and you're using an _\|_END_\|_ or _\|_DATA_\|_
cut mark, make sure to put a blank line there before the first pod
directive.
.PP
.Vb 1
\&    __END__
.Ve
.Vb 1
\&    =head1 NAME
.Ve
.Vb 1
\&    modern - I am a modern module
.Ve
If you had not had that blank line there, then the translators wouldn't
have seen it.
.SH "Common Pod Pitfalls"
.IX Header "Common Pod Pitfalls"
.Ip "\(bu" 4
.IX Item "\(bu"
Pod translators usually will require paragraphs to be separated by
completely empty lines.  If you have an apparently blank line with
some spaces on it, this can cause odd formatting.
.Ip "\(bu" 4
.IX Item "\(bu"
Translators will mostly add wording around a L<> link, so that
\f(CWL<\fIfoo\fR\|(1)>\fR becomes \*(L"the \fIfoo\fR(1) manpage\*(R", for example (see
\fBpod2man\fR for details).  Thus, you shouldn't write things like \f(CWthe
L<foo> manpage\fR, if you want the translated document to read
sensibly.
.Ip "\(bu" 4
.IX Item "\(bu"
The script \fIpod/checkpods.\s-1PL\s0\fR in the Perl source distribution
provides skeletal checking for lines that look blank but aren't
\fBonly\fR, but is there as a placeholder until someone writes
Pod::Checker.  The best way to check your pod is to pass it through
one or more translators and proofread the result, or print out the
result and proofread that.  Some of the problems found may be bugs in
the translators, which you may or may not wish to work around.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
the \fIpod2man\fR manpage and the section on \fIPODs: Embedded Documentation\fR in the \fIperlsyn\fR manpage
.SH "AUTHOR"
.IX Header "AUTHOR"
Larry Wall

.rn }` ''
