.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLFAQ8 1 "perl 5.004, patch 01" "6/Jun/97" "Perl Programmers Reference Guide"
.IX Title "PERLFAQ8 1"
.UC
.IX Name "perlfaq8 - System Interaction ($Revision: 1.21 $, $Date: 1997/04/24 22:44:19 $)"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
perlfaq8 \- System Interaction ($Revision: 1.21 $, \f(CW$Date:\fR 1997/04/24 22:44:19 $)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This section of the Perl FAQ covers questions involving operating
system interaction.  This involves interprocess communication (IPC),
control over the user-interface (keyboard, screen and pointing
devices), and most anything else not related to data manipulation.
.PP
Read the FAQs and documentation specific to the port of perl to your
operating system (eg, the \fIperlvms\fR manpage, the \fIperlplan9\fR manpage, ...).  These should
contain more detailed information on the vagaries of your perl.
.Sh "How do I find out which operating system I'm running under?"
.IX Subsection "How do I find out which operating system I'm running under?"
The $^O variable ($\s-1OSTYPE\s0 if you use English) contains the operating
system that your perl binary was built for.
.Sh "How come \fIexec()\fR doesn't return?"
.IX Subsection "How come \fIexec()\fR doesn't return?"
Because that's what it does: it replaces your currently running
program with a different one.  If you want to keep going (as is
probably the case if you're asking this question) use \fIsystem()\fR
instead.
.Sh "How do I do fancy stuff with the keyboard/screen/mouse?"
.IX Subsection "How do I do fancy stuff with the keyboard/screen/mouse?"
How you access/control keyboards, screens, and pointing devices
("mice") is system-dependent.  Try the following modules:
.Ip "Keyboard" 4
.IX Item "Keyboard"
.Sp
.Vb 5
\&    Term::Cap                   Standard perl distribution
\&    Term::ReadKey               CPAN
\&    Term::ReadLine::Gnu         CPAN
\&    Term::ReadLine::Perl        CPAN
\&    Term::Screen                CPAN
.Ve
.Ip "Screen" 4
.IX Item "Screen"
.Sp
.Vb 3
\&    Term::Cap                   Standard perl distribution
\&    Curses                      CPAN
\&    Term::ANSIColor             CPAN
.Ve
.Ip "Mouse" 4
.IX Item "Mouse"
.Sp
.Vb 1
\&    Tk                          CPAN
.Ve
.Sh "How do I ask the user for a password?"
.IX Subsection "How do I ask the user for a password?"
(This question has nothing to do with the web.  See a different
\s-1FAQ\s0 for that.)
.PP
There's an example of this in the \f(CWcrypt\fR entry in the \fIperlfunc\fR manpage).  First, you put
the terminal into \*(L"no echo\*(R" mode, then just read the password
normally.  You may do this with an old-style \fIioctl()\fR function, \s-1POSIX\s0
terminal control (see the \fI\s-1POSIX\s0\fR manpage, and Chapter 7 of the Camel), or a call
to the \fBstty\fR program, with varying degrees of portability.
.PP
You can also do this for most systems using the Term::ReadKey module
from \s-1CPAN\s0, which is easier to use and in theory more portable.
.Sh "How do I read and write the serial port?"
.IX Subsection "How do I read and write the serial port?"
This depends on which operating system your program is running on.  In
the case of Unix, the serial ports will be accessible through files in
/dev; on other systems, the devices names will doubtless differ.
Several problem areas common to all device interaction are the
following
.Ip "lockfiles" 4
.IX Item "lockfiles"
Your system may use lockfiles to control multiple access.  Make sure
you follow the correct protocol.  Unpredictable behaviour can result
from multiple processes reading from one device.
.Ip "open mode" 4
.IX Item "open mode"
If you expect to use both read and write operations on the device,
you'll have to open it for update (see the section on \fIopen\fR in the \fIperlfunc\fR manpage for
details).  You may wish to open it without running the risk of
blocking by using \fIsysopen()\fR and \f(CWO_RDWR|O_NDELAY|O_NOCTTY\fR from the
Fcntl module (part of the standard perl distribution).  See
the section on \fIsysopen\fR in the \fIperlfunc\fR manpage for more on this approach.
.Ip "end of line" 4
.IX Item "end of line"
Some devices will be expecting a \*(L"\er\*(R" at the end of each line rather
than a \*(L"\en\*(R".  In some ports of perl, \*(L"\er\*(R" and \*(L"\en\*(R" are different from
their usual (Unix) \s-1ASCII\s0 values of \*(L"\e012\*(R" and \*(L"\e015\*(R".  You may have to
give the numeric values you want directly, using octal (\*(R"\e015"), hex
("0x0D"), or as a control-character specification (\*(R"\ecM").
.Sp
.Vb 2
\&    print DEV "atv1\e012";       # wrong, for some devices
\&    print DEV "atv1\e015";       # right, for some devices
.Ve
Even though with normal text files, a \*(L"\en\*(R" will do the trick, there is
still no unified scheme for terminating a line that is portable
between Unix, \s-1DOS/\s0Win, and Macintosh, except to terminate \fI\s-1ALL\s0\fR line
ends with \*(L"\e015\e012\*(R", and strip what you don't need from the output.
This applies especially to socket I/O and autoflushing, discussed
next.
.Ip "flushing output" 4
.IX Item "flushing output"
If you expect characters to get to your device when you \fIprint()\fR them,
you'll want to autoflush that filehandle, as in the older
.Sp
.Vb 2
\&    use FileHandle;
\&    DEV->autoflush(1);
.Ve
and the newer
.Sp
.Vb 2
\&    use IO::Handle;
\&    DEV->autoflush(1);
.Ve
You can use \fIselect()\fR and the \f(CW$|\fR variable to control autoflushing
(see the section on \fI$|\fR in the \fIperlvar\fR manpage and the \f(CWselect\fR entry in the \fIperlfunc\fR manpage):
.Sp
.Vb 3
\&    $oldh = select(DEV);
\&    $| = 1;
\&    select($oldh);
.Ve
You'll also see code that does this without a temporary variable, as in
.Sp
.Vb 1
\&    select((select(DEV), $| = 1)[0]);
.Ve
As mentioned in the previous item, this still doesn't work when using
socket I/O between Unix and Macintosh.  You'll need to hardcode your
line terminators, in that case.
.Ip "non-blocking input" 4
.IX Item "non-blocking input"
If you are doing a blocking \fIread()\fR or \fIsysread()\fR, you'll have to
arrange for an alarm handler to provide a timeout (see
the \f(CWalarm\fR entry in the \fIperlfunc\fR manpage).  If you have a non-blocking open, you'll likely
have a non-blocking read, which means you may have to use a 4-arg
\fIselect()\fR to determine whether I/O is ready on that device (see
the section on \fIselect\fR in the \fIperlfunc\fR manpage.
.Sh "How do I decode encrypted password files?"
.IX Subsection "How do I decode encrypted password files?"
You spend lots and lots of money on dedicated hardware, but this is
bound to get you talked about.
.PP
Seriously, you can't if they are Unix password files \- the Unix
password system employs one-way encryption.  Programs like Crack can
forcibly (and intelligently) try to guess passwords, but don't (can't)
guarantee quick success.
.PP
If you're worried about users selecting bad passwords, you should
proactively check when they try to change their password (by modifying
\fIpasswd\fR\|(1), for example).
.Sh "How do I start a process in the background?"
.IX Subsection "How do I start a process in the background?"
You could use
.PP
.Vb 1
\&    system("cmd &")
.Ve
or you could use fork as documented in the section on \fIfork\fR in the \fIperlfunc\fR manpage, with
further examples in the \fIperlipc\fR manpage.  Some things to be aware of, if you're
on a Unix-like system:
.Ip "\s-1STDIN\s0, \s-1STDOUT\s0 and \s-1STDERR\s0 are shared" 4
.IX Item "\s-1STDIN\s0, \s-1STDOUT\s0 and \s-1STDERR\s0 are shared"
Both the main process and the backgrounded one (the \*(L"child\*(R" process)
share the same \s-1STDIN\s0, \s-1STDOUT\s0 and \s-1STDERR\s0 filehandles.  If both try to
access them at once, strange things can happen.  You may want to close
or reopen these for the child.  You can get around this with
\f(CWopen\fRing a pipe (see the section on \fIopen\fR in the \fIperlfunc\fR manpage) but on some systems this
means that the child process cannot outlive the parent.
.Ip "Signals" 4
.IX Item "Signals"
You'll have to catch the \s-1SIGCHLD\s0 signal, and possibly \s-1SIGPIPE\s0 too.
\s-1SIGCHLD\s0 is sent when the backgrounded process finishes.  \s-1SIGPIPE\s0 is
sent when you write to a filehandle whose child process has closed (an
untrapped \s-1SIGPIPE\s0 can cause your program to silently die).  This is
not an issue with \f(CWsystem("cmd&")\fR.
.Ip "Zombies" 4
.IX Item "Zombies"
You have to be prepared to \*(L"reap\*(R" the child process when it finishes
.Sp
.Vb 1
\&    $SIG{CHLD} = sub { wait };
.Ve
See the section on \fISignals\fR in the \fIperlipc\fR manpage for other examples of code to do this.
Zombies are not an issue with \f(CWsystem("prog &")\fR.
.Sh "How do I trap control characters/signals?"
.IX Subsection "How do I trap control characters/signals?"
You don't actually \*(L"trap\*(R" a control character.  Instead, that
character generates a signal, which you then trap.  Signals are
documented in the section on \fISignals\fR in the \fIperlipc\fR manpage and chapter 6 of the Camel.
.PP
Be warned that very few C libraries are re-entrant.  Therefore, if you
attempt to \fIprint()\fR in a handler that got invoked during another stdio
operation your internal structures will likely be in an
inconsistent state, and your program will dump core.  You can
sometimes avoid this by using \fIsyswrite()\fR instead of \fIprint()\fR.
.PP
Unless you're exceedingly careful, the only safe things to do inside a
signal handler are: set a variable and exit.  And in the first case,
you should only set a variable in such a way that \fImalloc()\fR is not
called (eg, by setting a variable that already has a value).
.PP
For example:
.PP
.Vb 5
\&    $Interrupted = 0;   # to ensure it has a value
\&    $SIG{INT} = sub {
\&        $Interrupted++;
\&        syswrite(STDERR, "ouch\en", 5);
\&    }
.Ve
However, because syscalls restart by default, you'll find that if
you're in a \*(L"slow\*(R" call, such as <\s-1FH\s0>, \fIread()\fR, \fIconnect()\fR, or
\fIwait()\fR, that the only way to terminate them is by \*(L"longjumping\*(R" out;
that is, by raising an exception.  See the time-out handler for a
blocking \fIflock()\fR in the section on \fISignals\fR in the \fIperlipc\fR manpage or chapter 6 of the Camel.
.Sh "How do I modify the shadow password file on a Unix system?"
.IX Subsection "How do I modify the shadow password file on a Unix system?"
If perl was installed correctly, the getpw*() functions described in
the \fIperlfunc\fR manpage provide (read-only) access to the shadow password file.
To change the file, make a new shadow password file (the format varies
from system to system \- see the \fIpasswd(5)\fR manpage for specifics) and use
\fIpwd_mkdb\fR\|(8) to install it (see the \fIpwd_mkdb(5)\fR manpage for more details).
.Sh "How do I set the time and date?"
.IX Subsection "How do I set the time and date?"
Assuming you're running under sufficient permissions, you should be
able to set the system-wide date and time by running the \fIdate\fR\|(1)
program.  (There is no way to set the time and date on a per-process
basis.)  This mechanism will work for Unix, \s-1MS\s0\-\s-1DOS\s0, Windows, and \s-1NT\s0;
the \s-1VMS\s0 equivalent is \f(CWset time\fR.
.PP
However, if all you want to do is change your timezone, you can
probably get away with setting an environment variable:
.PP
.Vb 3
\&    $ENV{TZ} = "MST7MDT";                  # unixish
\&    $ENV{'SYS$TIMEZONE_DIFFERENTIAL'}="-5" # vms
\&    system "trn comp.lang.perl";
.Ve
.Sh "How can I \fIsleep()\fR or \fIalarm()\fR for under a second?"
.IX Subsection "How can I \fIsleep()\fR or \fIalarm()\fR for under a second?"
If you want finer granularity than the 1 second that the \fIsleep()\fR
function provides, the easiest way is to use the \fIselect()\fR function as
documented in the section on \fIselect\fR in the \fIperlfunc\fR manpage.  If your system has itimers and
\fIsyscall()\fR support, you can check out the old example in
http://www.perl.com/\s-1CPAN/\s0doc/misc/ancient/tutorial/eg/itimers.pl .
.Sh "How can I measure time under a second?"
.IX Subsection "How can I measure time under a second?"
In general, you may not be able to.  The Time::HiRes module (available
from \s-1CPAN\s0) provides this functionality for some systems.
.PP
In general, you may not be able to.  But if you system supports both the
\fIsyscall()\fR function in Perl as well as a system call like \fIgettimeofday\fR\|(2),
then you may be able to do something like this:
.PP
.Vb 1
\&    require 'sys/syscall.ph';
.Ve
.Vb 1
\&    $TIMEVAL_T = "LL";
.Ve
.Vb 1
\&    $done = $start = pack($TIMEVAL_T, ());
.Ve
.Vb 2
\&    syscall( &SYS_gettimeofday, $start, 0)) != -1
\&               or die "gettimeofday: $!";
.Ve
.Vb 3
\&       ##########################
\&       # DO YOUR OPERATION HERE #
\&       ##########################
.Ve
.Vb 2
\&    syscall( &SYS_gettimeofday, $done, 0) != -1
\&           or die "gettimeofday: $!";
.Ve
.Vb 2
\&    @start = unpack($TIMEVAL_T, $start);
\&    @done  = unpack($TIMEVAL_T, $done);
.Ve
.Vb 2
\&    # fix microseconds
\&    for ($done[1], $start[1]) { $_ /= 1_000_000 }
.Ve
.Vb 3
\&    $delta_time = sprintf "%.4f", ($done[0]  + $done[1]  )
\&                                            -
\&                                 ($start[0] + $start[1] );
.Ve
.Sh "How can I do an \fIatexit()\fR or \fIsetjmp()\fR/\fIlongjmp()\fR? (Exception handling)"
.IX Subsection "How can I do an \fIatexit()\fR or \fIsetjmp()\fR/\fIlongjmp()\fR? (Exception handling)"
Release 5 of Perl added the \s-1END\s0 block, which can be used to simulate
\fIatexit()\fR.  Each package's \s-1END\s0 block is called when the program or
thread ends (see the \fIperlmod\fR manpage manpage for more details).  It isn't
called when untrapped signals kill the program, though, so if you use
\s-1END\s0 blocks you should also use
.PP
.Vb 1
\&        use sigtrap qw(die normal-signals);
.Ve
Perl's exception-handling mechanism is its \fIeval()\fR operator.  You can
use \fIeval()\fR as setjmp and \fIdie()\fR as longjmp.  For details of this, see
the section on signals, especially the time-out handler for a blocking
\fIflock()\fR in the section on \fISignals\fR in the \fIperlipc\fR manpage and chapter 6 of the Camel.
.PP
If exception handling is all you're interested in, try the
exceptions.pl library (part of the standard perl distribution).
.PP
If you want the \fIatexit()\fR syntax (and an \fIrmexit()\fR as well), try the
AtExit module available from \s-1CPAN\s0.
.Sh "Why doesn't my sockets program work under System V (Solaris)? What does the error message \*(M"Protocol not supported\*(S" mean?"
.IX Subsection "Why doesn't my sockets program work under System V (Solaris)? What does the error message \*(M"Protocol not supported\*(S" mean?"
Some Sys-V based systems, notably Solaris 2.X, redefined some of the
standard socket constants.  Since these were constant across all
architectures, they were often hardwired into perl code.  The proper
way to deal with this is to \*(L"use Socket\*(R" to get the correct values.
.PP
Note that even though SunOS and Solaris are binary compatible, these
values are different.  Go figure.
.Sh "How can I call my system's unique C functions from Perl?"
.IX Subsection "How can I call my system's unique C functions from Perl?"
In most cases, you write an external module to do it \- see the answer
to \*(L"Where can I learn about linking C with Perl? [h2xs, xsubpp]\*(R".
However, if the function is a system call, and your system supports
\fIsyscall()\fR, you can use the syscall function (documented in
the \fIperlfunc\fR manpage).
.PP
Remember to check the modules that came with your distribution, and
\s-1CPAN\s0 as well \- someone may already have written a module to do it.
.Sh "Where do I get the include files to do \fIioctl()\fR or \fIsyscall()\fR?"
.IX Subsection "Where do I get the include files to do \fIioctl()\fR or \fIsyscall()\fR?"
Historically, these would be generated by the h2ph tool, part of the
standard perl distribution.  This program converts \fIcpp\fR\|(1) directives
in C header files to files containing subroutine definitions, like
&SYS_getitimer, which you can use as arguments to your functions.
It doesn't work perfectly, but it usually gets most of the job done.
Simple files like \fIerrno.h\fR, \fIsyscall.h\fR, and \fIsocket.h\fR were fine,
but the hard ones like \fIioctl.h\fR nearly always need to hand-edited.
Here's how to install the *.ph files:
.PP
.Vb 3
\&    1.  become super-user
\&    2.  cd /usr/include
\&    3.  h2ph *.h */*.h
.Ve
If your system supports dynamic loading, for reasons of portability and
sanity you probably ought to use h2xs (also part of the standard perl
distribution).  This tool converts C header files to Perl extensions.
See the \fIperlxstut\fR manpage for how to get started with h2xs.
.PP
If your system doesn't support dynamic loading, you still probably
ought to use h2xs.  See the \fIperlxstut\fR manpage and the \fIExtUtils::MakeMaker\fR manpage for
more information (in brief, just use \fBmake perl\fR instead of a plain
\fBmake\fR to rebuild perl with a new static extension).
.Sh "Why do setuid perl scripts complain about kernel problems?"
.IX Subsection "Why do setuid perl scripts complain about kernel problems?"
Some operating systems have bugs in the kernel that make setuid
scripts inherently insecure.  Perl gives you a number of options
(described in the \fIperlsec\fR manpage) to work around such systems.
.Sh "How can I open a pipe both to and from a command?"
.IX Subsection "How can I open a pipe both to and from a command?"
The \s-1IPC::\s0Open2 module (part of the standard perl distribution) is an
easy-to-use approach that internally uses \fIpipe()\fR, \fIfork()\fR, and \fIexec()\fR
to do the job.  Make sure you read the deadlock warnings in its
documentation, though (see the \fI\s-1IPC::\s0Open2\fR manpage).
.Sh "Why can't I get the output of a command with \fIsystem()\fR?"
.IX Subsection "Why can't I get the output of a command with \fIsystem()\fR?"
You're confusing the purpose of \fIsystem()\fR and backticks (``).  \fIsystem()\fR
runs a command and returns exit status information (as a 16 bit value:
the low 8 bits are the signal the process died from, if any, and
the high 8 bits are the actual exit value).  Backticks (``) run a
command and return what it sent to \s-1STDOUT\s0.
.PP
.Vb 2
\&    $exit_status   = system("mail-users");
\&    $output_string = `ls`;
.Ve
.Sh "How can I capture \s-1STDERR\s0 from an external command?"
.IX Subsection "How can I capture \s-1STDERR\s0 from an external command?"
There are three basic ways of running external commands:
.PP
.Vb 3
\&    system $cmd;                # using system()
\&    $output = `$cmd`;           # using backticks (``)
\&    open (PIPE, "cmd |");       # using open()
.Ve
With \fIsystem()\fR, both \s-1STDOUT\s0 and \s-1STDERR\s0 will go the same place as the
script's versions of these, unless the command redirects them.
Backticks and \fIopen()\fR read \fBonly\fR the \s-1STDOUT\s0 of your command.
.PP
With any of these, you can change file descriptors before the call:
.PP
.Vb 2
\&    open(STDOUT, ">logfile");
\&    system("ls");
.Ve
or you can use Bourne shell file-descriptor redirection:
.PP
.Vb 2
\&    $output = `$cmd 2>some_file`;
\&    open (PIPE, "cmd 2>some_file |");
.Ve
You can also use file-descriptor redirection to make \s-1STDERR\s0 a
duplicate of \s-1STDOUT\s0:
.PP
.Vb 2
\&    $output = `$cmd 2>&1`;
\&    open (PIPE, "cmd 2>&1 |");
.Ve
Note that you \fIcannot\fR simply open \s-1STDERR\s0 to be a dup of \s-1STDOUT\s0
in your Perl program and avoid calling the shell to do the redirection.
This doesn't work:
.PP
.Vb 2
\&    open(STDERR, ">&STDOUT");
\&    $alloutput = `cmd args`;  # stderr still escapes
.Ve
This fails because the \fIopen()\fR makes \s-1STDERR\s0 go to where \s-1STDOUT\s0 was
going at the time of the \fIopen()\fR.  The backticks then make \s-1STDOUT\s0 go to
a string, but don't change \s-1STDERR\s0 (which still goes to the old
\s-1STDOUT\s0).
.PP
Note that you \fImust\fR use Bourne shell (\fIsh\fR\|(1)) redirection syntax in
backticks, not \fIcsh\fR\|(1)!  Details on why Perl's \fIsystem()\fR and backtick
and pipe opens all use the Bourne shell are in
http://www.perl.com/\s-1CPAN/\s0doc/\s-1FMTEYEWTK/\s0versus/csh.whynot .
.PP
You may also use the \s-1IPC::\s0Open3 module (part of the standard perl
distribution), but be warned that it has a different order of
arguments from \s-1IPC::\s0Open2 (see the \fI\s-1IPC::\s0Open3\fR manpage).
.Sh "Why doesn't \fIopen()\fR return an error when a pipe open fails?"
.IX Subsection "Why doesn't \fIopen()\fR return an error when a pipe open fails?"
It does, but probably not how you expect it to.  On systems that
follow the standard \fIfork()\fR/\fIexec()\fR paradigm (eg, Unix), it works like
this: \fIopen()\fR causes a \fIfork()\fR.  In the parent, \fIopen()\fR returns with the
process \s-1ID\s0 of the child.  The child \fIexec()\fRs the command to be piped
to/from.  The parent can't know whether the \fIexec()\fR was successful or
not \- all it can return is whether the \fIfork()\fR succeeded or not.  To
find out if the command succeeded, you have to catch \s-1SIGCHLD\s0 and
\fIwait()\fR to get the exit status.  You should also catch \s-1SIGPIPE\s0 if
you're writing to the child -- you may not have found out the \fIexec()\fR
failed by the time you write.  This is documented in the \fIperlipc\fR manpage.
.PP
On systems that follow the \fIspawn()\fR paradigm, \fIopen()\fR \fImight\fR do what
you expect \- unless perl uses a shell to start your command. In this
case the \fIfork()\fR/\fIexec()\fR description still applies.
.Sh "What's wrong with using backticks in a void context?"
.IX Subsection "What's wrong with using backticks in a void context?"
Strictly speaking, nothing.  Stylistically speaking, it's not a good
way to write maintainable code because backticks have a (potentially
humungous) return value, and you're ignoring it.  It's may also not be very
efficient, because you have to read in all the lines of output, allocate
memory for them, and then throw it away.  Too often people are lulled
to writing:
.PP
.Vb 1
\&    `cp file file.bak`;
.Ve
And now they think \*(L"Hey, I'll just always use backticks to run programs.\*(R"
Bad idea: backticks are for capturing a program's output; the \fIsystem()\fR
function is for running programs.
.PP
Consider this line:
.PP
.Vb 1
\&    `cat /etc/termcap`;
.Ve
You haven't assigned the output anywhere, so it just wastes memory
(for a little while).  Plus you forgot to check \f(CW$?\fR to see whether
the program even ran correctly.  Even if you wrote
.PP
.Vb 1
\&    print `cat /etc/termcap`;
.Ve
In most cases, this could and probably should be written as
.PP
.Vb 2
\&    system("cat /etc/termcap") == 0
\&        or die "cat program failed!";
.Ve
Which will get the output quickly (as its generated, instead of only
at the end ) and also check the return value.
.PP
\fIsystem()\fR also provides direct control over whether shell wildcard
processing may take place, whereas backticks do not.
.Sh "How can I call backticks without shell processing?"
.IX Subsection "How can I call backticks without shell processing?"
This is a bit tricky.  Instead of writing
.PP
.Vb 1
\&    @ok = `grep @opts '$search_string' @filenames`;
.Ve
You have to do this:
.PP
.Vb 10
\&    my @ok = ();
\&    if (open(GREP, "-|")) {
\&        while (<GREP>) {
\&            chomp;
\&            push(@ok, $_);
\&        }
\&        close GREP;
\&    } else {
\&        exec 'grep', @opts, $search_string, @filenames;
\&    }
.Ve
Just as with \fIsystem()\fR, no shell escapes happen when you \fIexec()\fR a list.
.Sh "Why can't my script read from \s-1STDIN\s0 after I gave it \s-1EOF\s0 (^D on Unix, ^Z on \s-1MS\s0\-\s-1DOS\s0)?"
.IX Subsection "Why can't my script read from \s-1STDIN\s0 after I gave it \s-1EOF\s0 (^D on Unix, ^Z on \s-1MS\s0\-\s-1DOS\s0)?"
Because some stdio's set error and eof flags that need clearing.  The
\s-1POSIX\s0 module defines \fIclearerr()\fR that you can use.  That is the
technically correct way to do it.  Here are some less reliable
workarounds:
.Ip "1" 4
.IX Item "1"
Try keeping around the seekpointer and go there, like this:
.Sp
.Vb 2
\&    $where = tell(LOG);
\&    seek(LOG, $where, 0);
.Ve
.Ip "2" 4
.IX Item "2"
If that doesn't work, try seeking to a different part of the file and
then back.
.Ip "3" 4
.IX Item "3"
If that doesn't work, try seeking to a different part of
the file, reading something, and then seeking back.
.Ip "4" 4
.IX Item "4"
If that doesn't work, give up on your stdio package and use sysread.
.Sh "How can I convert my shell script to perl?"
.IX Subsection "How can I convert my shell script to perl?"
Learn Perl and rewrite it.  Seriously, there's no simple converter.
Things that are awkward to do in the shell are easy to do in Perl, and
this very awkwardness is what would make a shell->perl converter
nigh-on impossible to write.  By rewriting it, you'll think about what
you're really trying to do, and hopefully will escape the shell's
pipeline datastream paradigm, which while convenient for some matters,
causes many inefficiencies.
.Sh "Can I use perl to run a telnet or ftp session?"
.IX Subsection "Can I use perl to run a telnet or ftp session?"
Try the Net::\s-1FTP\s0, \s-1TCP::\s0Client, and Net::Telnet modules (available from
\s-1CPAN\s0).  http://www.perl.com/\s-1CPAN/\s0scripts/netstuff/telnet.emul.shar
will also help for emulating the telnet protocol, but Net::Telnet is
quite probably easier to use..
.PP
If all you want to do is pretend to be telnet but don't need
the initial telnet handshaking, then the standard dual-process
approach will suffice:
.PP
.Vb 12
\&    use IO::Socket;             # new in 5.004
\&    $handle = IO::Socket::INET->new('www.perl.com:80')
\&            || die "can't connect to port 80 on www.perl.com: $!";
\&    $handle->autoflush(1);
\&    if (fork()) {               # XXX: undef means failure
\&        select($handle);
\&        print while <STDIN>;    # everything from stdin to socket
\&    } else {
\&        print while <$handle>;  # everything from socket to stdout
\&    }
\&    close $handle;
\&    exit;
.Ve
.Sh "How can I write expect in Perl?"
.IX Subsection "How can I write expect in Perl?"
Once upon a time, there was a library called chat2.pl (part of the
standard perl distribution), which never really got finished.  These
days, your best bet is to look at the Comm.pl library available from
\s-1CPAN\s0.
.Sh "Is there a way to hide perl's command line from programs such as \*(M"ps\*(S"?"
.IX Subsection "Is there a way to hide perl's command line from programs such as \*(M"ps\*(S"?"
First of all note that if you're doing this for security reasons (to
avoid people seeing passwords, for example) then you should rewrite
your program so that critical information is never given as an
argument.  Hiding the arguments won't make your program completely
secure.
.PP
To actually alter the visible command line, you can assign to the
variable \f(CW$0\fR as documented in the \fIperlvar\fR manpage.  This won't work on all
operating systems, though.  Daemon programs like sendmail place their
state there, as in:
.PP
.Vb 1
\&    $0 = "orcus [accepting connections]";
.Ve
.Sh "I {changed directory, modified my environment} in a perl script.  How come the change disappeared when I exited the script?  How do I get my changes to be visible?"
.IX Subsection "I {changed directory, modified my environment} in a perl script.  How come the change disappeared when I exited the script?  How do I get my changes to be visible?"
.Ip "Unix" 4
.IX Item "Unix"
In the strictest sense, it can't be done -- the script executes as a
different process from the shell it was started from.  Changes to a
process are not reflected in its parent, only in its own children
created after the change.  There is shell magic that may allow you to
fake it by \fIeval()\fRing the script's output in your shell; check out the
comp.unix.questions \s-1FAQ\s0 for details.
.Ip "\s-1VMS\s0" 4
.IX Item "\s-1VMS\s0"
Change to \f(CW%ENV\fR persist after Perl exits, but directory changes do not.
.Sh "How do I close a process's filehandle without waiting for it to complete?"
.IX Subsection "How do I close a process's filehandle without waiting for it to complete?"
Assuming your system supports such things, just send an appropriate signal
to the process (see the section on \fIkill\fR in the \fIperlfunc\fR manpage.  It's common to first send a \s-1TERM\s0
signal, wait a little bit, and then send a \s-1KILL\s0 signal to finish it off.
.Sh "How do I fork a daemon process?"
.IX Subsection "How do I fork a daemon process?"
If by daemon process you mean one that's detached (disassociated from
its tty), then the following process is reported to work on most
Unixish systems.  Non-Unix users should check their Your_OS::Process
module for other solutions.
.Ip "\(bu" 4
.IX Item "\(bu"
Open /dev/tty and use the the \s-1TIOCNOTTY\s0 ioctl on it.  See the \fItty(4)\fR manpage
for details.
.Ip "\(bu" 4
.IX Item "\(bu"
Change directory to /
.Ip "\(bu" 4
.IX Item "\(bu"
Reopen \s-1STDIN\s0, \s-1STDOUT\s0, and \s-1STDERR\s0 so they're not connected to the old
tty.
.Ip "\(bu" 4
.IX Item "\(bu"
Background yourself like this:
.Sp
.Vb 1
\&    fork && exit;
.Ve
.Sh "How do I make my program run with sh and csh?"
.IX Subsection "How do I make my program run with sh and csh?"
See the \fIeg/nih\fR script (part of the perl source distribution).
.Sh "How do I find out if I'm running interactively or not?"
.IX Subsection "How do I find out if I'm running interactively or not?"
Good question.  Sometimes \f(CW-t STDIN\fR and \f(CW-t STDOUT\fR can give clues,
sometimes not.
.PP
.Vb 3
\&    if (-t STDIN && -t STDOUT) {
\&        print "Now what? ";
\&    }
.Ve
On \s-1POSIX\s0 systems, you can test whether your own process group matches
the current process group of your controlling terminal as follows:
.PP
.Vb 9
\&    use POSIX qw/getpgrp tcgetpgrp/;
\&    open(TTY, "/dev/tty") or die $!;
\&    $tpgrp = tcgetpgrp(TTY);
\&    $pgrp = getpgrp();
\&    if ($tpgrp == $pgrp) {
\&        print "foreground\en";
\&    } else {
\&        print "background\en";
\&    }
.Ve
.Sh "How do I timeout a slow event?"
.IX Subsection "How do I timeout a slow event?"
Use the \fIalarm()\fR function, probably in conjunction with a signal
handler, as documented the section on \fISignals\fR in the \fIperlipc\fR manpage and chapter 6 of the
Camel.  You may instead use the more flexible Sys::AlarmCall module
available from \s-1CPAN\s0.
.Sh "How do I set \s-1CPU\s0 limits?"
.IX Subsection "How do I set \s-1CPU\s0 limits?"
Use the \s-1BSD::\s0Resource module from \s-1CPAN\s0.
.Sh "How do I avoid zombies on a Unix system?"
.IX Subsection "How do I avoid zombies on a Unix system?"
Use the reaper code from the section on \fISignals\fR in the \fIperlipc\fR manpage to call \fIwait()\fR when a
\s-1SIGCHLD\s0 is received, or else use the double-fork technique described
in the \f(CWfork\fR entry in the \fIperlfunc\fR manpage.
.Sh "How do I use an \s-1SQL\s0 database?"
.IX Subsection "How do I use an \s-1SQL\s0 database?"
There are a number of excellent interfaces to \s-1SQL\s0 databases.  See the
\s-1DBD\s0::* modules available from
http://www.perl.com/\s-1CPAN/\s0modules/dbperl/\s-1DBD\s0 .
.Sh "How do I make a \fIsystem()\fR exit on control-C?"
.IX Subsection "How do I make a \fIsystem()\fR exit on control-C?"
You can't.  You need to imitate the \fIsystem()\fR call (see the \fIperlipc\fR manpage for
sample code) and then have a signal handler for the \s-1INT\s0 signal that
passes the signal on to the subprocess.
.Sh "How do I open a file without blocking?"
.IX Subsection "How do I open a file without blocking?"
If you're lucky enough to be using a system that supports
non-blocking reads (most Unixish systems do), you need only to use the
O_NDELAY or O_NONBLOCK flag from the Fcntl module in conjunction with
\fIsysopen()\fR:
.PP
.Vb 3
\&    use Fcntl;
\&    sysopen(FH, "/tmp/somefile", O_WRONLY|O_NDELAY|O_CREAT, 0644)
\&        or die "can't open /tmp/somefile: $!":
.Ve
.Sh "How do I install a \s-1CPAN\s0 module?"
.IX Subsection "How do I install a \s-1CPAN\s0 module?"
The easiest way is to have the \s-1CPAN\s0 module do it for you.  This module
comes with perl version 5.004 and later.  To manually install the \s-1CPAN\s0
module, or any well-behaved \s-1CPAN\s0 module for that matter, follow these
steps:
.Ip "1" 4
.IX Item "1"
Unpack the source into a temporary area.
.Ip "2" 4
.IX Item "2"
.Sp
.Vb 1
\&    perl Makefile.PL
.Ve
.Ip "3" 4
.IX Item "3"
.Sp
.Vb 1
\&    make
.Ve
.Ip "4" 4
.IX Item "4"
.Sp
.Vb 1
\&    make test
.Ve
.Ip "5" 4
.IX Item "5"
.Sp
.Vb 1
\&    make install
.Ve
.PP
If your version of perl is compiled without dynamic loading, then you
just need to replace step 3 (\fBmake\fR) with \fBmake perl\fR and you will
get a new \fIperl\fR binary with your extension linked in.
.PP
See the \fIExtUtils::MakeMaker\fR manpage for more details on building extensions,
the question \*(L"How do I keep my own module/library directory?\*(R"
.Sh "How do I keep my own module/library directory?"
.IX Subsection "How do I keep my own module/library directory?"
When you build modules, use the \s-1PREFIX\s0 option when generating
Makefiles:
.PP
.Vb 1
\&    perl Makefile.PL PREFIX=/u/mydir/perl
.Ve
then either set the \s-1PERL5LIB\s0 environment variable before you run
scripts that use the modules/libraries (see the \fIperlrun\fR manpage) or say
.PP
.Vb 1
\&    use lib '/u/mydir/perl';
.Ve
See Perl's the \fIlib\fR manpage for more information.
.Sh "How do I add the directory my program lives in to the module/library search path?"
.IX Subsection "How do I add the directory my program lives in to the module/library search path?"
.PP
.Vb 3
\&    use FindBin;
\&    use lib "$FindBin:Bin";
\&    use your_own_modules;
.Ve
.Sh "How do I add a directory to my include path at runtime?"
.IX Subsection "How do I add a directory to my include path at runtime?"
Here are the suggested ways of modifying your include path:
.PP
.Vb 5
\&    the PERLLIB environment variable
\&    the PERL5LIB environment variable
\&    the perl -Idir commpand line flag
\&    the use lib pragma, as in
\&        use lib "$ENV{HOME}/myown_perllib";
.Ve
The latter is particularly useful because it knows about machine
dependent architectures.  The lib.pm pragmatic module was first
included with the 5.002 release of Perl.
.SH "How do I get one key from the terminal at a time, under POSIX?"
.IX Header "How do I get one key from the terminal at a time, under POSIX?"
.PP
.Vb 10
\&    #!/usr/bin/perl -w
\&    use strict;
\&    $| = 1;
\&    for (1..4) {
\&        my $got;
\&        print "gimme: ";
\&        $got = getone();
\&        print "--> $got\en";
\&    }
\&    exit;
.Ve
.Vb 2
\&    BEGIN {
\&        use POSIX qw(:termios_h);
.Ve
.Vb 1
\&        my ($term, $oterm, $echo, $noecho, $fd_stdin);
.Ve
.Vb 1
\&        $fd_stdin = fileno(STDIN);
.Ve
.Vb 3
\&        $term     = POSIX::Termios->new();
\&        $term->getattr($fd_stdin);
\&        $oterm     = $term->getlflag();
.Ve
.Vb 2
\&        $echo     = ECHO | ECHOK | ICANON;
\&        $noecho   = $oterm & ~$echo;
.Ve
.Vb 5
\&        sub cbreak {
\&            $term->setlflag($noecho);
\&            $term->setcc(VTIME, 1);
\&            $term->setattr($fd_stdin, TCSANOW);
\&        }
.Ve
.Vb 5
\&        sub cooked {
\&            $term->setlflag($oterm);
\&            $term->setcc(VTIME, 0);
\&            $term->setattr($fd_stdin, TCSANOW);
\&        }
.Ve
.Vb 7
\&        sub getone {
\&            my $key = '';
\&            cbreak();
\&            sysread(STDIN, $key, 1);
\&            cooked();
\&            return $key;
\&        }
.Ve
.Vb 2
\&    }
\&    END { cooked() }
.Ve
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See the \fIperlfaq\fR manpage for distribution information.

.rn }` ''
