.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLSYN 1 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perlsyn \- Perl syntax
.SH "DESCRIPTION"
A Perl script consists of a sequence of declarations and statements.
The only things that need to be declared in Perl are report formats
and subroutines.  See the sections below for more information on those
declarations.  All uninitialized user-created objects are assumed to
start with a null or 0 value until they are defined by some explicit
operation such as assignment.  (Though you can get warnings about the
use of undefined values if you like.)  The sequence of statements is
executed just once, unlike in \fBsed\fR and \fBawk\fR scripts, where the
sequence of statements is executed for each input line.  While this means
that you must explicitly loop over the lines of your input file (or
files), it also means you have much more control over which files and
which lines you look at.  (Actually, I'm lying\*(--it is possible to do an
implicit loop with either the \fB\-n\fR or \fB\-p\fR switch.  It's just not the
mandatory default like it is in \fBsed\fR and \fBawk\fR.)
.Sh "Declarations"
Perl is, for the most part, a free-form language.  (The only
exception to this is format declarations, for obvious reasons.) Comments
are indicated by the \*(L"#\*(R" character, and extend to the end of the line.  If
you attempt to use \f(CW/* */\fR C\-style comments, it will be interpreted
either as division or pattern matching, depending on the context, and \*(C+
\f(CW//\fR comments just look like a null regular expression, so don't do
that.
.PP
A declaration can be put anywhere a statement can, but has no effect on
the execution of the primary sequence of statements\*(--declarations all
take effect at compile time.  Typically all the declarations are put at
the beginning or the end of the script.  However, if you're using
lexically-scoped private variables created with \fImy()\fR, you'll have to make sure
your format or subroutine definition is within the same block scope
as the my if you expect to be able to access those private variables.
.PP
Declaring a subroutine allows a subroutine name to be used as if it were a
list operator from that point forward in the program.  You can declare a
subroutine without defining it by saying \f(CWsub name\fR, thus:
.PP
.Vb 2
\&    sub myname;
\&    $me = myname $0             or die "can't get myname";
.Ve
Note that it functions as a list operator, not as a unary operator; so
be careful to use \f(CWor\fR instead of \f(CW||\fR in this case.  However, if
you were to declare the subroutine as \f(CWsub myname ($)\fR, then
\f(CWmyname\fR would functonion as a unary operator, so either \f(CWor\fR or
\f(CW||\fR would work.
.PP
Subroutines declarations can also be loaded up with the \f(CWrequire\fR statement
or both loaded and imported into your namespace with a \f(CWuse\fR statement.
See the \fIperlmod\fR manpage for details on this.
.PP
A statement sequence may contain declarations of lexically-scoped
variables, but apart from declaring a variable name, the declaration acts
like an ordinary statement, and is elaborated within the sequence of
statements as if it were an ordinary statement.  That means it actually
has both compile-time and run-time effects.
.Sh "Simple statements"
The only kind of simple statement is an expression evaluated for its
side effects.  Every simple statement must be terminated with a
semicolon, unless it is the final statement in a block, in which case
the semicolon is optional.  (A semicolon is still encouraged there if the
block takes up more than one line, because you may eventually add another line.)
Note that there are some operators like \f(CWeval {}\fR and \f(CWdo {}\fR that look
like compound statements, but aren't (they're just TERMs in an expression),
and thus need an explicit termination if used as the last item in a statement.
.PP
Any simple statement may optionally be followed by a \fI\s-1SINGLE\s0\fR modifier,
just before the terminating semicolon (or block ending).  The possible
modifiers are:
.PP
.Vb 4
\&    if EXPR
\&    unless EXPR
\&    while EXPR
\&    until EXPR
.Ve
The \f(CWif\fR and \f(CWunless\fR modifiers have the expected semantics,
presuming you're a speaker of English.  The \f(CWwhile\fR and \f(CWuntil\fR
modifiers also have the usual \*(L"while loop\*(R" semantics (conditional
evaluated first), except when applied to a do-\s-1BLOCK\s0 (or to the
now-deprecated do-\s-1SUBROUTINE\s0 statement), in which case the block
executes once before the conditional is evaluated.  This is so that you
can write loops like:
.PP
.Vb 4
\&    do {
\&        $line = <STDIN>;
\&        ...
\&    } until $line  eq ".\en";
.Ve
See the \f(CWdo\fR entry in the \fIperlfunc\fR manpage.  Note also that the loop control
statements described later will \fI\s-1NOT\s0\fR work in this construct, because
modifiers don't take loop labels.  Sorry.  You can always wrap
another block around it to do that sort of thing.
.Sh "Compound statements"
In Perl, a sequence of statements that defines a scope is called a block.
Sometimes a block is delimited by the file containing it (in the case
of a required file, or the program as a whole), and sometimes a block
is delimited by the extent of a string (in the case of an eval).
.PP
But generally, a block is delimited by curly brackets, also known as braces.
We will call this syntactic construct a \s-1BLOCK\s0.
.PP
The following compound statements may be used to control flow:
.PP
.Vb 8
\&    if (EXPR) BLOCK
\&    if (EXPR) BLOCK else BLOCK
\&    if (EXPR) BLOCK elsif (EXPR) BLOCK ... else BLOCK
\&    LABEL while (EXPR) BLOCK
\&    LABEL while (EXPR) BLOCK continue BLOCK
\&    LABEL for (EXPR; EXPR; EXPR) BLOCK
\&    LABEL foreach VAR (LIST) BLOCK
\&    LABEL BLOCK continue BLOCK
.Ve
Note that, unlike C and Pascal, these are defined in terms of BLOCKs,
not statements.  This means that the curly brackets are \fIrequired\fR--no
dangling statements allowed.  If you want to write conditionals without
curly brackets there are several other ways to do it.  The following
all do the same thing:
.PP
.Vb 5
\&    if (!open(FOO)) { die "Can't open $FOO: $!"; }
\&    die "Can't open $FOO: $!" unless open(FOO);
\&    open(FOO) or die "Can't open $FOO: $!";     # FOO or bust!
\&    open(FOO) ? 'hi mom' : die "Can't open $FOO: $!";
\&                        # a bit exotic, that last one
.Ve
The \f(CWif\fR statement is straightforward.  Because BLOCKs are always
bounded by curly brackets, there is never any ambiguity about which
\f(CWif\fR an \f(CWelse\fR goes with.  If you use \f(CWunless\fR in place of \f(CWif\fR,
the sense of the test is reversed.
.PP
The \f(CWwhile\fR statement executes the block as long as the expression is
true (does not evaluate to the null string or 0 or \*(L"0").  The \s-1LABEL\s0 is
optional, and if present, consists of an identifier followed by a colon.
The \s-1LABEL\s0 identifies the loop for the loop control statements \f(CWnext\fR,
\f(CWlast\fR, and \f(CWredo\fR.  If the \s-1LABEL\s0 is omitted, the loop control statement
refers to the innermost enclosing loop.  This may include dynamically
looking back your call-stack at run time to find the \s-1LABEL\s0.  Such
desperate behavior triggers a warning if you use the \fB\-w\fR flag.
.PP
If there is a \f(CWcontinue\fR \s-1BLOCK\s0, it is always executed just before the
conditional is about to be evaluated again, just like the third part of a
\f(CWfor\fR loop in C.  Thus it can be used to increment a loop variable, even
when the loop has been continued via the \f(CWnext\fR statement (which is
similar to the C \f(CWcontinue\fR statement).
.Sh "Loop Control"
The \f(CWnext\fR command is like the \f(CWcontinue\fR statement in C; it starts
the next iteration of the loop:
.PP
.Vb 4
\&    LINE: while (<STDIN>) {
\&        next LINE if /^#/;      # discard comments
\&        ...
\&    }
.Ve
The \f(CWlast\fR command is like the \f(CWbreak\fR statement in C (as used in
loops); it immediately exits the loop in question.  The
\f(CWcontinue\fR block, if any, is not executed:
.PP
.Vb 4
\&    LINE: while (<STDIN>) {
\&        last LINE if /^$/;      # exit when done with header
\&        ...
\&    }
.Ve
The \f(CWredo\fR command restarts the loop block without evaluating the
conditional again.  The \f(CWcontinue\fR block, if any, is \fInot\fR executed.
This command is normally used by programs that want to lie to themselves
about what was just input.
.PP
For example, when processing a file like \fI/etc/termcap\fR.
If your input lines might end in backslashes to indicate continuation, you
want to skip ahead and get the next record.
.PP
.Vb 8
\&    while (<>) {
\&        chomp;
\&        if (s/\e\e$//) {
\&            $_ .= <>;
\&            redo unless eof();
\&        }
\&        # now process $_
\&    }
.Ve
which is Perl short-hand for the more explicitly written version:
.PP
.Vb 8
\&    LINE: while (defined($line = <ARGV>)) {
\&        chomp($line);
\&        if ($line =~ s/\e\e$//) {
\&            $line .= <ARGV>;
\&            redo LINE unless eof(); # not eof(ARGV)!
\&        }
\&        # now process $line
\&    }
.Ve
Or here's a simpleminded Pascal comment stripper (warning: assumes no
{ or } in strings).
.PP
.Vb 14
\&    LINE: while (<STDIN>) {
\&        while (s|({.*}.*){.*}|$1 |) {}
\&        s|{.*}| |;
\&        if (s|{.*| |) {
\&            $front = $_;
\&            while (<STDIN>) {
\&                if (/}/) {      # end of comment?
\&                    s|^|$front{|;
\&                    redo LINE;
\&                }
\&            }
\&        }
\&        print;
\&    }
.Ve
Note that if there were a \f(CWcontinue\fR block on the above code, it would get
executed even on discarded lines.
.PP
If the word \f(CWwhile\fR is replaced by the word \f(CWuntil\fR, the sense of the
test is reversed, but the conditional is still tested before the first
iteration.
.PP
The form \f(CWwhile/if BLOCK BLOCK\fR, available in Perl 4, is no longer
available.   Replace any occurrence of \f(CWif BLOCK\fR by \f(CWif (do BLOCK)\fR.
.Sh "For Loops"
Perl's C\-style \f(CWfor\fR loop works exactly like the corresponding \f(CWwhile\fR loop;
that means that this:
.PP
.Vb 3
\&    for ($i = 1; $i < 10; $i++) {
\&        ...
\&    }
.Ve
is the same as this:
.PP
.Vb 6
\&    $i = 1;
\&    while ($i < 10) {
\&        ...
\&    } continue {
\&        $i++;
\&    }
.Ve
(There is one minor difference: The first form implies a lexical scope
for variables declared with \f(CWmy\fR in the initialization expression.)
.PP
Besides the normal array index looping, \f(CWfor\fR can lend itself
to many other interesting applications.  Here's one that avoids the
problem you get into if you explicitly test for end-of-file on
an interactive file descriptor causing your program to appear to
hang.
.PP
.Vb 5
\&    $on_a_tty = -t STDIN && -t STDOUT;
\&    sub prompt { print "yes? " if $on_a_tty }
\&    for ( prompt(); <STDIN>; prompt() ) {
\&        # do something
\&    }
.Ve
.Sh "Foreach Loops"
The \f(CWforeach\fR loop iterates over a normal list value and sets the
variable \s-1VAR\s0 to be each element of the list in turn.  If the variable
is preceded with the keyword \f(CWmy\fR, then it is lexically scoped, and
is therefore visible only within the loop.  Otherwise, the variable is
implicitly local to the loop and regains its former value upon exiting
the loop.  If the variable was previously declared with \f(CWmy\fR, it uses
that variable instead of the global one, but it's still localized to
the loop.  (Note that a lexically scoped variable can cause problems
with you have subroutine or format declarations.)
.PP
The \f(CWforeach\fR keyword is actually a synonym for the \f(CWfor\fR keyword, so
you can use \f(CWforeach\fR for readability or \f(CWfor\fR for brevity.  If \s-1VAR\s0 is
omitted, \f(CW$_\fR is set to each value.  If \s-1LIST\s0 is an actual array (as opposed
to an expression returning a list value), you can modify each element of
the array by modifying \s-1VAR\s0 inside the loop.  That's because the \f(CWforeach\fR
loop index variable is an implicit alias for each item in the list that
you're looping over.
.PP
Examples:
.PP
.Vb 1
\&    for (@ary) { s/foo/bar/ }
.Ve
.Vb 3
\&    foreach my $elem (@elements) {
\&        $elem *= 2;
\&    }
.Ve
.Vb 3
\&    for $count (10,9,8,7,6,5,4,3,2,1,'BOOM') {
\&        print $count, "\en"; sleep(1);
\&    }
.Ve
.Vb 1
\&    for (1..15) { print "Merry Christmas\en"; }
.Ve
.Vb 3
\&    foreach $item (split(/:[\e\e\en:]*/, $ENV{TERMCAP})) {
\&        print "Item: $item\en";
\&    }
.Ve
Here's how a C programmer might code up a particular algorithm in Perl:
.PP
.Vb 9
\&    for (my $i = 0; $i < @ary1; $i++) {
\&        for (my $j = 0; $j < @ary2; $j++) {
\&            if ($ary1[$i] > $ary2[$j]) {
\&                last; # can't go to outer :-(
\&            }
\&            $ary1[$i] += $ary2[$j];
\&        }
\&        # this is where that last takes me
\&    }
.Ve
Whereas here's how a Perl programmer more comfortable with the idiom might
do it:
.PP
.Vb 6
\&    OUTER: foreach my $wid (@ary1) {
\&    INNER:   foreach my $jet (@ary2) {
\&                next OUTER if $wid > $jet;
\&                $wid += $jet;
\&             }
\&          }
.Ve
See how much easier this is?  It's cleaner, safer, and faster.  It's
cleaner because it's less noisy.  It's safer because if code gets added
between the inner and outer loops later on, the new code won't be
accidentally executed.  The \f(CWnext\fR explicitly iterates the other loop
rather than merely terminating the inner one.  And it's faster because
Perl executes a \f(CWforeach\fR statement more rapidly than it would the
equivalent \f(CWfor\fR loop.
.Sh "Basic BLOCKs and Switch Statements"
A \s-1BLOCK\s0 by itself (labeled or not) is semantically equivalent to a
loop that executes once.  Thus you can use any of the loop control
statements in it to leave or restart the block.  (Note that this is
\fI\s-1NOT\s0\fR true in \f(CWeval{}\fR, \f(CWsub{}\fR, or contrary to popular belief
\f(CWdo{}\fR blocks, which do \fI\s-1NOT\s0\fR count as loops.)  The \f(CWcontinue\fR
block is optional.
.PP
The \s-1BLOCK\s0 construct is particularly nice for doing case
structures.
.PP
.Vb 6
\&    SWITCH: {
\&        if (/^abc/) { $abc = 1; last SWITCH; }
\&        if (/^def/) { $def = 1; last SWITCH; }
\&        if (/^xyz/) { $xyz = 1; last SWITCH; }
\&        $nothing = 1;
\&    }
.Ve
There is no official switch statement in Perl, because there are
already several ways to write the equivalent.  In addition to the
above, you could write
.PP
.Vb 6
\&    SWITCH: {
\&        $abc = 1, last SWITCH  if /^abc/;
\&        $def = 1, last SWITCH  if /^def/;
\&        $xyz = 1, last SWITCH  if /^xyz/;
\&        $nothing = 1;
\&    }
.Ve
(That's actually not as strange as it looks once you realize that you can
use loop control \*(L"operators\*(R" within an expression,  That's just the normal
C comma operator.)
.PP
or
.PP
.Vb 6
\&    SWITCH: {
\&        /^abc/ && do { $abc = 1; last SWITCH; };
\&        /^def/ && do { $def = 1; last SWITCH; };
\&        /^xyz/ && do { $xyz = 1; last SWITCH; };
\&        $nothing = 1;
\&    }
.Ve
or formatted so it stands out more as a \*(L"proper\*(R" switch statement:
.PP
.Vb 5
\&    SWITCH: {
\&        /^abc/      && do {
\&                            $abc = 1;
\&                            last SWITCH;
\&                       };
.Ve
.Vb 4
\&        /^def/      && do {
\&                            $def = 1;
\&                            last SWITCH;
\&                       };
.Ve
.Vb 6
\&        /^xyz/      && do {
\&                            $xyz = 1;
\&                            last SWITCH;
\&                        };
\&        $nothing = 1;
\&    }
.Ve
or
.PP
.Vb 6
\&    SWITCH: {
\&        /^abc/ and $abc = 1, last SWITCH;
\&        /^def/ and $def = 1, last SWITCH;
\&        /^xyz/ and $xyz = 1, last SWITCH;
\&        $nothing = 1;
\&    }
.Ve
or even, horrors,
.PP
.Vb 8
\&    if (/^abc/)
\&        { $abc = 1 }
\&    elsif (/^def/)
\&        { $def = 1 }
\&    elsif (/^xyz/)
\&        { $xyz = 1 }
\&    else
\&        { $nothing = 1 }
.Ve
A common idiom for a switch statement is to use \f(CWforeach\fR's aliasing to make
a temporary assignment to \f(CW$_\fR for convenient matching:
.PP
.Vb 6
\&    SWITCH: for ($where) {
\&                /In Card Names/     && do { push @flags, '-e'; last; };
\&                /Anywhere/          && do { push @flags, '-h'; last; };
\&                /In Rulings/        && do {                    last; };
\&                die "unknown value for form variable where: `$where'";
\&            }
.Ve
Another interesting approach to a switch statement is arrange
for a \f(CWdo\fR block to return the proper value:
.PP
.Vb 8
\&    $amode = do {
\&        if     ($flag & O_RDONLY) { "r" }
\&        elsif  ($flag & O_WRONLY) { ($flag & O_APPEND) ? "a" : "w" }
\&        elsif  ($flag & O_RDWR)   {
\&            if ($flag & O_CREAT)  { "w+" }
\&            else                  { ($flag & O_APPEND) ? "a+" : "r+" }
\&        }
\&    };
.Ve
.Sh "Goto"
Although not for the faint of heart, Perl does support a \f(CWgoto\fR statement.
A loop's \s-1LABEL\s0 is not actually a valid target for a \f(CWgoto\fR;
it's just the name of the loop.  There are three forms: goto-\s-1LABEL\s0,
goto-\s-1EXPR\s0, and goto-&\s-1NAME\s0.
.PP
The goto-\s-1LABEL\s0 form finds the statement labeled with \s-1LABEL\s0 and resumes
execution there.  It may not be used to go into any construct that
requires initialization, such as a subroutine or a foreach loop.  It
also can't be used to go into a construct that is optimized away.  It
can be used to go almost anywhere else within the dynamic scope,
including out of subroutines, but it's usually better to use some other
construct such as last or die.  The author of Perl has never felt the
need to use this form of goto (in Perl, that is\*(--C is another matter).
.PP
The goto-\s-1EXPR\s0 form expects a label name, whose scope will be resolved
dynamically.  This allows for computed gotos per \s-1FORTRAN\s0, but isn't
necessarily recommended if you're optimizing for maintainability:
.PP
.Vb 1
\&    goto ("FOO", "BAR", "GLARCH")[$i];
.Ve
The goto-&\s-1NAME\s0 form is highly magical, and substitutes a call to the
named subroutine for the currently running subroutine.  This is used by
\fI\s-1AUTOLOAD\s0()\fR subroutines that wish to load another subroutine and then
pretend that the other subroutine had been called in the first place
(except that any modifications to \f(CW@_\fR in the current subroutine are
propagated to the other subroutine.)  After the \f(CWgoto\fR, not even \fIcaller()\fR
will be able to tell that this routine was called first.
.PP
In almost all cases like this, it's usually a far, far better idea to use the
structured control flow mechanisms of \f(CWnext\fR, \f(CWlast\fR, or \f(CWredo\fR instead of
resorting to a \f(CWgoto\fR.  For certain applications, the catch and throw pair of
\f(CWeval{}\fR and \fIdie()\fR for exception processing can also be a prudent approach.
.Sh "PODs: Embedded Documentation"
Perl has a mechanism for intermixing documentation with source code.
While it's expecting the beginning of a new statement, if the compiler
encounters a line that begins with an equal sign and a word, like this
.PP
.Vb 1
\&    =head1 Here There Be Pods!
.Ve
Then that text and all remaining text up through and including a line
beginning with \f(CW=cut\fR will be ignored.  The format of the intervening
text is described in the \fIperlpod\fR manpage.
.PP
This allows you to intermix your source code
and your documentation text freely, as in
.PP
.Vb 1
\&    =item snazzle($)
.Ve
.Vb 3
\&    The snazzle() function will behave in the most spectacular
\&    form that you can possibly imagine, not even excepting
\&    cybernetic pyrotechnics.
.Ve
.Vb 1
\&    =cut back to the compiler, nuff of this pod stuff!
.Ve
.Vb 4
\&    sub snazzle($) {
\&        my $thingie = shift;
\&        .........
\&    }
.Ve
Note that pod translators should look at only paragraphs beginning
with a pod directive (it makes parsing easier), whereas the compiler
actually knows to look for pod escapes even in the middle of a
paragraph.  This means that the following secret stuff will be
ignored by both the compiler and the translators.
.PP
.Vb 5
\&    $a=3;
\&    =secret stuff
\&     warn "Neither POD nor CODE!?"
\&    =cut back
\&    print "got $a\en";
.Ve
You probably shouldn't rely upon the \fIwarn()\fR being podded out forever.
Not all pod translators are well-behaved in this regard, and perhaps
the compiler will become pickier.
.PP
One may also use pod directives to quickly comment out a section
of code.
.Sh "Plain Old Comments (Not!)"
Much like the C preprocessor, perl can process line directives.  Using
this, one can control perl's idea of filenames and line numbers in
error or warning messages (especially for strings that are processed
with \fIeval()\fR).  The syntax for this mechanism is the same as for most
C preprocessors: it matches the regular expression
\f(CW/^#\es*line\es+(\ed+)\es*(?:\es"([^"]*)")?/\fR with \f(CW$1\fR being the line
number for the next line, and \f(CW$2\fR being the optional filename
(specified within quotes).
.PP
Here are some examples that you should be able to type into your command
shell:
.PP
.Vb 6
\&    % perl
\&    # line 200 "bzzzt"
\&    # the `#' on the previous line must be the first char on line
\&    die 'foo';
\&    __END__
\&    foo at bzzzt line 201.
.Ve
.Vb 5
\&    % perl
\&    # line 200 "bzzzt"
\&    eval qq[\en#line 2001 ""\endie 'foo']; print $@;
\&    __END__
\&    foo at - line 2001.
.Ve
.Vb 4
\&    % perl
\&    eval qq[\en#line 200 "foo bar"\endie 'foo']; print $@;
\&    __END__
\&    foo at foo bar line 200.
.Ve
.Vb 6
\&    % perl
\&    # line 345 "goop"
\&    eval "\en#line " . __LINE__ . ' "' . __FILE__ ."\e"\endie 'foo'";
\&    print $@;
\&    __END__
\&    foo at goop line 345.
.Ve

.rn }` ''
.IX Title "PERLSYN 1"
.IX Name "perlsyn - Perl syntax"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Subsection "Declarations"

.IX Subsection "Simple statements"

.IX Subsection "Compound statements"

.IX Subsection "Loop Control"

.IX Subsection "For Loops"

.IX Subsection "Foreach Loops"

.IX Subsection "Basic BLOCKs and Switch Statements"

.IX Subsection "Goto"

.IX Subsection "PODs: Embedded Documentation"

.IX Subsection "Plain Old Comments (Not!)"

