.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH YAPP 1 "perl 5.007, patch 00" "11/Feb/101" "User Contributed Perl Documentation"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
yapp \- A perl frontend to the Parse::Yapp module
.SH "SYNOPSYS"
yapp [options] \fIgrammar\fR[.yp]
.PP
yapp \fI\-V\fR
.PP
yapp \fI\-h\fR
.SH "DESCRIPTION"
yapp is a frontend to the Parse::Yapp module, which lets you compile
Parse::Yapp grammar input files into Perl \fILALR\fR\|(1) OO parser modules.
.SH "OPTIONS"
Options, as of today, are all optionals :\-)
.Ip "\fI\-v\fR" 4
Creates a file \fIgrammar\fR.output describing your parser. It will
show you a summary of conflicts, rules, the \s-1DFA\s0 (Deterministic
Finite Automaton) states and overall usage of the parser.
.Ip "\fI\-s\fR" 4
Create a standalone module in which the driver is included.
Note that if you have more than one parser module called from
a program, to have it standalone, you need this option only
for one of your parser module.
.Ip "\fI\-n\fR" 4
Disable source file line numbering embedded in your parser module.
I don't know why one should need it, but it's there.
.Ip "\fI\-m module\fR" 4
Gives your parser module the package name (or name space or module name or
class name or whatever-you-call-it) of \fImodule\fR.  It defaults to \fIgrammar\fR
.Ip "\fI\-o outfile\fR" 4
The compiled output file will be named \fIoutfile\fR for your parser module.
It defaults to \fIgrammar\fR.pm or, if you specified the option
\fI\-m A::Module::Name\fR (see below), to \fIName.pm\fR.
.Ip "\fI\-t filename\fR" 4
The \fI\-t filename\fR option allows you to specify a file which should be 
used as template for generating the parser output.  The default is to 
use the internal template defined in \fIParse::Yapp::Output.pm\fR.
For how to write your own template and which substitutions are available,
have a look to the module \fIParse::Yapp::Output.pm\fR : it should be obvious. 
.Ip "\fI\-b shebang\fR" 4
If you work on systems that understand so called \fIshebangs\fR, and your
generated parser is directly an executable script, you can specifie one
with the \fI\-b\fR option, ie:
.Sp
.Vb 1
\&    yapp -b '/usr/local/bin/perl -w' -o myscript.pl myscript.yp
.Ve
This will output a file called \fImyscript.pl\fR whose very first line is:
.Sp
.Vb 1
\&    #!/usr/local/bin/perl -w
.Ve
The argument is mandatory, but if you specify an empty string, the value
of \fI$Config{perlpath}\fR will be used instead.
.Ip "\fIgrammar\fR" 4
The input grammar file. If no suffix is given, and the file does not exists,
an attempt to open the file with a suffix of  \fI.yp\fR is tried before exiting.
.Ip "\fI\-V\fR" 4
Display current version of Parse::Yapp and gracefully exits.
.Ip "\fI\-h\fR" 4
Display the usage screen.
.SH "BUGS"
None known now :\-)
.SH "AUTHOR"
Francois Desarmenien <francois@fdesar.net>
.SH "COPYRIGHT"
(c) Copyright 1998-1999 Francois Desarmenien, all rights reserved.
See \fIParse::Yapp\fR\|(3) for legal use and distribution rights
.SH "SEE ALSO"
\fIParse::Yapp\fR\|(3) \fIPerl\fR\|(1) \fIyacc\fR\|(1) \fIbison\fR\|(1)

.rn }` ''
.IX Title "YAPP 1"
.IX Name "yapp - A perl frontend to the Parse::Yapp module"

.IX Header "NAME"

.IX Header "SYNOPSYS"

.IX Header "DESCRIPTION"

.IX Header "OPTIONS"

.IX Item "\fI\-v\fR"

.IX Item "\fI\-s\fR"

.IX Item "\fI\-n\fR"

.IX Item "\fI\-m module\fR"

.IX Item "\fI\-o outfile\fR"

.IX Item "\fI\-t filename\fR"

.IX Item "\fI\-b shebang\fR"

.IX Item "\fIgrammar\fR"

.IX Item "\fI\-V\fR"

.IX Item "\fI\-h\fR"

.IX Header "BUGS"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

.IX Header "SEE ALSO"

