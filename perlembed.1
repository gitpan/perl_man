.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLEMBED 1 "perl 5.005, patch 53" "8/Aug/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perlembed \- how to embed perl in your C program
.SH "DESCRIPTION"
.Sh "\s-1PREAMBLE\s0"
Do you want to:
.Ip "\fBUse C from Perl?\fR" 5
Read the \fIperlxstut\fR manpage, the \fIperlxs\fR manpage, the \fIh2xs\fR manpage, and the \fIperlguts\fR manpage.
.Ip "\fBUse a Unix program from Perl?\fR" 5
Read about back-quotes and about \f(CWsystem\fR and \f(CWexec\fR in the \fIperlfunc\fR manpage.
.Ip "\fBUse Perl from Perl?\fR" 5
Read about the \f(CWdo\fR entry in the \fIperlfunc\fR manpage and the \f(CWeval\fR entry in the \fIperlfunc\fR manpage and the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage 
and the \f(CWuse\fR entry in the \fIperlfunc\fR manpage.
.Ip "\fBUse C from C?\fR" 5
Rethink your design.
.Ip "\fBUse Perl from C?\fR" 5
Read on...
.Sh "\s-1ROADMAP\s0"
the section on \fICompiling your C program\fR
.Sp
the section on \fIAdding a Perl interpreter to your C program\fR
.Sp
the section on \fICalling a Perl subroutine from your C program\fR
.Sp
the section on \fIEvaluating a Perl statement from your C program\fR
.Sp
the section on \fIPerforming Perl pattern matches and substitutions from your C program\fR
.Sp
the section on \fIFiddling with the Perl stack from your C program\fR
.Sp
the section on \fIMaintaining a persistent interpreter\fR
.Sp
the section on \fIMaintaining multiple interpreter instances\fR
.Sp
the section on \fIUsing Perl modules, which themselves use C libraries, from your C program\fR
.Sp
the section on \fIEmbedding Perl under Win32\fR
.Sh "Compiling your C program"
If you have trouble compiling the scripts in this documentation,
you're not alone.  The cardinal rule: \s-1COMPILE\s0 \s-1THE\s0 \s-1PROGRAMS\s0 \s-1IN\s0 \s-1EXACTLY\s0
\s-1THE\s0 \s-1SAME\s0 \s-1WAY\s0 \s-1THAT\s0 \s-1YOUR\s0 \s-1PERL\s0 \s-1WAS\s0 \s-1COMPILED\s0.  (Sorry for yelling.)
.PP
Also, every C program that uses Perl must link in the \fIperl library\fR.
What's that, you ask?  Perl is itself written in C; the perl library
is the collection of compiled C programs that were used to create your
perl executable (\fI/usr/bin/perl\fR or equivalent).  (Corollary: you
can't use Perl from your C program unless Perl has been compiled on
your machine, or installed properly\*(--that's why you shouldn't blithely
copy Perl executables from machine to machine without also copying the
\fIlib\fR directory.)
.PP
When you use Perl from C, your C program will\*(--usually\*(--allocate,
\*(L"run\*(R", and deallocate a \fIPerlInterpreter\fR object, which is defined by
the perl library.
.PP
If your copy of Perl is recent enough to contain this documentation
(version 5.002 or later), then the perl library (and \fI\s-1EXTERN\s0.h\fR and
\fIperl.h\fR, which you'll also need) will reside in a directory
that looks like this:
.PP
.Vb 1
\&    /usr/local/lib/perl5/your_architecture_here/CORE
.Ve
or perhaps just
.PP
.Vb 1
\&    /usr/local/lib/perl5/CORE
.Ve
or maybe something like
.PP
.Vb 1
\&    /usr/opt/perl5/CORE
.Ve
Execute this statement for a hint about where to find \s-1CORE\s0:
.PP
.Vb 1
\&    perl -MConfig -e 'print $Config{archlib}'
.Ve
Here's how you'd compile the example in the next section,
the section on \fIAdding a Perl interpreter to your C program\fR, on my Linux box:
.PP
.Vb 4
\&    % gcc -O2 -Dbool=char -DHAS_BOOL -I/usr/local/include
\&    -I/usr/local/lib/perl5/i586-linux/5.003/CORE
\&    -L/usr/local/lib/perl5/i586-linux/5.003/CORE
\&    -o interp interp.c -lperl -lm
.Ve
(That's all one line.)  On my \s-1DEC\s0 Alpha running old 5.003_05, the 
incantation is a bit different:
.PP
.Vb 4
\&    % cc -O2 -Olimit 2900 -DSTANDARD_C -I/usr/local/include
\&    -I/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE
\&    -L/usr/local/lib/perl5/alpha-dec_osf/5.00305/CORE -L/usr/local/lib
\&    -D__LANGUAGE_C__ -D_NO_PROTO -o interp interp.c -lperl -lm
.Ve
How can you figure out what to add?  Assuming your Perl is post-5.001,
execute a \f(CWperl -V\fR command and pay special attention to the \*(L"cc\*(R" and
\*(L"ccflags\*(R" information.
.PP
You'll have to choose the appropriate compiler (\fIcc\fR, \fIgcc\fR, et al.) for
your machine: \f(CWperl -MConfig -e 'print $Config{cc}'\fR will tell you what
to use.
.PP
You'll also have to choose the appropriate library directory
(\fI/usr/local/lib/...\fR) for your machine.  If your compiler complains
that certain functions are undefined, or that it can't locate
\fI\-lperl\fR, then you need to change the path following the \f(CW-L\fR.  If it
complains that it can't find \fI\s-1EXTERN\s0.h\fR and \fIperl.h\fR, you need to
change the path following the \f(CW-I\fR.
.PP
You may have to add extra libraries as well.  Which ones?
Perhaps those printed by
.PP
.Vb 1
\&   perl -MConfig -e 'print $Config{libs}'
.Ve
Provided your perl binary was properly configured and installed the
\fBExtUtils::Embed\fR module will determine all of this information for
you:
.PP
.Vb 1
\&   % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
If the \fBExtUtils::Embed\fR module isn't part of your Perl distribution,
you can retrieve it from
http://www.perl.com/perl/\s-1CPAN/\s0modules/by-module/ExtUtils::Embed.  (If
this documentation came from your Perl distribution, then you're
running 5.004 or better and you already have it.)
.PP
The \fBExtUtils::Embed\fR kit on \s-1CPAN\s0 also contains all source code for
the examples in this document, tests, additional examples and other
information you may find useful.
.Sh "Adding a Perl interpreter to your C program"
In a sense, perl (the C program) is a good example of embedding Perl
(the language), so I'll demonstrate embedding with \fIminiperlmain.c\fR,
included in the source distribution.  Here's a bastardized, nonportable
version of \fIminiperlmain.c\fR containing the essentials of embedding:
.PP
.Vb 2
\&    #include <EXTERN.h>               /* from the Perl distribution     */
\&    #include <perl.h>                 /* from the Perl distribution     */
.Ve
.Vb 1
\&    static PerlInterpreter *my_perl;  /***    The Perl interpreter    ***/
.Ve
.Vb 9
\&    int main(int argc, char **argv, char **env)
\&    {
\&        my_perl = perl_alloc();
\&        perl_construct(my_perl);
\&        perl_parse(my_perl, NULL, argc, argv, (char **)NULL);
\&        perl_run(my_perl);
\&        perl_destruct(my_perl);
\&        perl_free(my_perl);
\&    }
.Ve
Notice that we don't use the \f(CWenv\fR pointer.  Normally handed to
\f(CWperl_parse\fR as its final argument, \f(CWenv\fR here is replaced by
\f(CWNULL\fR, which means that the current environment will be used.
.PP
Now compile this program (I'll call it \fIinterp.c\fR) into an executable:
.PP
.Vb 1
\&    % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
After a successful compilation, you'll be able to use \fIinterp\fR just
like perl itself:
.PP
.Vb 6
\&    % interp
\&    print "Pretty Good Perl \en";
\&    print "10890 - 9801 is ", 10890 - 9801;
\&    <CTRL-D>
\&    Pretty Good Perl
\&    10890 - 9801 is 1089
.Ve
or
.PP
.Vb 2
\&    % interp -e 'printf("%x", 3735928559)'
\&    deadbeef
.Ve
You can also read and execute Perl statements from a file while in the
midst of your C program, by placing the filename in \fIargv[1]\fR before
calling \fIperl_run\fR.
.Sh "Calling a Perl subroutine from your C program"
To call individual Perl subroutines, you can use any of the \fBperl_call_*\fR
functions documented in the \fIperlcall\fR manpage.
In this example we'll use \f(CWperl_call_argv\fR.
.PP
That's shown below, in a program I'll call \fIshowtime.c\fR.
.PP
.Vb 2
\&    #include <EXTERN.h>
\&    #include <perl.h>
.Ve
.Vb 1
\&    static PerlInterpreter *my_perl;
.Ve
.Vb 5
\&    int main(int argc, char **argv, char **env)
\&    {
\&        char *args[] = { NULL };
\&        my_perl = perl_alloc();
\&        perl_construct(my_perl);
.Ve
.Vb 1
\&        perl_parse(my_perl, NULL, argc, argv, NULL);
.Ve
.Vb 1
\&        /*** skipping perl_run() ***/
.Ve
.Vb 1
\&        perl_call_argv("showtime", G_DISCARD | G_NOARGS, args);
.Ve
.Vb 3
\&        perl_destruct(my_perl);
\&        perl_free(my_perl);
\&    }
.Ve
where \fIshowtime\fR is a Perl subroutine that takes no arguments (that's the
\fIG_NOARGS\fR) and for which I'll ignore the return value (that's the
\fIG_DISCARD\fR).  Those flags, and others, are discussed in the \fIperlcall\fR manpage.
.PP
I'll define the \fIshowtime\fR subroutine in a file called \fIshowtime.pl\fR:
.PP
.Vb 1
\&    print "I shan't be printed.";
.Ve
.Vb 3
\&    sub showtime {
\&        print time;
\&    }
.Ve
Simple enough.  Now compile and run:
.PP
.Vb 1
\&    % cc -o showtime showtime.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
.Vb 2
\&    % showtime showtime.pl
\&    818284590
.Ve
yielding the number of seconds that elapsed between January 1, 1970
(the beginning of the Unix epoch), and the moment I began writing this
sentence.
.PP
In this particular case we don't have to call \fIperl_run\fR, but in
general it's considered good practice to ensure proper initialization
of library code, including execution of all object \f(CWDESTROY\fR methods
and package \f(CWEND {}\fR blocks.
.PP
If you want to pass arguments to the Perl subroutine, you can add
strings to the \f(CWNULL\fR\-terminated \f(CWargs\fR list passed to
\fIperl_call_argv\fR.  For other data types, or to examine return values,
you'll need to manipulate the Perl stack.  That's demonstrated in the
last section of this document: the section on \fIFiddling with the Perl stack from
your C program\fR.
.Sh "Evaluating a Perl statement from your C program"
Perl provides two \s-1API\s0 functions to evaluate pieces of Perl code.
These are the \f(CWperl_eval_sv\fR entry in the \fIperlguts\fR manpage and the \f(CWperl_eval_pv\fR entry in the \fIperlguts\fR manpage.
.PP
Arguably, these are the only routines you'll ever need to execute
snippets of Perl code from within your C program.  Your code can be as
long as you wish; it can contain multiple statements; it can employ
the \f(CWuse\fR entry in the \fIperlfunc\fR manpage, the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage, and the \f(CWdo\fR entry in the \fIperlfunc\fR manpage to
include external Perl files.
.PP
\fIperl_eval_pv\fR lets us evaluate individual Perl strings, and then
extract variables for coercion into C types.  The following program,
\fIstring.c\fR, executes three Perl strings, extracting an \f(CWint\fR from
the first, a \f(CWfloat\fR from the second, and a \f(CWchar *\fR from the third.
.PP
.Vb 30
\&   #include <EXTERN.h>
\&   #include <perl.h>
\&   
\&   static PerlInterpreter *my_perl;
\&   
\&   main (int argc, char **argv, char **env)
\&   {
\&       char *embedding[] = { "", "-e", "0" };
\&   
\&       my_perl = perl_alloc();
\&       perl_construct( my_perl );
\&   
\&       perl_parse(my_perl, NULL, 3, embedding, NULL);
\&       perl_run(my_perl);
\&   
\&       /** Treat $a as an integer **/
\&       perl_eval_pv("$a = 3; $a **= 2", TRUE);
\&       printf("a = %d\en", SvIV(perl_get_sv("a", FALSE)));
\&   
\&       /** Treat $a as a float **/
\&       perl_eval_pv("$a = 3.14; $a **= 2", TRUE);
\&       printf("a = %f\en", SvNV(perl_get_sv("a", FALSE)));
\&   
\&       /** Treat $a as a string **/
\&       perl_eval_pv("$a = 'rekcaH lreP rehtonA tsuJ'; $a = reverse($a);", TRUE);
\&       printf("a = %s\en", SvPV(perl_get_sv("a", FALSE), PL_na));
\&   
\&       perl_destruct(my_perl);
\&       perl_free(my_perl);
\&   }
.Ve
All of those strange functions with \fIsv\fR in their names help convert Perl scalars to C types.  They're described in the \fIperlguts\fR manpage.
.PP
If you compile and run \fIstring.c\fR, you'll see the results of using
\fISvIV()\fR to create an \f(CWint\fR, \fISvNV()\fR to create a \f(CWfloat\fR, and
\fISvPV()\fR to create a string:
.PP
.Vb 3
\&   a = 9
\&   a = 9.859600
\&   a = Just Another Perl Hacker
.Ve
In the example above, we've created a global variable to temporarily
store the computed value of our eval'd expression.  It is also
possible and in most cases a better strategy to fetch the return value
from \fIperl_eval_pv()\fR instead.  Example:
.PP
.Vb 4
\&   ...
\&   SV *val = perl_eval_pv("reverse 'rekcaH lreP rehtonA tsuJ'", TRUE);
\&   printf("%s\en", SvPV(val,PL_na));
\&   ...
.Ve
This way, we avoid namespace pollution by not creating global
variables and we've simplified our code as well.
.Sh "Performing Perl pattern matches and substitutions from your C program"
The \fIperl_eval_sv()\fR function lets us evaluate strings of Perl code, so we can
define some functions that use it to \*(L"specialize\*(R" in matches and
substitutions: \fImatch()\fR, \fIsubstitute()\fR, and \fImatches()\fR.
.PP
.Vb 1
\&   I32 match(SV *string, char *pattern);
.Ve
Given a string and a pattern (e.g., \f(CWm/clasp/\fR or \f(CW/\eb\ew*\eb/\fR, which
in your C program might appear as \*(L"/\e\eb\e\ew*\e\eb/"), \fImatch()\fR
returns 1 if the string matches the pattern and 0 otherwise.
.PP
.Vb 1
\&   int substitute(SV **string, char *pattern);
.Ve
Given a pointer to an \f(CWSV\fR and an \f(CW=~\fR operation (e.g.,
\f(CWs/bob/robert/g\fR or \f(CWtr[A-Z][a-z]\fR), \fIsubstitute()\fR modifies the string
within the \f(CWAV\fR at according to the operation, returning the number of substitutions
made.
.PP
.Vb 1
\&   int matches(SV *string, char *pattern, AV **matches);
.Ve
Given an \f(CWSV\fR, a pattern, and a pointer to an empty \f(CWAV\fR,
\fImatches()\fR evaluates \f(CW$string =~ $pattern\fR in an array context, and
fills in \fImatches\fR with the array elements, returning the number of matches found.
.PP
Here's a sample program, \fImatch.c\fR, that uses all three (long lines have
been wrapped here):
.PP
.Vb 141
\& #include <EXTERN.h>
\& #include <perl.h>
\& 
\& /** my_perl_eval_sv(code, error_check)
\& ** kinda like perl_eval_sv(), 
\& ** but we pop the return value off the stack 
\& **/
\& SV* my_perl_eval_sv(SV *sv, I32 croak_on_error)
\& {
\&     dSP;
\&     SV* retval;
\& 
\&     PUSHMARK(SP);
\&     perl_eval_sv(sv, G_SCALAR);
\& 
\&     SPAGAIN;
\&     retval = POPs;
\&     PUTBACK;
\& 
\&     if (croak_on_error && SvTRUE(ERRSV))
\&        croak(SvPVx(ERRSV, PL_na));
\& 
\&     return retval;
\& }
\& 
\& /** match(string, pattern)
\& **
\& ** Used for matches in a scalar context.
\& **
\& ** Returns 1 if the match was successful; 0 otherwise.
\& **/
\& 
\& I32 match(SV *string, char *pattern)
\& {
\&     SV *command = NEWSV(1099, 0), *retval;
\& 
\&     sv_setpvf(command, "my $string = '%s'; $string =~ %s",
\&              SvPV(string,PL_na), pattern);
\& 
\&     retval = my_perl_eval_sv(command, TRUE);
\&     SvREFCNT_dec(command);
\& 
\&     return SvIV(retval);
\& }
\& 
\& /** substitute(string, pattern)
\& **
\& ** Used for =~ operations that modify their left-hand side (s/// and tr///)
\& **
\& ** Returns the number of successful matches, and
\& ** modifies the input string if there were any.
\& **/
\& 
\& I32 substitute(SV **string, char *pattern)
\& {
\&     SV *command = NEWSV(1099, 0), *retval;
\& 
\&     sv_setpvf(command, "$string = '%s'; ($string =~ %s)",
\&              SvPV(*string,PL_na), pattern);
\& 
\&     retval = my_perl_eval_sv(command, TRUE);
\&     SvREFCNT_dec(command);
\& 
\&     *string = perl_get_sv("string", FALSE);
\&     return SvIV(retval);
\& }
\& 
\& /** matches(string, pattern, matches)
\& **
\& ** Used for matches in an array context.
\& **
\& ** Returns the number of matches,
\& ** and fills in **matches with the matching substrings
\& **/
\& 
\& I32 matches(SV *string, char *pattern, AV **match_list)
\& {
\&     SV *command = NEWSV(1099, 0);
\&     I32 num_matches;
\& 
\&     sv_setpvf(command, "my $string = '%s'; @array = ($string =~ %s)",
\&              SvPV(string,PL_na), pattern);
\& 
\&     my_perl_eval_sv(command, TRUE);
\&     SvREFCNT_dec(command);
\& 
\&     *match_list = perl_get_av("array", FALSE);
\&     num_matches = av_len(*match_list) + 1; /** assume $[ is 0 **/
\& 
\&     return num_matches;
\& }
\& 
\& main (int argc, char **argv, char **env)
\& {
\&     PerlInterpreter *my_perl = perl_alloc();
\&     char *embedding[] = { "", "-e", "0" };
\&     AV *match_list;
\&     I32 num_matches, i;
\&     SV *text = NEWSV(1099,0);
\& 
\&     perl_construct(my_perl);
\&     perl_parse(my_perl, NULL, 3, embedding, NULL);
\& 
\&     sv_setpv(text, "When he is at a convenience store and the bill comes to some amount like 76 cents, Maynard is aware that there is something he *should* do, something that will enable him to get back a quarter, but he has no idea *what*.  He fumbles through his red squeezey changepurse and gives the boy three extra pennies with his dollar, hoping that he might luck into the correct amount.  The boy gives him back two of his own pennies and then the big shiny quarter that is his prize. -RICHH");
\& 
\&     if (match(text, "m/quarter/")) /** Does text contain 'quarter'? **/
\&        printf("match: Text contains the word 'quarter'.\en\en");
\&     else
\&        printf("match: Text doesn't contain the word 'quarter'.\en\en");
\& 
\&     if (match(text, "m/eighth/")) /** Does text contain 'eighth'? **/
\&        printf("match: Text contains the word 'eighth'.\en\en");
\&     else
\&        printf("match: Text doesn't contain the word 'eighth'.\en\en");
\& 
\&     /** Match all occurrences of /wi../ **/
\&     num_matches = matches(text, "m/(wi..)/g", &match_list);
\&     printf("matches: m/(wi..)/g found %d matches...\en", num_matches);
\& 
\&     for (i = 0; i < num_matches; i++)
\&        printf("match: %s\en", SvPV(*av_fetch(match_list, i, FALSE),PL_na));
\&     printf("\en");
\& 
\&     /** Remove all vowels from text **/
\&     num_matches = substitute(&text, "s/[aeiou]//gi");
\&     if (num_matches) {
\&        printf("substitute: s/[aeiou]//gi...%d substitutions made.\en",
\&               num_matches);
\&        printf("Now text is: %s\en\en", SvPV(text,PL_na));
\&     }
\& 
\&     /** Attempt a substitution **/
\&     if (!substitute(&text, "s/Perl/C/")) {
\&        printf("substitute: s/Perl/C...No substitution made.\en\en");
\&     }
\& 
\&     SvREFCNT_dec(text);
\&     PL_perl_destruct_level = 1;
\&     perl_destruct(my_perl);
\&     perl_free(my_perl);
\& }
.Ve
which produces the output (again, long lines have been wrapped here)
.PP
.Vb 1
\&   match: Text contains the word 'quarter'.
.Ve
.Vb 1
\&   match: Text doesn't contain the word 'eighth'.
.Ve
.Vb 3
\&   matches: m/(wi..)/g found 2 matches...
\&   match: will
\&   match: with
.Ve
.Vb 6
\&   substitute: s/[aeiou]//gi...139 substitutions made.
\&   Now text is: Whn h s t  cnvnnc str nd th bll cms t sm mnt lk 76 cnts,
\&   Mynrd s wr tht thr s smthng h *shld* d, smthng tht wll nbl hm t gt bck
\&   qrtr, bt h hs n d *wht*.  H fmbls thrgh hs rd sqzy chngprs nd gvs th by
\&   thr xtr pnns wth hs dllr, hpng tht h mght lck nt th crrct mnt.  Th by gvs
\&   hm bck tw f hs wn pnns nd thn th bg shny qrtr tht s hs prz. -RCHH
.Ve
.Vb 1
\&   substitute: s/Perl/C...No substitution made.
.Ve
.Sh "Fiddling with the Perl stack from your C program"
When trying to explain stacks, most computer science textbooks mumble
something about spring-loaded columns of cafeteria plates: the last
thing you pushed on the stack is the first thing you pop off.  That'll
do for our purposes: your C program will push some arguments onto \*(L"the Perl
stack\*(R", shut its eyes while some magic happens, and then pop the
results\*(--the return value of your Perl subroutine\*(--off the stack.
.PP
First you'll need to know how to convert between C types and Perl
types, with \fInewSViv()\fR and \fIsv_setnv()\fR and \fInewAV()\fR and all their
friends.  They're described in the \fIperlguts\fR manpage.
.PP
Then you'll need to know how to manipulate the Perl stack.  That's
described in the \fIperlcall\fR manpage.
.PP
Once you've understood those, embedding Perl in C is easy.
.PP
Because C has no builtin function for integer exponentiation, let's
make Perl's ** operator available to it (this is less useful than it
sounds, because Perl implements ** with C's \fIpow()\fR function).  First
I'll create a stub exponentiation function in \fIpower.pl\fR:
.PP
.Vb 4
\&    sub expo {
\&        my ($a, $b) = @_;
\&        return $a ** $b;
\&    }
.Ve
Now I'll create a C program, \fIpower.c\fR, with a function
\fIPerlPower()\fR that contains all the perlguts necessary to push the
two arguments into \fIexpo()\fR and to pop the return value out.  Take a
deep breath...
.PP
.Vb 2
\&    #include <EXTERN.h>
\&    #include <perl.h>
.Ve
.Vb 1
\&    static PerlInterpreter *my_perl;
.Ve
.Vb 18
\&    static void
\&    PerlPower(int a, int b)
\&    {
\&      dSP;                            /* initialize stack pointer      */
\&      ENTER;                          /* everything created after here */
\&      SAVETMPS;                       /* ...is a temporary variable.   */
\&      PUSHMARK(SP);                   /* remember the stack pointer    */
\&      XPUSHs(sv_2mortal(newSViv(a))); /* push the base onto the stack  */
\&      XPUSHs(sv_2mortal(newSViv(b))); /* push the exponent onto stack  */
\&      PUTBACK;                      /* make local stack pointer global */
\&      perl_call_pv("expo", G_SCALAR); /* call the function             */
\&      SPAGAIN;                        /* refresh stack pointer         */
\&                                    /* pop the return value from stack */
\&      printf ("%d to the %dth power is %d.\en", a, b, POPi);
\&      PUTBACK;
\&      FREETMPS;                       /* free that return value        */
\&      LEAVE;                       /* ...and the XPUSHed "mortal" args.*/
\&    }
.Ve
.Vb 3
\&    int main (int argc, char **argv, char **env)
\&    {
\&      char *my_argv[] = { "", "power.pl" };
.Ve
.Vb 2
\&      my_perl = perl_alloc();
\&      perl_construct( my_perl );
.Ve
.Vb 2
\&      perl_parse(my_perl, NULL, 2, my_argv, (char **)NULL);
\&      perl_run(my_perl);
.Ve
.Vb 1
\&      PerlPower(3, 4);                      /*** Compute 3 ** 4 ***/
.Ve
.Vb 3
\&      perl_destruct(my_perl);
\&      perl_free(my_perl);
\&    }
.Ve
Compile and run:
.PP
.Vb 1
\&    % cc -o power power.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
.Vb 2
\&    % power
\&    3 to the 4th power is 81.
.Ve
.Sh "Maintaining a persistent interpreter"
When developing interactive and/or potentially long-running
applications, it's a good idea to maintain a persistent interpreter
rather than allocating and constructing a new interpreter multiple
times.  The major reason is speed: since Perl will only be loaded into
memory once.
.PP
However, you have to be more cautious with namespace and variable
scoping when using a persistent interpreter.  In previous examples
we've been using global variables in the default package \f(CWmain\fR.  We
knew exactly what code would be run, and assumed we could avoid
variable collisions and outrageous symbol table growth.
.PP
Let's say your application is a server that will occasionally run Perl
code from some arbitrary file.  Your server has no way of knowing what
code it's going to run.  Very dangerous.
.PP
If the file is pulled in by \f(CWperl_parse()\fR, compiled into a newly
constructed interpreter, and subsequently cleaned out with
\f(CWperl_destruct()\fR afterwards, you're shielded from most namespace
troubles.
.PP
One way to avoid namespace collisions in this scenario is to translate
the filename into a guaranteed-unique package name, and then compile
the code into that package using the \f(CWeval\fR entry in the \fIperlfunc\fR manpage.  In the example
below, each file will only be compiled once.  Or, the application
might choose to clean out the symbol table associated with the file
after it's no longer needed.  Using the \f(CWperl_call_argv\fR entry in the \fIperlcall\fR manpage, We'll
call the subroutine \f(CWEmbed::Persistent::eval_file\fR which lives in the
file \f(CWpersistent.pl\fR and pass the filename and boolean cleanup/cache
flag as arguments.
.PP
Note that the process will continue to grow for each file that it
uses.  In addition, there might be \f(CWAUTOLOAD\fRed subroutines and other
conditions that cause Perl's symbol table to grow.  You might want to
add some logic that keeps track of the process size, or restarts
itself after a certain number of requests, to ensure that memory
consumption is minimized.  You'll also want to scope your variables
with the \f(CWmy\fR entry in the \fIperlfunc\fR manpage whenever possible.
.PP
.Vb 2
\& package Embed::Persistent;
\& #persistent.pl
.Ve
.Vb 3
\& use strict;
\& use vars '%Cache';
\& use Symbol qw(delete_package);
.Ve
.Vb 5
\& sub valid_package_name {
\&     my($string) = @_;
\&     $string =~ s/([^A-Za-z0-9\e/])/sprintf("_%2x",unpack("C",$1))/eg;
\&     # second pass only for words starting with a digit
\&     $string =~ s|/(\ed)|sprintf("/_%2x",unpack("C",$1))|eg;
.Ve
.Vb 4
\&     # Dress it up as a real package name
\&     $string =~ s|/|::|g;
\&     return "Embed" . $string;
\& }
.Ve
.Vb 18
\& sub eval_file {
\&     my($filename, $delete) = @_;
\&     my $package = valid_package_name($filename);
\&     my $mtime = -M $filename;
\&     if(defined $Cache{$package}{mtime}
\&        &&
\&        $Cache{$package}{mtime} <= $mtime)
\&     {
\&        # we have compiled this subroutine already,
\&        # it has not been updated on disk, nothing left to do
\&        print STDERR "already compiled $package->handler\en";
\&     }
\&     else {
\&        local *FH;
\&        open FH, $filename or die "open '$filename' $!";
\&        local($/) = undef;
\&        my $sub = <FH>;
\&        close FH;
.Ve
.Vb 8
\&        #wrap the code into a subroutine inside our unique package
\&        my $eval = qq{package $package; sub handler { $sub; }};
\&        {
\&            # hide our variables within this block
\&            my($filename,$mtime,$package,$sub);
\&            eval $eval;
\&        }
\&        die $@ if $@;
.Ve
.Vb 3
\&        #cache it unless we're cleaning out each time
\&        $Cache{$package}{mtime} = $mtime unless $delete;
\&     }
.Ve
.Vb 2
\&     eval {$package->handler;};
\&     die $@ if $@;
.Ve
.Vb 1
\&     delete_package($package) if $delete;
.Ve
.Vb 3
\&     #take a look if you want
\&     #print Devel::Symdump->rnew($package)->as_string, $/;
\& }
.Ve
.Vb 1
\& 1;
.Ve
.Vb 1
\& __END__
.Ve
.Vb 3
\& /* persistent.c */
\& #include <EXTERN.h>
\& #include <perl.h>
.Ve
.Vb 4
\& /* 1 = clean out filename's symbol table after each request, 0 = don't */
\& #ifndef DO_CLEAN
\& #define DO_CLEAN 0
\& #endif
.Ve
.Vb 1
\& static PerlInterpreter *perl = NULL;
.Ve
.Vb 7
\& int
\& main(int argc, char **argv, char **env)
\& {
\&     char *embedding[] = { "", "persistent.pl" };
\&     char *args[] = { "", DO_CLEAN, NULL };
\&     char filename [1024];
\&     int exitstatus = 0;
.Ve
.Vb 5
\&     if((perl = perl_alloc()) == NULL) {
\&        fprintf(stderr, "no memory!");
\&        exit(1);
\&     }
\&     perl_construct(perl);
.Ve
.Vb 1
\&     exitstatus = perl_parse(perl, NULL, 2, embedding, NULL);
.Ve
.Vb 2
\&     if(!exitstatus) {
\&        exitstatus = perl_run(perl);
.Ve
.Vb 1
\&        while(printf("Enter file name: ") && gets(filename)) {
.Ve
.Vb 4
\&            /* call the subroutine, passing it the filename as an argument */
\&            args[0] = filename;
\&            perl_call_argv("Embed::Persistent::eval_file",
\&                           G_DISCARD | G_EVAL, args);
.Ve
.Vb 5
\&            /* check $@ */
\&            if(SvTRUE(ERRSV))
\&                fprintf(stderr, "eval error: %s\en", SvPV(ERRSV,PL_na));
\&        }
\&     }
.Ve
.Vb 5
\&     PL_perl_destruct_level = 0;
\&     perl_destruct(perl);
\&     perl_free(perl);
\&     exit(exitstatus);
\& }
.Ve
Now compile:
.PP
.Vb 1
\& % cc -o persistent persistent.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
Here's a example script file:
.PP
.Vb 3
\& #test.pl
\& my $string = "hello";
\& foo($string);
.Ve
.Vb 3
\& sub foo {
\&     print "foo says: @_\en";
\& }
.Ve
Now run:
.PP
.Vb 7
\& % persistent
\& Enter file name: test.pl
\& foo says: hello
\& Enter file name: test.pl
\& already compiled Embed::test_2epl->handler
\& foo says: hello
\& Enter file name: ^C
.Ve
.Sh "Maintaining multiple interpreter instances"
Some rare applications will need to create more than one interpreter
during a session.  Such an application might sporadically decide to
release any resources associated with the interpreter.
.PP
The program must take care to ensure that this takes place \fIbefore\fR
the next interpreter is constructed.  By default, the global variable
\f(CWPL_perl_destruct_level\fR is set to \f(CW0\fR, since extra cleaning isn't
needed when a program has only one interpreter.
.PP
Setting \f(CWPL_perl_destruct_level\fR to \f(CW1\fR makes everything squeaky clean:
.PP
.Vb 1
\& PL_perl_destruct_level = 1;
.Ve
.Vb 11
\& while(1) {
\&     ...
\&     /* reset global variables here with PL_perl_destruct_level = 1 */
\&     perl_construct(my_perl);
\&     ...
\&     /* clean and reset _everything_ during perl_destruct */
\&     perl_destruct(my_perl);
\&     perl_free(my_perl);
\&     ...
\&     /* let's go do it again! */
\& }
.Ve
When \fIperl_destruct()\fR is called, the interpreter's syntax parse tree
and symbol tables are cleaned up, and global variables are reset.
.PP
Now suppose we have more than one interpreter instance running at the
same time.  This is feasible, but only if you used the
\f(CW-DMULTIPLICITY\fR flag when building Perl.  By default, that sets
\f(CWPL_perl_destruct_level\fR to \f(CW1\fR.
.PP
Let's give it a try:
.PP
.Vb 2
\& #include <EXTERN.h>
\& #include <perl.h>
.Ve
.Vb 2
\& /* we're going to embed two interpreters */
\& /* we're going to embed two interpreters */
.Ve
.Vb 1
\& #define SAY_HELLO "-e", "print qq(Hi, I'm $^X\en)"
.Ve
.Vb 7
\& int main(int argc, char **argv, char **env)
\& {
\&     PerlInterpreter
\&         *one_perl = perl_alloc(),
\&         *two_perl = perl_alloc();
\&     char *one_args[] = { "one_perl", SAY_HELLO };
\&     char *two_args[] = { "two_perl", SAY_HELLO };
.Ve
.Vb 2
\&     perl_construct(one_perl);
\&     perl_construct(two_perl);
.Ve
.Vb 2
\&     perl_parse(one_perl, NULL, 3, one_args, (char **)NULL);
\&     perl_parse(two_perl, NULL, 3, two_args, (char **)NULL);
.Ve
.Vb 2
\&     perl_run(one_perl);
\&     perl_run(two_perl);
.Ve
.Vb 2
\&     perl_destruct(one_perl);
\&     perl_destruct(two_perl);
.Ve
.Vb 3
\&     perl_free(one_perl);
\&     perl_free(two_perl);
\& }
.Ve
Compile as usual:
.PP
.Vb 1
\& % cc -o multiplicity multiplicity.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
Run it, Run it:
.PP
.Vb 3
\& % multiplicity
\& Hi, I'm one_perl
\& Hi, I'm two_perl
.Ve
.Sh "Using Perl modules, which themselves use C libraries, from your C program"
If you've played with the examples above and tried to embed a script
that \fIuse()\fRs a Perl module (such as \fISocket\fR) which itself uses a C or \*(C+ library,
this probably happened:
.PP
.Vb 3
\& Can't load module Socket, dynamic loading not available in this perl.
\&  (You may need to build a new perl executable which either supports
\&  dynamic loading or has the Socket module statically linked into it.)
.Ve
What's wrong?
.PP
Your interpreter doesn't know how to communicate with these extensions
on its own.  A little glue will help.  Up until now you've been
calling \fIperl_parse()\fR, handing it \s-1NULL\s0 for the second argument:
.PP
.Vb 1
\& perl_parse(my_perl, NULL, argc, my_argv, NULL);
.Ve
That's where the glue code can be inserted to create the initial contact between
Perl and linked C/\*(C+ routines.  Let's take a look some pieces of \fIperlmain.c\fR
to see how Perl does this:
.PP
.Vb 5
\& #ifdef __cplusplus
\& #  define EXTERN_C extern "C"
\& #else
\& #  define EXTERN_C extern
\& #endif
.Ve
.Vb 1
\& static void xs_init _((void));
.Ve
.Vb 2
\& EXTERN_C void boot_DynaLoader _((CV* cv));
\& EXTERN_C void boot_Socket _((CV* cv));
.Ve
.Vb 8
\& EXTERN_C void
\& xs_init()
\& {
\&        char *file = __FILE__;
\&        /* DynaLoader is a special case */
\&        newXS("DynaLoader::boot_DynaLoader", boot_DynaLoader, file);
\&        newXS("Socket::bootstrap", boot_Socket, file);
\& }
.Ve
Simply put: for each extension linked with your Perl executable
(determined during its initial configuration on your
computer or when adding a new extension),
a Perl subroutine is created to incorporate the extension's
routines.  Normally, that subroutine is named
\fIModule::bootstrap()\fR and is invoked when you say \fIuse Module\fR.  In
turn, this hooks into an \s-1XSUB\s0, \fIboot_Module\fR, which creates a Perl
counterpart for each of the extension's XSUBs.  Don't worry about this
part; leave that to the \fIxsubpp\fR and extension authors.  If your
extension is dynamically loaded, DynaLoader creates \fIModule::bootstrap()\fR
for you on the fly.  In fact, if you have a working DynaLoader then there
is rarely any need to link in any other extensions statically.
.PP
Once you have this code, slap it into the second argument of \fIperl_parse()\fR:
.PP
.Vb 1
\& perl_parse(my_perl, xs_init, argc, my_argv, NULL);
.Ve
Then compile:
.PP
.Vb 1
\& % cc -o interp interp.c `perl -MExtUtils::Embed -e ccopts -e ldopts`
.Ve
.Vb 3
\& % interp
\&   use Socket;
\&   use SomeDynamicallyLoadedModule;
.Ve
.Vb 1
\&   print "Now I can use extensions!\en"'
.Ve
\fBExtUtils::Embed\fR can also automate writing the \fIxs_init\fR glue code.
.PP
.Vb 4
\& % perl -MExtUtils::Embed -e xsinit -- -o perlxsi.c
\& % cc -c perlxsi.c `perl -MExtUtils::Embed -e ccopts`
\& % cc -c interp.c  `perl -MExtUtils::Embed -e ccopts`
\& % cc -o interp perlxsi.o interp.o `perl -MExtUtils::Embed -e ldopts`
.Ve
Consult the \fIperlxs\fR manpage and the \fIperlguts\fR manpage for more details.
.SH "Embedding Perl under Win32"
At the time of this writing (5.004), there are two versions of Perl
which run under Win32.  (The two versions are merging in 5.005.)
Interfacing to ActiveState's Perl library is quite different from the
examples in this documentation, as significant changes were made to
the internal Perl API.  However, it is possible to embed ActiveState's
Perl runtime.  For details, see the Perl for Win32 FAQ at
http://www.perl.com/perl/faq/win32/Perl_for_Win32_FAQ.html.
.PP
With the \*(L"official\*(R" Perl version 5.004 or higher, all the examples
within this documentation will compile and run untouched, although
the build process is slightly different between Unix and Win32.  
.PP
For starters, backticks don't work under the Win32 native command shell.
The ExtUtils::Embed kit on CPAN ships with a script called
\fBgenmake\fR, which generates a simple makefile to build a program from
a single C source file.  It can be used like this:
.PP
.Vb 3
\& C:\eExtUtils-Embed\eeg> perl genmake interp.c
\& C:\eExtUtils-Embed\eeg> nmake
\& C:\eExtUtils-Embed\eeg> interp -e "print qq{I'm embedded in Win32!\en}"
.Ve
You may wish to use a more robust environment such as the Microsoft
Developer Studio.  In this case, run this to generate perlxsi.c:
.PP
.Vb 1
\& perl -MExtUtils::Embed -e xsinit
.Ve
Create a new project and Insert \-> Files into Project: perlxsi.c,
perl.lib, and your own source files, e.g. interp.c.  Typically you'll
find perl.lib in \fBC:\eperl\elib\eCORE\fR, if not, you should see the
\fBCORE\fR directory relative to \f(CWperl -V:archlib\fR.  The studio will
also need this path so it knows where to find Perl include files.
This path can be added via the Tools \-> Options \-> Directories menu.
Finally, select Build \-> Build interp.exe and you're ready to go.
.SH "MORAL"
You can sometimes \fIwrite faster code\fR in C, but
you can always \fIwrite code faster\fR in Perl.  Because you can use
each from the other, combine them as you wish.
.SH "AUTHOR"
Jon Orwant <\fIorwant@tpj.com\fR> and Doug MacEachern
<\fIdougm@osf.org\fR>, with small contributions from Tim Bunce, Tom
Christiansen, Guy Decoux, Hallvard Furuseth, Dov Grobgeld, and Ilya
Zakharevich.
.PP
Doug MacEachern has an article on embedding in Volume 1, Issue 4 of
The Perl Journal (http://tpj.com).  Doug is also the developer of the
most widely-used Perl embedding: the mod_perl system
(perl.apache.org), which embeds Perl in the Apache web server.
Oracle, Binary Evolution, ActiveState, and Ben Sugars's nsapi_perl
have used this model for Oracle, Netscape and Internet Information
Server Perl plugins.
.PP
July 22, 1998
.SH "COPYRIGHT"
Copyright (C) 1995, 1996, 1997, 1998 Doug MacEachern and Jon Orwant.  All
Rights Reserved.
.PP
Permission is granted to make and distribute verbatim copies of this
documentation provided the copyright notice and this permission notice are
preserved on all copies.
.PP
Permission is granted to copy and distribute modified versions of this
documentation under the conditions for verbatim copying, provided also
that they are marked clearly as modified versions, that the authors\*(R'
names and title are unchanged (though subtitles and additional
authors\*(R' names may be added), and that the entire resulting derived
work is distributed under the terms of a permission notice identical
to this one.
.PP
Permission is granted to copy and distribute translations of this
documentation into another language, under the above conditions for
modified versions.

.rn }` ''
.IX Title "PERLEMBED 1"
.IX Name "perlembed - how to embed perl in your C program"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Subsection "\s-1PREAMBLE\s0"

.IX Item "\fBUse C from Perl?\fR"

.IX Item "\fBUse a Unix program from Perl?\fR"

.IX Item "\fBUse Perl from Perl?\fR"

.IX Item "\fBUse C from C?\fR"

.IX Item "\fBUse Perl from C?\fR"

.IX Subsection "\s-1ROADMAP\s0"

.IX Subsection "Compiling your C program"

.IX Subsection "Adding a Perl interpreter to your C program"

.IX Subsection "Calling a Perl subroutine from your C program"

.IX Subsection "Evaluating a Perl statement from your C program"

.IX Subsection "Performing Perl pattern matches and substitutions from your C program"

.IX Subsection "Fiddling with the Perl stack from your C program"

.IX Subsection "Maintaining a persistent interpreter"

.IX Subsection "Maintaining multiple interpreter instances"

.IX Subsection "Using Perl modules, which themselves use C libraries, from your C program"

.IX Header "Embedding Perl under Win32"

.IX Header "MORAL"

.IX Header "AUTHOR"

.IX Header "COPYRIGHT"

