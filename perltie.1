.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLTIE 1 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perltie \- how to hide an object class in a simple variable
.SH "SYNOPSIS"
.PP
.Vb 1
\& tie VARIABLE, CLASSNAME, LIST
.Ve
.Vb 1
\& $object = tied VARIABLE
.Ve
.Vb 1
\& untie VARIABLE
.Ve
.SH "DESCRIPTION"
Prior to release 5.0 of Perl, a programmer could use \fIdbmopen()\fR
to connect an on-disk database in the standard Unix \fIdbm\fR\|(3x)
format magically to a \f(CW%HASH\fR in their program.  However, their Perl was either
built with one particular dbm library or another, but not both, and
you couldn't extend this mechanism to other packages or types of variables.
.PP
Now you can.
.PP
The \fItie()\fR function binds a variable to a class (package) that will provide
the implementation for access methods for that variable.  Once this magic
has been performed, accessing a tied variable automatically triggers
method calls in the proper class.  All of the complexity of the class is
hidden behind magic methods calls.  The method names are in ALL CAPS,
which is a convention that Perl uses to indicate that they're called
implicitly rather than explicitly\*(--just like the \fIBEGIN()\fR and \fIEND()\fR
functions.
.PP
In the \fItie()\fR call, \f(CWVARIABLE\fR is the name of the variable to be
enchanted.  \f(CWCLASSNAME\fR is the name of a class implementing objects of
the correct type.  Any additional arguments in the \f(CWLIST\fR are passed to
the appropriate constructor method for that class\*(--meaning \fITIESCALAR()\fR,
\fITIEARRAY()\fR, \fITIEHASH()\fR, or \fITIEHANDLE()\fR.  (Typically these are arguments
such as might be passed to the \fIdbminit()\fR function of C.) The object
returned by the \*(L"new\*(R" method is also returned by the \fItie()\fR function,
which would be useful if you wanted to access other methods in
\f(CWCLASSNAME\fR. (You don't actually have to return a reference to a right
\*(L"type\*(R" (e.g., HASH or \f(CWCLASSNAME\fR) so long as it's a properly blessed
object.)  You can also retrieve a reference to the underlying object
using the \fItied()\fR function.
.PP
Unlike \fIdbmopen()\fR, the \fItie()\fR function will not \f(CWuse\fR or \f(CWrequire\fR a module
for you\*(--you need to do that explicitly yourself.
.Sh "Tying Scalars"
A class implementing a tied scalar should define the following methods:
\s-1TIESCALAR\s0, \s-1FETCH\s0, \s-1STORE\s0, and possibly \s-1DESTROY\s0.
.PP
Let's look at each in turn, using as an example a tie class for
scalars that allows the user to do something like:
.PP
.Vb 2
\&    tie $his_speed, 'Nice', getppid();
\&    tie $my_speed,  'Nice', $$;
.Ve
And now whenever either of those variables is accessed, its current
system priority is retrieved and returned.  If those variables are set,
then the process's priority is changed!
.PP
We'll use Jarkko Hietaniemi <\fIjhi@iki.fi\fR>'s \s-1BSD::\s0Resource class (not
included) to access the \s-1PRIO_PROCESS\s0, \s-1PRIO_MIN\s0, and \s-1PRIO_MAX\s0 constants
from your system, as well as the \fIgetpriority()\fR and \fIsetpriority()\fR system
calls.  Here's the preamble of the class.
.PP
.Vb 5
\&    package Nice;
\&    use Carp;
\&    use BSD::Resource;
\&    use strict;
\&    $Nice::DEBUG = 0 unless defined $Nice::DEBUG;
.Ve
.Ip "\s-1TIESCALAR\s0 classname, \s-1LIST\s0" 5
This is the constructor for the class.  That means it is
expected to return a blessed reference to a new scalar
(probably anonymous) that it's creating.  For example:
.Sp
.Vb 3
\&    sub TIESCALAR {
\&        my $class = shift;
\&        my $pid = shift || $$; # 0 means me
.Ve
.Vb 4
\&        if ($pid !~ /^\ed+$/) {
\&            carp "Nice::Tie::Scalar got non-numeric pid $pid" if $^W;
\&            return undef;
\&        }
.Ve
.Vb 4
\&        unless (kill 0, $pid) { # EPERM or ERSCH, no doubt
\&            carp "Nice::Tie::Scalar got bad pid $pid: $!" if $^W;
\&            return undef;
\&        }
.Ve
.Vb 2
\&        return bless \e$pid, $class;
\&    }
.Ve
This tie class has chosen to return an error rather than raising an
exception if its constructor should fail.  While this is how \fIdbmopen()\fR works,
other classes may well not wish to be so forgiving.  It checks the global
variable \f(CW$^W\fR to see whether to emit a bit of noise anyway.
.Ip "\s-1FETCH\s0 this" 5
This method will be triggered every time the tied variable is accessed
(read).  It takes no arguments beyond its self reference, which is the
object representing the scalar we're dealing with.  Because in this case
we're using just a \s-1SCALAR\s0 ref for the tied scalar object, a simple $$self
allows the method to get at the real value stored there.  In our example
below, that real value is the process \s-1ID\s0 to which we've tied our variable.
.Sp
.Vb 10
\&    sub FETCH {
\&        my $self = shift;
\&        confess "wrong type" unless ref $self;
\&        croak "usage error" if @_;
\&        my $nicety;
\&        local($!) = 0;
\&        $nicety = getpriority(PRIO_PROCESS, $$self);
\&        if ($!) { croak "getpriority failed: $!" }
\&        return $nicety;
\&    }
.Ve
This time we've decided to blow up (raise an exception) if the renice
fails\*(--there's no place for us to return an error otherwise, and it's
probably the right thing to do.
.Ip "\s-1STORE\s0 this, value" 5
This method will be triggered every time the tied variable is set
(assigned).  Beyond its self reference, it also expects one (and only one)
argument\*(--the new value the user is trying to assign.
.Sp
.Vb 5
\&    sub STORE {
\&        my $self = shift;
\&        confess "wrong type" unless ref $self;
\&        my $new_nicety = shift;
\&        croak "usage error" if @_;
.Ve
.Vb 6
\&        if ($new_nicety < PRIO_MIN) {
\&            carp sprintf
\&              "WARNING: priority %d less than minimum system priority %d",
\&                  $new_nicety, PRIO_MIN if $^W;
\&            $new_nicety = PRIO_MIN;
\&        }
.Ve
.Vb 6
\&        if ($new_nicety > PRIO_MAX) {
\&            carp sprintf
\&              "WARNING: priority %d greater than maximum system priority %d",
\&                  $new_nicety, PRIO_MAX if $^W;
\&            $new_nicety = PRIO_MAX;
\&        }
.Ve
.Vb 5
\&        unless (defined setpriority(PRIO_PROCESS, $$self, $new_nicety)) {
\&            confess "setpriority failed: $!";
\&        }
\&        return $new_nicety;
\&    }
.Ve
.Ip "\s-1DESTROY\s0 this" 5
This method will be triggered when the tied variable needs to be destructed.
As with other object classes, such a method is seldom necessary, because Perl
deallocates its moribund object's memory for you automatically\*(--this isn't
\*(C+, you know.  We'll use a \s-1DESTROY\s0 method here for debugging purposes only.
.Sp
.Vb 5
\&    sub DESTROY {
\&        my $self = shift;
\&        confess "wrong type" unless ref $self;
\&        carp "[ Nice::DESTROY pid $$self ]" if $Nice::DEBUG;
\&    }
.Ve
.PP
That's about all there is to it.  Actually, it's more than all there
is to it, because we've done a few nice things here for the sake
of completeness, robustness, and general aesthetics.  Simpler
\s-1TIESCALAR\s0 classes are certainly possible.
.Sh "Tying Arrays"
A class implementing a tied ordinary array should define the following
methods: \s-1TIEARRAY\s0, \s-1FETCH\s0, \s-1STORE\s0, and perhaps \s-1DESTROY\s0.
.PP
\fB\s-1WARNING\s0\fR: Tied arrays are \fIincomplete\fR.  They are also distinctly lacking
something for the \f(CW$#ARRAY\fR access (which is hard, as it's an lvalue), as
well as the other obvious array functions, like \fIpush()\fR, \fIpop()\fR, \fIshift()\fR,
\fIunshift()\fR, and \fIsplice()\fR.
.PP
For this discussion, we'll implement an array whose indices are fixed at
its creation.  If you try to access anything beyond those bounds, you'll
take an exception.  (Well, if you access an individual element; an
aggregate assignment would be missed.) For example:
.PP
.Vb 9
\&    require Bounded_Array;
\&    tie @ary, 'Bounded_Array', 2;
\&    $| = 1;
\&    for $i (0 .. 10) {
\&        print "setting index $i: ";
\&        $ary[$i] = 10 * $i;
\&        $ary[$i] = 10 * $i;
\&        print "value of elt $i now $ary[$i]\en";
\&    }
.Ve
The preamble code for the class is as follows:
.PP
.Vb 3
\&    package Bounded_Array;
\&    use Carp;
\&    use strict;
.Ve
.Ip "\s-1TIEARRAY\s0 classname, \s-1LIST\s0" 5
This is the constructor for the class.  That means it is expected to
return a blessed reference through which the new array (probably an
anonymous \s-1ARRAY\s0 ref) will be accessed.
.Sp
In our example, just to show you that you don't \fIreally\fR have to return an
\s-1ARRAY\s0 reference, we'll choose a \s-1HASH\s0 reference to represent our object.
A \s-1HASH\s0 works out well as a generic record type: the \f(CW{BOUND}\fR field will
store the maximum bound allowed, and the \f(CW{ARRAY}\fR field will hold the
true \s-1ARRAY\s0 ref.  If someone outside the class tries to dereference the
object returned (doubtless thinking it an \s-1ARRAY\s0 ref), they'll blow up.
This just goes to show you that you should respect an object's privacy.
.Sp
.Vb 10
\&    sub TIEARRAY {
\&        my $class = shift;
\&        my $bound = shift;
\&        confess "usage: tie(\e@ary, 'Bounded_Array', max_subscript)"
\&            if @_ || $bound =~ /\eD/;
\&        return bless {
\&            BOUND => $bound,
\&            ARRAY => [],
\&        }, $class;
\&    }
.Ve
.Ip "\s-1FETCH\s0 this, index" 5
This method will be triggered every time an individual element the tied array
is accessed (read).  It takes one argument beyond its self reference: the
index whose value we're trying to fetch.
.Sp
.Vb 7
\&    sub FETCH {
\&      my($self,$idx) = @_;
\&      if ($idx > $self->{BOUND}) {
\&        confess "Array OOB: $idx > $self->{BOUND}";
\&      }
\&      return $self->{ARRAY}[$idx];
\&    }
.Ve
As you may have noticed, the name of the \s-1FETCH\s0 method (et al.) is the same
for all accesses, even though the constructors differ in names (\s-1TIESCALAR\s0
vs \s-1TIEARRAY\s0).  While in theory you could have the same class servicing
several tied types, in practice this becomes cumbersome, and it's easiest
to keep them at simply one tie type per class.
.Ip "\s-1STORE\s0 this, index, value" 5
This method will be triggered every time an element in the tied array is set
(written).  It takes two arguments beyond its self reference: the index at
which we're trying to store something and the value we're trying to put
there.  For example:
.Sp
.Vb 8
\&    sub STORE {
\&      my($self, $idx, $value) = @_;
\&      print "[STORE $value at $idx]\en" if _debug;
\&      if ($idx > $self->{BOUND} ) {
\&        confess "Array OOB: $idx > $self->{BOUND}";
\&      }
\&      return $self->{ARRAY}[$idx] = $value;
\&    }
.Ve
.Ip "\s-1DESTROY\s0 this" 5
This method will be triggered when the tied variable needs to be destructed.
As with the scalar tie class, this is almost never needed in a
language that does its own garbage collection, so this time we'll
just leave it out.
.PP
The code we presented at the top of the tied array class accesses many
elements of the array, far more than we've set the bounds to.  Therefore,
it will blow up once they try to access beyond the 2nd element of \f(CW@ary\fR, as
the following output demonstrates:
.PP
.Vb 5
\&    setting index 0: value of elt 0 now 0
\&    setting index 1: value of elt 1 now 10
\&    setting index 2: value of elt 2 now 20
\&    setting index 3: Array OOB: 3 > 2 at Bounded_Array.pm line 39
\&            Bounded_Array::FETCH called at testba line 12
.Ve
.Sh "Tying Hashes"
As the first Perl data type to be tied (see \fIdbmopen()\fR), hashes have the
most complete and useful \fItie()\fR implementation.  A class implementing a
tied hash should define the following methods: \s-1TIEHASH\s0 is the constructor.
\s-1FETCH\s0 and \s-1STORE\s0 access the key and value pairs.  \s-1EXISTS\s0 reports whether a
key is present in the hash, and \s-1DELETE\s0 deletes one.  \s-1CLEAR\s0 empties the
hash by deleting all the key and value pairs.  \s-1FIRSTKEY\s0 and \s-1NEXTKEY\s0
implement the \fIkeys()\fR and \fIeach()\fR functions to iterate over all the keys.
And \s-1DESTROY\s0 is called when the tied variable is garbage collected.
.PP
If this seems like a lot, then feel free to inherit from merely the
standard Tie::Hash module for most of your methods, redefining only the
interesting ones.  See the \fITie::Hash\fR manpage for details.
.PP
Remember that Perl distinguishes between a key not existing in the hash,
and the key existing in the hash but having a corresponding value of
\f(CWundef\fR.  The two possibilities can be tested with the \f(CWexists()\fR and
\f(CWdefined()\fR functions.
.PP
Here's an example of a somewhat interesting tied hash class:  it gives you
a hash representing a particular user's dot files.  You index into the hash
with the name of the file (minus the dot) and you get back that dot file's
contents.  For example:
.PP
.Vb 8
\&    use DotFiles;
\&    tie %dot, 'DotFiles';
\&    if ( $dot{profile} =~ /MANPATH/ ||
\&         $dot{login}   =~ /MANPATH/ ||
\&         $dot{cshrc}   =~ /MANPATH/    )
\&    {
\&        print "you seem to set your MANPATH\en";
\&    }
.Ve
Or here's another sample of using our tied class:
.PP
.Vb 5
\&    tie %him, 'DotFiles', 'daemon';
\&    foreach $f ( keys %him ) {
\&        printf "daemon dot file %s is size %d\en",
\&            $f, length $him{$f};
\&    }
.Ve
In our tied hash DotFiles example, we use a regular
hash for the object containing several important
fields, of which only the \f(CW{LIST}\fR field will be what the
user thinks of as the real hash.
.Ip "\s-1USER\s0" 5
whose dot files this object represents
.Ip "\s-1HOME\s0" 5
where those dot files live
.Ip "\s-1CLOBBER\s0" 5
whether we should try to change or remove those dot files
.Ip "\s-1LIST\s0" 5
the hash of dot file names and content mappings
.PP
Here's the start of \fIDotfiles.pm\fR:
.PP
.Vb 5
\&    package DotFiles;
\&    use Carp;
\&    sub whowasi { (caller(1))[3] . '()' }
\&    my $DEBUG = 0;
\&    sub debug { $DEBUG = @_ ? shift : 1 }
.Ve
For our example, we want to be able to emit debugging info to help in tracing
during development.  We keep also one convenience function around
internally to help print out warnings; \fIwhowasi()\fR returns the function name
that calls it.
.PP
Here are the methods for the DotFiles tied hash.
.Ip "\s-1TIEHASH\s0 classname, \s-1LIST\s0" 5
This is the constructor for the class.  That means it is expected to
return a blessed reference through which the new object (probably but not
necessarily an anonymous hash) will be accessed.
.Sp
Here's the constructor:
.Sp
.Vb 9
\&    sub TIEHASH {
\&        my $self = shift;
\&        my $user = shift || $>;
\&        my $dotdir = shift || '';
\&        croak "usage: @{[&whowasi]} [USER [DOTDIR]]" if @_;
\&        $user = getpwuid($user) if $user =~ /^\ed+$/;
\&        my $dir = (getpwnam($user))[7]
\&                || croak "@{[&whowasi]}: no user $user";
\&        $dir .= "/$dotdir" if $dotdir;
.Ve
.Vb 6
\&        my $node = {
\&            USER    => $user,
\&            HOME    => $dir,
\&            LIST    => {},
\&            CLOBBER => 0,
\&        };
.Ve
.Vb 9
\&        opendir(DIR, $dir)
\&                || croak "@{[&whowasi]}: can't opendir $dir: $!";
\&        foreach $dot ( grep /^\e./ && -f "$dir/$_", readdir(DIR)) {
\&            $dot =~ s/^\e.//;
\&            $node->{LIST}{$dot} = undef;
\&        }
\&        closedir DIR;
\&        return bless $node, $self;
\&    }
.Ve
It's probably worth mentioning that if you're going to filetest the
return values out of a readdir, you'd better prepend the directory
in question.  Otherwise, because we didn't \fIchdir()\fR there, it would
have been testing the wrong file.
.Ip "\s-1FETCH\s0 this, key" 5
This method will be triggered every time an element in the tied hash is
accessed (read).  It takes one argument beyond its self reference: the key
whose value we're trying to fetch.
.Sp
Here's the fetch for our DotFiles example.
.Sp
.Vb 6
\&    sub FETCH {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        my $dot = shift;
\&        my $dir = $self->{HOME};
\&        my $file = "$dir/.$dot";
.Ve
.Vb 4
\&        unless (exists $self->{LIST}->{$dot} || -f $file) {
\&            carp "@{[&whowasi]}: no $dot file" if $DEBUG;
\&            return undef;
\&        }
.Ve
.Vb 6
\&        if (defined $self->{LIST}->{$dot}) {
\&            return $self->{LIST}->{$dot};
\&        } else {
\&            return $self->{LIST}->{$dot} = `cat $dir/.$dot`;
\&        }
\&    }
.Ve
It was easy to write by having it call the Unix \fIcat\fR\|(1) command, but it
would probably be more portable to open the file manually (and somewhat
more efficient).  Of course, because dot files are a Unixy concept, we're
not that concerned.
.Ip "\s-1STORE\s0 this, key, value" 5
This method will be triggered every time an element in the tied hash is set
(written).  It takes two arguments beyond its self reference: the index at
which we're trying to store something, and the value we're trying to put
there.
.Sp
Here in our DotFiles example, we'll be careful not to let
them try to overwrite the file unless they've called the \fIclobber()\fR
method on the original object reference returned by \fItie()\fR.
.Sp
.Vb 7
\&    sub STORE {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        my $dot = shift;
\&        my $value = shift;
\&        my $file = $self->{HOME} . "/.$dot";
\&        my $user = $self->{USER};
.Ve
.Vb 2
\&        croak "@{[&whowasi]}: $file not clobberable"
\&            unless $self->{CLOBBER};
.Ve
.Vb 4
\&        open(F, "> $file") || croak "can't open $file: $!";
\&        print F $value;
\&        close(F);
\&    }
.Ve
If they wanted to clobber something, they might say:
.Sp
.Vb 3
\&    $ob = tie %daemon_dots, 'daemon';
\&    $ob->clobber(1);
\&    $daemon_dots{signature} = "A true daemon\en";
.Ve
Another way to lay hands on a reference to the underlying object is to
use the \fItied()\fR function, so they might alternately have set clobber
using:
.Sp
.Vb 2
\&    tie %daemon_dots, 'daemon';
\&    tied(%daemon_dots)->clobber(1);
.Ve
The clobber method is simply:
.Sp
.Vb 4
\&    sub clobber {
\&        my $self = shift;
\&        $self->{CLOBBER} = @_ ? shift : 1;
\&    }
.Ve
.Ip "\s-1DELETE\s0 this, key" 5
This method is triggered when we remove an element from the hash,
typically by using the \fIdelete()\fR function.  Again, we'll
be careful to check whether they really want to clobber files.
.Sp
.Vb 2
\&    sub DELETE   {
\&        carp &whowasi if $DEBUG;
.Ve
.Vb 10
\&        my $self = shift;
\&        my $dot = shift;
\&        my $file = $self->{HOME} . "/.$dot";
\&        croak "@{[&whowasi]}: won't remove file $file"
\&            unless $self->{CLOBBER};
\&        delete $self->{LIST}->{$dot};
\&        my $success = unlink($file);
\&        carp "@{[&whowasi]}: can't unlink $file: $!" unless $success;
\&        $success;
\&    }
.Ve
The value returned by \s-1DELETE\s0 becomes the return value of the call
to \fIdelete()\fR.  If you want to emulate the normal behavior of \fIdelete()\fR,
you should return whatever \s-1FETCH\s0 would have returned for this key.
In this example, we have chosen instead to return a value which tells
the caller whether the file was successfully deleted.
.Ip "\s-1CLEAR\s0 this" 5
This method is triggered when the whole hash is to be cleared, usually by
assigning the empty list to it.
.Sp
In our example, that would remove all the user's dot files!  It's such a
dangerous thing that they'll have to set \s-1CLOBBER\s0 to something higher than
1 to make it happen.
.Sp
.Vb 10
\&    sub CLEAR    {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        croak "@{[&whowasi]}: won't remove all dot files for $self->{USER}"
\&            unless $self->{CLOBBER} > 1;
\&        my $dot;
\&        foreach $dot ( keys %{$self->{LIST}}) {
\&            $self->DELETE($dot);
\&        }
\&    }
.Ve
.Ip "\s-1EXISTS\s0 this, key" 5
This method is triggered when the user uses the \fIexists()\fR function
on a particular hash.  In our example, we'll look at the \f(CW{LIST}\fR
hash element for this:
.Sp
.Vb 6
\&    sub EXISTS   {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        my $dot = shift;
\&        return exists $self->{LIST}->{$dot};
\&    }
.Ve
.Ip "\s-1FIRSTKEY\s0 this" 5
This method will be triggered when the user is going
to iterate through the hash, such as via a \fIkeys()\fR or \fIeach()\fR
call.
.Sp
.Vb 6
\&    sub FIRSTKEY {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        my $a = keys %{$self->{LIST}};          # reset each() iterator
\&        each %{$self->{LIST}}
\&    }
.Ve
.Ip "\s-1NEXTKEY\s0 this, lastkey" 5
This method gets triggered during a \fIkeys()\fR or \fIeach()\fR iteration.  It has a
second argument which is the last key that had been accessed.  This is
useful if you're carrying about ordering or calling the iterator from more
than one sequence, or not really storing things in a hash anywhere.
.Sp
For our example, we're using a real hash so we'll do just the simple
thing, but we'll have to go through the \s-1LIST\s0 field indirectly.
.Sp
.Vb 5
\&    sub NEXTKEY  {
\&        carp &whowasi if $DEBUG;
\&        my $self = shift;
\&        return each %{ $self->{LIST} }
\&    }
.Ve
.Ip "\s-1DESTROY\s0 this" 5
This method is triggered when a tied hash is about to go out of
scope.  You don't really need it unless you're trying to add debugging
or have auxiliary state to clean up.  Here's a very simple function:
.Sp
.Vb 3
\&    sub DESTROY  {
\&        carp &whowasi if $DEBUG;
\&    }
.Ve
.PP
Note that functions such as \fIkeys()\fR and \fIvalues()\fR may return huge array
values when used on large objects, like \s-1DBM\s0 files.  You may prefer to
use the \fIeach()\fR function to iterate over such.  Example:
.PP
.Vb 7
\&    # print out history file offsets
\&    use NDBM_File;
\&    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
\&    while (($key,$val) = each %HIST) {
\&        print $key, ' = ', unpack('L',$val), "\en";
\&    }
\&    untie(%HIST);
.Ve
.Sh "Tying FileHandles"
This is partially implemented now.
.PP
A class implementing a tied filehandle should define the following
methods: \s-1TIEHANDLE\s0, at least one of \s-1PRINT\s0, \s-1PRINTF\s0, \s-1READLINE\s0, \s-1GETC\s0, or \s-1READ\s0,
and possibly \s-1DESTROY\s0.
.PP
It is especially useful when perl is embedded in some other program,
where output to \s-1STDOUT\s0 and \s-1STDERR\s0 may have to be redirected in some
special way. See nvi and the Apache module for examples.
.PP
In our example we're going to create a shouting handle.
.PP
.Vb 1
\&    package Shout;
.Ve
.Ip "\s-1TIEHANDLE\s0 classname, \s-1LIST\s0" 5
This is the constructor for the class.  That means it is expected to
return a blessed reference of some sort. The reference can be used to
hold some internal information.
.Sp
.Vb 1
\&    sub TIEHANDLE { print "<shout>\en"; my $i; bless \e$i, shift }
.Ve
.Ip "\s-1PRINT\s0 this, \s-1LIST\s0" 5
This method will be triggered every time the tied handle is printed to
with the \f(CWprint()\fR function.
Beyond its self reference it also expects the list that was passed to
the print function.
.Sp
.Vb 1
\&    sub PRINT { $r = shift; $$r++; print join($,,map(uc($_),@_)),$\e }
.Ve
.Ip "\s-1PRINTF\s0 this, \s-1LIST\s0" 5
This method will be triggered every time the tied handle is printed to
with the \f(CWprintf()\fR function.
Beyond its self reference it also expects the format and list that was
passed to the printf function.
.Sp
.Vb 5
\&    sub PRINTF {
\&        shift;
\&        my $fmt = shift;
\&        print sprintf($fmt, @_)."\en";
\&    }
.Ve
.Ip "\s-1READ\s0 this \s-1LIST\s0" 5
This method will be called when the handle is read from via the \f(CWread\fR
or \f(CWsysread\fR functions.
.Sp
.Vb 5
\&    sub READ {
\&        $r = shift;
\&        my($buf,$len,$offset) = @_;
\&        print "READ called, \e$buf=$buf, \e$len=$len, \e$offset=$offset";
\&    }
.Ve
.Ip "\s-1READLINE\s0 this" 5
This method will be called when the handle is read from via <\s-1HANDLE\s0>.
The method should return undef when there is no more data.
.Sp
.Vb 1
\&    sub READLINE { $r = shift; "PRINT called $$r times\en"; }
.Ve
.Ip "\s-1GETC\s0 this" 5
This method will be called when the \f(CWgetc\fR function is called.
.Sp
.Vb 1
\&    sub GETC { print "Don't GETC, Get Perl"; return "a"; }
.Ve
.Ip "\s-1DESTROY\s0 this" 5
As with the other types of ties, this method will be called when the
tied handle is about to be destroyed. This is useful for debugging and
possibly cleaning up.
.Sp
.Vb 1
\&    sub DESTROY { print "</shout>\en" }
.Ve
.PP
Here's how to use our little example:
.PP
.Vb 5
\&    tie(*FOO,'Shout');
\&    print FOO "hello\en";
\&    $a = 4; $b = 6;
\&    print FOO $a, " plus ", $b, " equals ", $a + $b, "\en";
\&    print <FOO>;
.Ve
.Sh "The \f(CWuntie\fR Gotcha"
If you intend making use of the object returned from either \fItie()\fR or
\fItied()\fR, and if the tie's target class defines a destructor, there is a
subtle gotcha you \fImust\fR guard against.
.PP
As setup, consider this (admittedly rather contrived) example of a
tie; all it does is use a file to keep a log of the values assigned to
a scalar.
.PP
.Vb 1
\&    package Remember;
.Ve
.Vb 2
\&    use strict;
\&    use IO::File;
.Ve
.Vb 5
\&    sub TIESCALAR {
\&        my $class = shift;
\&        my $filename = shift;
\&        my $handle = new IO::File "> $filename"
\&                         or die "Cannot open $filename: $!\en";
.Ve
.Vb 3
\&        print $handle "The Start\en";
\&        bless {FH => $handle, Value => 0}, $class;
\&    }
.Ve
.Vb 4
\&    sub FETCH {
\&        my $self = shift;
\&        return $self->{Value};
\&    }
.Ve
.Vb 7
\&    sub STORE {
\&        my $self = shift;
\&        my $value = shift;
\&        my $handle = $self->{FH};
\&        print $handle "$value\en";
\&        $self->{Value} = $value;
\&    }
.Ve
.Vb 6
\&    sub DESTROY {
\&        my $self = shift;
\&        my $handle = $self->{FH};
\&        print $handle "The End\en";
\&        close $handle;
\&    }
.Ve
.Vb 1
\&    1;
.Ve
Here is an example that makes use of this tie:
.PP
.Vb 2
\&    use strict;
\&    use Remember;
.Ve
.Vb 7
\&    my $fred;
\&    tie $fred, 'Remember', 'myfile.txt';
\&    $fred = 1;
\&    $fred = 4;
\&    $fred = 5;
\&    untie $fred;
\&    system "cat myfile.txt";
.Ve
This is the output when it is executed:
.PP
.Vb 5
\&    The Start
\&    1
\&    4
\&    5
\&    The End
.Ve
So far so good.  Those of you who have been paying attention will have
spotted that the tied object hasn't been used so far.  So lets add an
extra method to the Remember class to allow comments to be included in
the file -- say, something like this:
.PP
.Vb 6
\&    sub comment {
\&        my $self = shift;
\&        my $text = shift;
\&        my $handle = $self->{FH};
\&        print $handle $text, "\en";
\&    }
.Ve
And here is the previous example modified to use the \f(CWcomment\fR method
(which requires the tied object):
.PP
.Vb 2
\&    use strict;
\&    use Remember;
.Ve
.Vb 8
\&    my ($fred, $x);
\&    $x = tie $fred, 'Remember', 'myfile.txt';
\&    $fred = 1;
\&    $fred = 4;
\&    comment $x "changing...";
\&    $fred = 5;
\&    untie $fred;
\&    system "cat myfile.txt";
.Ve
When this code is executed there is no output.  Here's why:
.PP
When a variable is tied, it is associated with the object which is the
return value of the \s-1TIESCALAR\s0, \s-1TIEARRAY\s0, or \s-1TIEHASH\s0 function.  This
object normally has only one reference, namely, the implicit reference
from the tied variable.  When \fIuntie()\fR is called, that reference is
destroyed.  Then, as in the first example above, the object's
destructor (\s-1DESTROY\s0) is called, which is normal for objects that have
no more valid references; and thus the file is closed.
.PP
In the second example, however, we have stored another reference to
the tied object in \f(CW$x\fR.  That means that when \fIuntie()\fR gets called
there will still be a valid reference to the object in existence, so
the destructor is not called at that time, and thus the file is not
closed.  The reason there is no output is because the file buffers
have not been flushed to disk.
.PP
Now that you know what the problem is, what can you do to avoid it?
Well, the good old \f(CW-w\fR flag will spot any instances where you call
\fIuntie()\fR and there are still valid references to the tied object.  If
the second script above is run with the \f(CW-w\fR flag, Perl prints this
warning message:
.PP
.Vb 1
\&    untie attempted while 1 inner references still exist
.Ve
To get the script to work properly and silence the warning make sure
there are no valid references to the tied object \fIbefore\fR \fIuntie()\fR is
called:
.PP
.Vb 2
\&    undef $x;
\&    untie $fred;
.Ve
.SH "SEE ALSO"
See the \fIDB_File\fR manpage or the \fIConfig\fR manpage for some interesting \fItie()\fR implementations.
.SH "BUGS"
Tied arrays are \fIincomplete\fR.  They are also distinctly lacking something
for the \f(CW$#ARRAY\fR access (which is hard, as it's an lvalue), as well as
the other obvious array functions, like \fIpush()\fR, \fIpop()\fR, \fIshift()\fR, \fIunshift()\fR,
and \fIsplice()\fR.
.PP
You cannot easily tie a multilevel data structure (such as a hash of
hashes) to a dbm file.  The first problem is that all but GDBM and
Berkeley DB have size limitations, but beyond that, you also have problems
with how references are to be represented on disk.  One experimental
module that does attempt to address this need partially is the MLDBM
module.  Check your nearest CPAN site as described in the \fIperlmodlib\fR manpage for
source code to MLDBM.
.SH "AUTHOR"
Tom Christiansen
.PP
TIEHANDLE by Sven Verdoolaege <\fIskimo@dns.ufsia.ac.be\fR> and Doug MacEachern <\fIdougm@osf.org\fR>

.rn }` ''
.IX Title "PERLTIE 1"
.IX Name "perltie - how to hide an object class in a simple variable"

.IX Header "NAME"

.IX Header "SYNOPSIS"

.IX Header "DESCRIPTION"

.IX Subsection "Tying Scalars"

.IX Item "\s-1TIESCALAR\s0 classname, \s-1LIST\s0"

.IX Item "\s-1FETCH\s0 this"

.IX Item "\s-1STORE\s0 this, value"

.IX Item "\s-1DESTROY\s0 this"

.IX Subsection "Tying Arrays"

.IX Item "\s-1TIEARRAY\s0 classname, \s-1LIST\s0"

.IX Item "\s-1FETCH\s0 this, index"

.IX Item "\s-1STORE\s0 this, index, value"

.IX Item "\s-1DESTROY\s0 this"

.IX Subsection "Tying Hashes"

.IX Item "\s-1USER\s0"

.IX Item "\s-1HOME\s0"

.IX Item "\s-1CLOBBER\s0"

.IX Item "\s-1LIST\s0"

.IX Item "\s-1TIEHASH\s0 classname, \s-1LIST\s0"

.IX Item "\s-1FETCH\s0 this, key"

.IX Item "\s-1STORE\s0 this, key, value"

.IX Item "\s-1DELETE\s0 this, key"

.IX Item "\s-1CLEAR\s0 this"

.IX Item "\s-1EXISTS\s0 this, key"

.IX Item "\s-1FIRSTKEY\s0 this"

.IX Item "\s-1NEXTKEY\s0 this, lastkey"

.IX Item "\s-1DESTROY\s0 this"

.IX Subsection "Tying FileHandles"

.IX Item "\s-1TIEHANDLE\s0 classname, \s-1LIST\s0"

.IX Item "\s-1PRINT\s0 this, \s-1LIST\s0"

.IX Item "\s-1PRINTF\s0 this, \s-1LIST\s0"

.IX Item "\s-1READ\s0 this \s-1LIST\s0"

.IX Item "\s-1READLINE\s0 this"

.IX Item "\s-1GETC\s0 this"

.IX Item "\s-1DESTROY\s0 this"

.IX Subsection "The \f(CWuntie\fR Gotcha"

.IX Header "SEE ALSO"

.IX Header "BUGS"

.IX Header "AUTHOR"

