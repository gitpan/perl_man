.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLSEC 1 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perlsec \- Perl security
.SH "DESCRIPTION"
Perl is designed to make it easy to program securely even when running
with extra privileges, like setuid or setgid programs.  Unlike most
command line shells, which are based on multiple substitution passes on
each line of the script, Perl uses a more conventional evaluation scheme
with fewer hidden snags.  Additionally, because the language has more
builtin functionality, it can rely less upon external (and possibly
untrustworthy) programs to accomplish its purposes.
.PP
Perl automatically enables a set of special security checks, called \fItaint
mode\fR, when it detects its program running with differing real and effective
user or group IDs.  The setuid bit in Unix permissions is mode 04000, the
setgid bit mode 02000; either or both may be set.  You can also enable taint
mode explicitly by using the \fB\-T\fR command line flag. This flag is
\fIstrongly\fR suggested for server programs and any program run on behalf of
someone else, such as a CGI script. Once taint mode is on, it's on for
the remainder of your script.
.PP
While in this mode, Perl takes special precautions called \fItaint
checks\fR to prevent both obvious and subtle traps.  Some of these checks
are reasonably simple, such as verifying that path directories aren't
writable by others; careful programmers have always used checks like
these.  Other checks, however, are best supported by the language itself,
and it is these checks especially that contribute to making a set-id Perl
program more secure than the corresponding C program.
.PP
You may not use data derived from outside your program to affect
something else outside your program\*(--at least, not by accident.  All
command line arguments, environment variables, locale information (see
the \fIperllocale\fR manpage), results of certain system calls (readdir, readlink,
the gecos field of getpw* calls), and all file input are marked as
\*(L"tainted\*(R".  Tainted data may not be used directly or indirectly in any
command that invokes a sub-shell, nor in any command that modifies
files, directories, or processes.  Any variable set
to a value derived from tainted data will itself be tainted,
even if it is logically impossible for the tainted data
to alter the variable.  Because taintedness is associated with each
scalar value, some elements of an array can be tainted and others not.
.PP
For example:
.PP
.Vb 8
\&    $arg = shift;               # $arg is tainted
\&    $hid = $arg, 'bar';         # $hid is also tainted
\&    $line = <>;                 # Tainted
\&    $line = <STDIN>;            # Also tainted
\&    open FOO, "/home/me/bar" or die $!;
\&    $line = <FOO>;              # Still tainted
\&    $path = $ENV{'PATH'};       # Tainted, but see below
\&    $data = 'abc';              # Not tainted
.Ve
.Vb 4
\&    system "echo $arg";         # Insecure
\&    system "/bin/echo", $arg;   # Secure (doesn't use sh)
\&    system "echo $hid";         # Insecure
\&    system "echo $data";        # Insecure until PATH set
.Ve
.Vb 1
\&    $path = $ENV{'PATH'};       # $path now tainted
.Ve
.Vb 2
\&    $ENV{'PATH'} = '/bin:/usr/bin';
\&    delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};
.Ve
.Vb 2
\&    $path = $ENV{'PATH'};       # $path now NOT tainted
\&    system "echo $data";        # Is secure now!
.Ve
.Vb 2
\&    open(FOO, "< $arg");        # OK - read-only file
\&    open(FOO, "> $arg");        # Not OK - trying to write
.Ve
.Vb 3
\&    open(FOO,"echo $arg|");     # Not OK, but...
\&    open(FOO,"-|")
\&        or exec 'echo', $arg;   # OK
.Ve
.Vb 1
\&    $shout = `echo $arg`;       # Insecure, $shout now tainted
.Ve
.Vb 2
\&    unlink $data, $arg;         # Insecure
\&    umask $arg;                 # Insecure
.Ve
.Vb 3
\&    exec "echo $arg";           # Insecure
\&    exec "echo", $arg;          # Secure (doesn't use the shell)
\&    exec "sh", '-c', $arg;      # Considered secure, alas!
.Ve
.Vb 2
\&    @files = <*.c>;             # Always insecure (uses csh)
\&    @files = glob('*.c');       # Always insecure (uses csh)
.Ve
If you try to do something insecure, you will get a fatal error saying
something like \*(L"Insecure dependency\*(R" or \*(L"Insecure PATH\*(R".  Note that you
can still write an insecure \fBsystem\fR or \fBexec\fR, but only by explicitly
doing something like the last example above.
.Sh "Laundering and Detecting Tainted Data"
To test whether a variable contains tainted data, and whose use would thus
trigger an \*(L"Insecure dependency\*(R" message, check your nearby \s-1CPAN\s0 mirror
for the \fITaint.pm\fR module, which should become available around November
1997.  Or you may be able to use the following \fIis_tainted()\fR function.
.PP
.Vb 6
\&    sub is_tainted {
\&        return ! eval {
\&            join('',@_), kill 0;
\&            1;
\&        };
\&    }
.Ve
This function makes use of the fact that the presence of tainted data
anywhere within an expression renders the entire expression tainted.  It
would be inefficient for every operator to test every argument for
taintedness.  Instead, the slightly more efficient and conservative
approach is used that if any tainted value has been accessed within the
same expression, the whole expression is considered tainted.
.PP
But testing for taintedness gets you only so far.  Sometimes you have just
to clear your data's taintedness.  The only way to bypass the tainting
mechanism is by referencing subpatterns from a regular expression match.
Perl presumes that if you reference a substring using \f(CW$1\fR, \f(CW$2\fR, etc., that
you knew what you were doing when you wrote the pattern.  That means using
a bit of thought\*(--don't just blindly untaint anything, or you defeat the
entire mechanism.  It's better to verify that the variable has only good
characters (for certain values of \*(L"good") rather than checking whether it
has any bad characters.  That's because it's far too easy to miss bad
characters that you never thought of.
.PP
Here's a test to make sure that the data contains nothing but \*(L"word\*(R"
characters (alphabetics, numerics, and underscores), a hyphen, an at sign,
or a dot.
.PP
.Vb 5
\&    if ($data =~ /^([-\e@\ew.]+)$/) {
\&        $data = $1;                     # $data now untainted
\&    } else {
\&        die "Bad data in $data";        # log this somewhere
\&    }
.Ve
This is fairly secure because \f(CW/\ew+/\fR doesn't normally match shell
metacharacters, nor are dot, dash, or at going to mean something special
to the shell.  Use of \f(CW/.+/\fR would have been insecure in theory because
it lets everything through, but Perl doesn't check for that.  The lesson
is that when untainting, you must be exceedingly careful with your patterns.
Laundering data using regular expression is the \fI\s-1ONLY\s0\fR mechanism for
untainting dirty data, unless you use the strategy detailed below to fork
a child of lesser privilege.
.PP
The example does not untaint \f(CW$data\fR if \f(CWuse locale\fR is in effect,
because the characters matched by \f(CW\ew\fR are determined by the locale.
Perl considers that locale definitions are untrustworthy because they
contain data from outside the program.  If you are writing a
locale-aware program, and want to launder data with a regular expression
containing \f(CW\ew\fR, put \f(CWno locale\fR ahead of the expression in the same
block.  See the \f(CWSECURITY\fR entry in the \fIperllocale\fR manpage for further discussion and examples.
.Sh "Switches On the \*(M"#!\*(S" Line"
When you make a script executable, in order to make it usable as a
command, the system will pass switches to perl from the script's #!
line.  Perl checks that any command line switches given to a setuid
(or setgid) script actually match the ones set on the #! line.  Some
Unix and Unix-like environments impose a one-switch limit on the #!
line, so you may need to use something like \f(CW-wU\fR instead of \f(CW-w -U\fR
under such systems.  (This issue should arise only in Unix or
Unix-like environments that support #! and setuid or setgid scripts.)
.Sh "Cleaning Up Your Path"
For \*(L"Insecure \f(CW$ENV{PATH}\fR\*(R" messages, you need to set \f(CW$ENV{'PATH'}\fR to a
known value, and each directory in the path must be non-writable by others
than its owner and group.  You may be surprised to get this message even
if the pathname to your executable is fully qualified.  This is \fInot\fR
generated because you didn't supply a full path to the program; instead,
it's generated because you never set your \s-1PATH\s0 environment variable, or
you didn't set it to something that was safe.  Because Perl can't
guarantee that the executable in question isn't itself going to turn
around and execute some other program that is dependent on your \s-1PATH\s0, it
makes sure you set the \s-1PATH\s0.
.PP
It's also possible to get into trouble with other operations that don't
care whether they use tainted values.  Make judicious use of the file
tests in dealing with any user-supplied filenames.  When possible, do
opens and such \fBafter\fR properly dropping any special user (or group!)
privileges. Perl doesn't prevent you from opening tainted filenames for reading,
so be careful what you print out.  The tainting mechanism is intended to
prevent stupid mistakes, not to remove the need for thought.
.PP
Perl does not call the shell to expand wild cards when you pass \fBsystem\fR
and \fBexec\fR explicit parameter lists instead of strings with possible shell
wildcards in them.  Unfortunately, the \fBopen\fR, \fBglob\fR, and
backtick functions provide no such alternate calling convention, so more
subterfuge will be required.
.PP
Perl provides a reasonably safe way to open a file or pipe from a setuid
or setgid program: just create a child process with reduced privilege who
does the dirty work for you.  First, fork a child using the special
\fBopen\fR syntax that connects the parent and child by a pipe.  Now the
child resets its \s-1ID\s0 set and any other per-process attributes, like
environment variables, umasks, current working directories, back to the
originals or known safe values.  Then the child process, which no longer
has any special permissions, does the \fBopen\fR or other system call.
Finally, the child passes the data it managed to access back to the
parent.  Because the file or pipe was opened in the child while running
under less privilege than the parent, it's not apt to be tricked into
doing something it shouldn't.
.PP
Here's a way to do backticks reasonably safely.  Notice how the \fBexec\fR is
not called with a string that the shell could expand.  This is by far the
best way to call something that might be subjected to shell escapes: just
never call the shell at all.  
.PP
.Vb 20
\&    use English;
\&    die "Can't fork: $!" unless defined $pid = open(KID, "-|");
\&    if ($pid) {           # parent
\&        while (<KID>) {
\&            # do something
\&        }
\&        close KID;
\&    } else {
\&        my @temp = ($EUID, $EGID);
\&        $EUID = $UID;
\&        $EGID = $GID;    # XXX: initgroups() not called
\&        # Make sure privs are really gone
\&        ($EUID, $EGID) = @temp;
\&        die "Can't drop privileges" unless
\&            $UID == $EUID and
\&            $GID eq $EGID;      # String test
\&        $ENV{PATH} = "/bin:/usr/bin";
\&        exec 'myprog', 'arg1', 'arg2' or
\&        die "can't exec myprog: $!";
\&    }
.Ve
A similar strategy would work for wildcard expansion via \f(CWglob\fR, although
you can use \f(CWreaddir\fR instead.
.PP
Taint checking is most useful when although you trust yourself not to have
written a program to give away the farm, you don't necessarily trust those
who end up using it not to try to trick it into doing something bad.  This
is the kind of security checking that's useful for set-id programs and
programs launched on someone else's behalf, like \s-1CGI\s0 programs.
.PP
This is quite different, however, from not even trusting the writer of the
code not to try to do something evil.  That's the kind of trust needed
when someone hands you a program you've never seen before and says, \*(L"Here,
run this.\*(R"  For that kind of safety, check out the Safe module,
included standard in the Perl distribution.  This module allows the
programmer to set up special compartments in which all system operations
are trapped and namespace access is carefully controlled.
.Sh "Security Bugs"
Beyond the obvious problems that stem from giving special privileges to
systems as flexible as scripts, on many versions of Unix, set-id scripts
are inherently insecure right from the start.  The problem is a race
condition in the kernel.  Between the time the kernel opens the file to
see which interpreter to run and when the (now-set-id) interpreter turns
around and reopens the file to interpret it, the file in question may have
changed, especially if you have symbolic links on your system.
.PP
Fortunately, sometimes this kernel \*(L"feature\*(R" can be disabled.
Unfortunately, there are two ways to disable it.  The system can simply
outlaw scripts with any set-id bit set, which doesn't help much.
Alternately, it can simply ignore the set-id bits on scripts.  If the
latter is true, Perl can emulate the setuid and setgid mechanism when it
notices the otherwise useless setuid/gid bits on Perl scripts.  It does
this via a special executable called \fBsuidperl\fR that is automatically
invoked for you if it's needed.
.PP
However, if the kernel set-id script feature isn't disabled, Perl will
complain loudly that your set-id script is insecure.  You'll need to
either disable the kernel set-id script feature, or put a C wrapper around
the script.  A C wrapper is just a compiled program that does nothing
except call your Perl program.   Compiled programs are not subject to the
kernel bug that plagues set-id scripts.  Here's a simple wrapper, written
in C:
.PP
.Vb 6
\&    #define REAL_PATH "/path/to/script"
\&    main(ac, av)
\&        char **av;
\&    {
\&        execv(REAL_PATH, av);
\&    }
.Ve
Compile this wrapper into a binary executable and then make \fIit\fR rather
than your script setuid or setgid.
.PP
See the program \fBwrapsuid\fR in the \fIeg\fR directory of your Perl
distribution for a convenient way to do this automatically for all your
setuid Perl programs.  It moves setuid scripts into files with the same
name plus a leading dot, and then compiles a wrapper like the one above
for each of them.
.PP
In recent years, vendors have begun to supply systems free of this
inherent security bug.  On such systems, when the kernel passes the name
of the set-id script to open to the interpreter, rather than using a
pathname subject to meddling, it instead passes \fI/dev/fd/3\fR.  This is a
special file already opened on the script, so that there can be no race
condition for evil scripts to exploit.  On these systems, Perl should be
compiled with \f(CW-DSETUID_SCRIPTS_ARE_SECURE_NOW\fR.  The \fBConfigure\fR
program that builds Perl tries to figure this out for itself, so you
should never have to specify this yourself.  Most modern releases of
SysVr4 and \s-1BSD\s0 4.4 use this approach to avoid the kernel race condition.
.PP
Prior to release 5.003 of Perl, a bug in the code of \fBsuidperl\fR could
introduce a security hole in systems compiled with strict \s-1POSIX\s0
compliance.
.Sh "Protecting Your Programs"
There are a number of ways to hide the source to your Perl programs,
with varying levels of \*(L"security\*(R".
.PP
First of all, however, you \fIcan't\fR take away read permission, because
the source code has to be readable in order to be compiled and
interpreted.  (That doesn't mean that a \s-1CGI\s0 script's source is
readable by people on the web, though.)  So you have to leave the
permissions at the socially friendly 0755 level.
.PP
Some people regard this as a security problem.  If your program does
insecure things, and relies on people not knowing how to exploit those
insecurities, it is not secure.  It is often possible for someone to
determine the insecure things and exploit them without viewing the
source.  Security through obscurity, the name for hiding your bugs
instead of fixing them, is little security indeed.
.PP
You can try using encryption via source filters (Filter::* from \s-1CPAN\s0).
But crackers might be able to decrypt it.  You can try using the
byte code compiler and interpreter described below, but crackers might
be able to de-compile it.  You can try using the native-code compiler
described below, but crackers might be able to disassemble it.  These
pose varying degrees of difficulty to people wanting to get at your
code, but none can definitively conceal it (this is true of every
language, not just Perl).
.PP
If you're concerned about people profiting from your code, then the
bottom line is that nothing but a restrictive licence will give you
legal security.  License your software and pepper it with threatening
statements like \*(L"This is unpublished proprietary software of \s-1XYZ\s0 Corp.
Your access to it does not give you permission to use it blah blah
blah.\*(R"  You should see a lawyer to be sure your licence's wording will
stand up in court.

.rn }` ''
.IX Title "PERLSEC 1"
.IX Name "perlsec - Perl security"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Subsection "Laundering and Detecting Tainted Data"

.IX Subsection "Switches On the \*(M"#!\*(S" Line"

.IX Subsection "Cleaning Up Your Path"

.IX Subsection "Security Bugs"

.IX Subsection "Protecting Your Programs"

