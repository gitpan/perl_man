.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLDIAG 1 "perl 5.005, patch 53" "5/Nov/98" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perldiag \- various Perl diagnostics
.SH "DESCRIPTION"
These messages are classified as follows (listed in increasing order of
desperation):
.PP
.Vb 7
\&    (W) A warning (optional).
\&    (D) A deprecation (optional).
\&    (S) A severe warning (mandatory).
\&    (F) A fatal error (trappable).
\&    (P) An internal error you should never see (trappable).
\&    (X) A very fatal error (nontrappable).
\&    (A) An alien error message (not generated by Perl).
.Ve
Optional warnings are enabled by using the \fB\-w\fR switch.  Warnings may
be captured by setting \f(CW$SIG{__WARN__}\fR to a reference to a routine that
will be called on each warning instead of printing it.  See the \fIperlvar\fR manpage.
Trappable errors may be trapped using the eval operator.  See
the \f(CWeval\fR entry in the \fIperlfunc\fR manpage.
.PP
Some of these messages are generic.  Spots that vary are denoted with a \f(CW%s\fR,
just as in a printf format.  Note that some messages start with a \f(CW%s\fR!
The symbols \f(CW"%(-?@\fR sort before the letters, while \f(CW[\fR and \f(CW\e\fR sort after.
.Ip "\*(N"my\*(T" variable %s can't be in a package" 4
(F) Lexically scoped variables aren't in a package, so it doesn't make sense
to try to declare one with a package qualifier on the front.  Use \fIlocal()\fR
if you want to localize a package variable.
.Ip "\*(N"my\*(T" variable %s masks earlier declaration in same %s" 4
(W) A lexical variable has been redeclared in the current scope or statement,
effectively eliminating all access to the previous instance.  This is almost
always a typographical error.  Note that the earlier variable will still exist
until the end of the scope or until all closure referents to it are
destroyed.
.Ip "\*(N"no\*(T" not allowed in expression" 4
(F) The \*(L"no\*(R" keyword is recognized and executed at compile time, and returns
no useful value.  See the \fIperlmod\fR manpage.
.Ip "\*(N"use\*(T" not allowed in expression" 4
(F) The \*(L"use\*(R" keyword is recognized and executed at compile time, and returns
no useful value.  See the \fIperlmod\fR manpage.
.Ip "% may only be used in unpack" 4
(F) You can't pack a string by supplying a checksum, because the
checksumming process loses information, and you can't go the other
way.  See the \f(CWunpack\fR entry in the \fIperlfunc\fR manpage.
.Ip "%s (...) interpreted as function" 4
(W) You've run afoul of the rule that says that any list operator followed
by parentheses turns into a function, with all the list operators arguments
found inside the parentheses.  See the section on \fITerms and List Operators (Leftward)\fR in the \fIperlop\fR manpage.
.Ip "%s argument is not a \s-1HASH\s0 element" 4
(F) The argument to \fIexists()\fR must be a hash element, such as
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref->[12]->{"susie"}
.Ve
.Ip "%s argument is not a \s-1HASH\s0 element or slice" 4
(F) The argument to \fIdelete()\fR must be either a hash element, such as
.Sp
.Vb 2
\&    $foo{$bar}
\&    $ref->[12]->{"susie"}
.Ve
or a hash slice, such as
.Sp
.Vb 2
\&    @foo{$bar, $baz, $xyzzy}
\&    @{$ref->[12]}{"susie", "queue"}
.Ve
.Ip "%s did not return a true value" 4
(F) A required (or used) file must return a true value to indicate that
it compiled correctly and ran its initialization code correctly.  It's
traditional to end such a file with a \*(L"1;\*(R", though any true value would
do.  See the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage.
.Ip "%s found where operator expected" 4
(S) The Perl lexer knows whether to expect a term or an operator.  If it
sees what it knows to be a term when it was expecting to see an operator,
it gives you this warning.  Usually it indicates that an operator or
delimiter was omitted, such as a semicolon.
.Ip "%s had compilation errors" 4
(F) The final summary message when a \f(CWperl -c\fR fails.
.Ip "%s has too many errors" 4
(F) The parser has given up trying to parse the program after 10 errors.
Further error messages would likely be uninformative.
.Ip "%s matches null string many times" 4
(W) The pattern you've specified would be an infinite loop if the
regular expression engine didn't specifically check for that.  See the \fIperlre\fR manpage.
.Ip "%s never introduced" 4
(S) The symbol in question was declared but somehow went out of scope
before it could possibly have been used.
.Ip "%s syntax \s-1OK\s0" 4
(F) The final summary message when a \f(CWperl -c\fR succeeds.
.Ip "%s: Command not found" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "%s: Expression syntax" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "%s: Undefined variable" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "%s: not found" 4
(A) You've accidentally run your script through the Bourne shell
instead of Perl.  Check the #! line, or manually feed your script
into Perl yourself.
.Ip "(Missing semicolon on previous line?)" 4
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  Don't automatically put a semicolon on
the previous line just because you saw this message.
.Ip "\fB\-P\fR not allowed for setuid/setgid script" 4
(F) The script would have to be opened by the C preprocessor by name,
which provides a race condition that breaks security.
.Ip "\f(CW-T\fR and \f(CW-B\fR not implemented on filehandles" 4
(F) Perl can't peek at the stdio buffer of filehandles when it doesn't
know about your kind of stdio.  You'll have to use a filename instead.
.Ip "\f(CW-p\fR destination: %s" 4
(F) An error occurred during the implicit output invoked by the \f(CW-p\fR
command-line switch.  (This output goes to \s-1STDOUT\s0 unless you've
redirected it with \fIselect()\fR.)
.Ip "500 Server error" 4
See Server error.
.Ip "?+* follows nothing in regexp" 4
(F) You started a regular expression with a quantifier.  Backslash it
if you meant it literally.   See the \fIperlre\fR manpage.
.Ip "@ outside of string" 4
(F) You had a pack template that specified an absolute position outside
the string being unpacked.  See the \f(CWpack\fR entry in the \fIperlfunc\fR manpage.
.Ip "accept() on closed fd" 4
(W) You tried to do an accept on a closed socket.  Did you forget to check
the return value of your \fIsocket()\fR call?  See the \f(CWaccept\fR entry in the \fIperlfunc\fR manpage.
.Ip "Allocation too large: %lx" 4
(X) You can't allocate more than 64K on an \s-1MS\s0\-\s-1DOS\s0 machine.
.Ip "Applying %s to %s will act on scalar(%s)" 4
(W) The pattern match (//), substitution (s///), and transliteration (tr///)
operators work on scalar values.  If you apply one of them to an array
or a hash, it will convert the array or hash to a scalar value -- the
length of an array, or the population info of a hash -- and then work on
that scalar value.  This is probably not what you meant to do.  See
the \f(CWgrep\fR entry in the \fIperlfunc\fR manpage and the \f(CWmap\fR entry in the \fIperlfunc\fR manpage for alternatives.
.Ip "Arg too short for msgsnd" 4
(F) \fImsgsnd()\fR requires a string at least as long as \fIsizeof\fR\|(long).
.Ip "Ambiguous use of %s resolved as %s" 4
(W)(S) You said something that may not be interpreted the way
you thought.  Normally it's pretty easy to disambiguate it by supplying
a missing quote, operator, parenthesis pair or declaration.
.Ip "Ambiguous call resolved as \s-1CORE\s0::%s(), qualify as such or use &" 4
(W) A subroutine you have declared has the same name as a Perl keyword,
and you have used the name without qualification for calling one or the
other.  Perl decided to call the builtin because the subroutine is
not imported.
.Sp
To force interpretation as a subroutine call, either put an ampersand
before the subroutine name, or qualify the name with its package.
Alternatively, you can import the subroutine (or pretend that it's
imported with the \f(CWuse subs\fR pragma).
.Sp
To silently interpret it as the Perl operator, use the \f(CWCORE::\fR prefix
on the operator (e.g. \f(CWCORE::log($x)\fR) or by declaring the subroutine
to be an object method (see the \fIattrs\fR manpage).
.Ip "Args must match #! line" 4
(F) The setuid emulator requires that the arguments Perl was invoked
with match the arguments specified on the #! line.  Since some systems
impose a one-argument limit on the #! line, try combining switches;
for example, turn \f(CW-w -U\fR into \f(CW-wU\fR.
.Ip "Argument \*(N"%s\*(T" isn't numeric%s" 4
(W) The indicated string was fed as an argument to an operator that
expected a numeric value instead.  If you're fortunate the message
will identify which operator was so unfortunate.
.Ip "Array @%s missing the @ in argument %d of %s()" 4
(D) Really old Perl let you omit the @ on array names in some spots.  This
is now heavily deprecated.
.Ip "assertion botched: %s" 4
(P) The malloc package that comes with Perl had an internal failure.
.Ip "Assertion failed: file \*(N"%s\*(T"" 4
(P) A general assertion failed.  The file in question must be examined.
.Ip "Assignment to both a list and a scalar" 4
(F) If you assign to a conditional operator, the 2nd and 3rd arguments
must either both be scalars or both be lists.  Otherwise Perl won't
know which context to supply to the right side.
.Ip "Attempt to free non-arena \s-1SV\s0: 0x%lx" 4
(P) All \s-1SV\s0 objects are supposed to be allocated from arenas that will
be garbage collected on exit.  An \s-1SV\s0 was discovered to be outside any
of those arenas.
.Ip "Attempt to free nonexistent shared string" 4
(P) Perl maintains a reference counted internal table of strings to
optimize the storage and access of hash keys and other strings.  This
indicates someone tried to decrement the reference count of a string
that can no longer be found in the table.
.Ip "Attempt to free temp prematurely" 4
(W) Mortalized values are supposed to be freed by the \fIfree_tmps()\fR
routine.  This indicates that something else is freeing the \s-1SV\s0 before
the \fIfree_tmps()\fR routine gets a chance, which means that the \fIfree_tmps()\fR
routine will be freeing an unreferenced scalar when it does try to free
it.
.Ip "Attempt to free unreferenced glob pointers" 4
(P) The reference counts got screwed up on symbol aliases.
.Ip "Attempt to free unreferenced scalar" 4
(W) Perl went to decrement the reference count of a scalar to see if it
would go to 0, and discovered that it had already gone to 0 earlier,
and should have been freed, and in fact, probably was freed.  This
could indicate that \fISvREFCNT_dec()\fR was called too many times, or that
\fISvREFCNT_inc()\fR was called too few times, or that the \s-1SV\s0 was mortalized
when it shouldn't have been, or that memory has been corrupted.
.Ip "Attempt to pack pointer to temporary value" 4
(W) You tried to pass a temporary value (like the result of a
function, or a computed expression) to the \*(L"p\*(R" \fIpack()\fR template.  This
means the result contains a pointer to a location that could become
invalid anytime, even before the end of the current statement.  Use
literals or global values as arguments to the \*(L"p\*(R" \fIpack()\fR template to
avoid this warning.
.Ip "Attempt to use reference as lvalue in substr" 4
(W) You supplied a reference as the first argument to \fIsubstr()\fR used
as an lvalue, which is pretty strange.  Perhaps you forgot to
dereference it first.  See the \f(CWsubstr\fR entry in the \fIperlfunc\fR manpage.
.Ip "Bad arg length for %s, is %d, should be %d" 4
(F) You passed a buffer of the wrong size to one of \fImsgctl()\fR, \fIsemctl()\fR or
\fIshmctl()\fR.  In C parlance, the correct sizes are, respectively,
sizeof(struct\ msqid_ds\ *), sizeof(struct\ semid_ds\ *), and
sizeof(struct\ shmid_ds\ *).
.Ip "Bad filehandle: %s" 4
(F) A symbol was passed to something wanting a filehandle, but the symbol
has no filehandle associated with it.  Perhaps you didn't do an \fIopen()\fR, or
did it in another package.
.Ip "Bad free() ignored" 4
(S) An internal routine called \fIfree()\fR on something that had never been
\fImalloc()\fRed in the first place. Mandatory, but can be disabled by
setting environment variable \f(CWPERL_BADFREE\fR to 1.
.Sp
This message can be quite often seen with DB_File on systems with
\*(L"hard\*(R" dynamic linking, like \f(CWAIX\fR and \f(CWOS/2\fR. It is a bug of
\f(CWBerkeley DB\fR which is left unnoticed if \f(CWDB\fR uses \fIforgiving\fR
system \fImalloc()\fR.
.Ip "Bad hash" 4
(P) One of the internal hash routines was passed a null \s-1HV\s0 pointer.
.Ip "Bad index while coercing array into hash" 4
(F) The index looked up in the hash found as the 0'th element of a
pseudo-hash is not legal.  Index values must be at 1 or greater.
See the \fIperlref\fR manpage.
.Ip "Bad name after %s::" 4
(F) You started to name a symbol by using a package prefix, and then didn't
finish the symbol.  In particular, you can't interpolate outside of quotes,
so
.Sp
.Vb 2
\&    $var = 'myvar';
\&    $sym = mypack::$var;
.Ve
is not the same as
.Sp
.Vb 2
\&    $var = 'myvar';
\&    $sym = "mypack::$var";
.Ve
.Ip "Bad symbol for array" 4
(P) An internal request asked to add an array entry to something that
wasn't a symbol table entry.
.Ip "Bad symbol for filehandle" 4
(P) An internal request asked to add a filehandle entry to something that
wasn't a symbol table entry.
.Ip "Bad symbol for hash" 4
(P) An internal request asked to add a hash entry to something that
wasn't a symbol table entry.
.Ip "Badly placed ()'s" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "Bareword \*(N"%s\*(T" not allowed while \*(N"strict subs\*(T" in use" 4
(F) With \*(L"strict subs\*(R" in use, a bareword is only allowed as a
subroutine identifier, in curly braces or to the left of the \*(L"=>\*(R" symbol.
Perhaps you need to predeclare a subroutine?
.Ip "Bareword \*(N"%s\*(T" refers to nonexistent package" 4
(W) You used a qualified bareword of the form \f(CWFoo::\fR, but
the compiler saw no other uses of that namespace before that point.
Perhaps you need to predeclare a package?
.Ip "\s-1BEGIN\s0 failed\*(--compilation aborted" 4
(F) An untrapped exception was raised while executing a \s-1BEGIN\s0 subroutine.
Compilation stops immediately and the interpreter is exited.
.Ip "\s-1BEGIN\s0 not safe after errors\*(--compilation aborted" 4
(F) Perl found a \f(CWBEGIN {}\fR subroutine (or a \f(CWuse\fR directive, which
implies a \f(CWBEGIN {}\fR) after one or more compilation errors had
already occurred.  Since the intended environment for the \f(CWBEGIN {}\fR
could not be guaranteed (due to the errors), and since subsequent code
likely depends on its correct operation, Perl just gave up.
.Ip "bind() on closed fd" 4
(W) You tried to do a bind on a closed socket.  Did you forget to check
the return value of your \fIsocket()\fR call?  See the \f(CWbind\fR entry in the \fIperlfunc\fR manpage.
.Ip "Bizarre copy of %s in %s" 4
(P) Perl detected an attempt to copy an internal value that is not copiable.
.Ip "Callback called exit" 4
(F) A subroutine invoked from an external package via \fIperl_call_sv()\fR
exited by calling exit.
.Ip "Can't \*(N"goto\*(T" outside a block" 4
(F) A \*(L"goto\*(R" statement was executed to jump out of what might look
like a block, except that it isn't a proper block.  This usually
occurs if you tried to jump out of a \fIsort()\fR block or subroutine, which
is a no-no.  See the \f(CWgoto\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't \*(N"goto\*(T" into the middle of a foreach loop" 4
(F) A \*(L"goto\*(R" statement was executed to jump into the middle of a
foreach loop.  You can't get there from here.  See the \f(CWgoto\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't \*(N"last\*(T" outside a block" 4
(F) A \*(L"last\*(R" statement was executed to break out of the current block,
except that there's this itty bitty problem called there isn't a
current block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't count as a
\*(L"loopish\*(R" block, as doesn't a block given to \fIsort()\fR.  You can usually double
the curlies to get the same effect though, because the inner curlies
will be considered a block that loops once.  See the \f(CWlast\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't \*(N"next\*(T" outside a block" 4
(F) A \*(L"next\*(R" statement was executed to reiterate the current block, but
there isn't a current block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't
count as a \*(L"loopish\*(R" block, as doesn't a block given to \fIsort()\fR.  You can
usually double the curlies to get the same effect though, because the inner
curlies will be considered a block that loops once.  See the \f(CWnext\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't \*(N"redo\*(T" outside a block" 4
(F) A \*(L"redo\*(R" statement was executed to restart the current block, but
there isn't a current block.  Note that an \*(L"if\*(R" or \*(L"else\*(R" block doesn't
count as a \*(L"loopish\*(R" block, as doesn't a block given to \fIsort()\fR.  You can
usually double the curlies to get the same effect though, because the inner
curlies will be considered a block that loops once.  See the \f(CWredo\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't bless non-reference value" 4
(F) Only hard references may be blessed.  This is how Perl \*(L"enforces\*(R"
encapsulation of objects.  See the \fIperlobj\fR manpage.
.Ip "Can't break at that line" 4
(S) A warning intended to only be printed while running within the debugger, indicating
the line number specified wasn't the location of a statement that could
be stopped at.
.Ip "Can't call method \*(N"%s\*(T" in empty package \*(N"%s\*(T"" 4
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't have \s-1ANYTHING\s0 defined
in it, let alone methods.  See the \fIperlobj\fR manpage.
.Ip "Can't call method \*(N"%s\*(T" on unblessed reference" 4
(F) A method call must know in what package it's supposed to run.  It
ordinarily finds this out from the object reference you supply, but
you didn't supply an object reference in this case.  A reference isn't
an object reference until it has been blessed.  See the \fIperlobj\fR manpage.
.Ip "Can't call method \*(N"%s\*(T" without a package or object reference" 4
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an expression that returns
a defined value which is neither an object reference nor a package name.
Something like this will reproduce the error:
.Sp
.Vb 3
\&    $BADREF = 42;
\&    process $BADREF 1,2,3;
\&    $BADREF->process(1,2,3);
.Ve
.Ip "Can't call method \*(N"%s\*(T" on an undefined value" 4
(F) You used the syntax of a method call, but the slot filled by the
object reference or package name contains an undefined value.
Something like this will reproduce the error:
.Sp
.Vb 3
\&    $BADREF = undef;
\&    process $BADREF 1,2,3;
\&    $BADREF->process(1,2,3);
.Ve
.Ip "Can't chdir to %s" 4
(F) You called \f(CWperl -x/foo/bar\fR, but \f(CW/foo/bar\fR is not a directory
that you can chdir to, possibly because it doesn't exist.
.Ip "Can't coerce %s to integer in %s" 4
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.  So you can't
say things like:
.Sp
.Vb 1
\&    *foo += 1;
.Ve
You \s-1CAN\s0 say
.Sp
.Vb 2
\&    $foo = *foo;
\&    $foo += 1;
.Ve
but then \f(CW$foo\fR no longer contains a glob.
.Ip "Can't coerce %s to number in %s" 4
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.
.Ip "Can't coerce %s to string in %s" 4
(F) Certain types of SVs, in particular real symbol table entries
(typeglobs), can't be forced to stop being what they are.
.Ip "Can't coerce array into hash" 4
(F) You used an array where a hash was expected, but the array has no
information on how to map from keys to array indices.  You can do that
only with arrays that have a hash reference at index 0.
.Ip "Can't create pipe mailbox" 4
(P) An error peculiar to \s-1VMS\s0.  The process is suffering from exhausted quotas
or other plumbing problems.
.Ip "Can't declare %s in my" 4
(F) Only scalar, array, and hash variables may be declared as lexical variables.
They must have ordinary identifiers as names.
.Ip "Can't do inplace edit on %s: %s" 4
(S) The creation of the new file failed for the indicated reason.
.Ip "Can't do inplace edit without backup" 4
(F) You're on a system such as \s-1MS\s0\-\s-1DOS\s0 that gets confused if you try reading
from a deleted (but still opened) file.  You have to say \f(CW-i.bak\fR, or some
such.
.Ip "Can't do inplace edit: %s > 14 characters" 4
(S) There isn't enough room in the filename to make a backup name for the file.
.Ip "Can't do inplace edit: %s is not a regular file" 4
(S) You tried to use the \fB\-i\fR switch on a special file, such as a file in
/dev, or a \s-1FIFO\s0.  The file was ignored.
.Ip "Can't do setegid!" 4
(P) The \fIsetegid()\fR call failed for some reason in the setuid emulator
of suidperl.
.Ip "Can't do seteuid!" 4
(P) The setuid emulator of suidperl failed for some reason.
.Ip "Can't do setuid" 4
(F) This typically means that ordinary perl tried to exec suidperl to
do setuid emulation, but couldn't exec it.  It looks for a name of the
form sperl5.000 in the same directory that the perl executable resides
under the name perl5.000, typically /usr/local/bin on Unix machines.
If the file is there, check the execute permissions.  If it isn't, ask
your sysadmin why he and/or she removed it.
.Ip "Can't do waitpid with flags" 4
(F) This machine doesn't have either \fIwaitpid()\fR or \fIwait4()\fR, so only \fIwaitpid()\fR
without flags is emulated.
.Ip "Can't do {n,m} with n > m" 4
(F) Minima must be less than or equal to maxima.  If you really want
your regexp to match something 0 times, just put {0}.  See the \fIperlre\fR manpage.
.Ip "Can't emulate \-%s on #! line" 4
(F) The #! line specifies a switch that doesn't make sense at this point.
For example, it'd be kind of silly to put a \fB\-x\fR on the #! line.
.Ip "Can't exec \*(N"%s"": %s" 4
(W) An \fIsystem()\fR, \fIexec()\fR, or piped open call could not execute the named
program for the indicated reason.  Typical reasons include: the permissions
were wrong on the file, the file wasn't found in \f(CW$ENV{PATH}\fR, the
executable in question was compiled for another architecture, or the
#! line in a script points to an interpreter that can't be run for
similar reasons.  (Or maybe your system doesn't support #! at all.)
.Ip "Can't exec %s" 4
(F) Perl was trying to execute the indicated program for you because that's
what the #! line said.  If that's not what you wanted, you may need to
mention \*(L"perl\*(R" on the #! line somewhere.
.Ip "Can't execute %s" 4
(F) You used the \fB\-S\fR switch, but the copies of the script to execute found
in the \s-1PATH\s0 did not have correct permissions.
.Ip "Can't find %s on \s-1PATH\s0, \*(N'.\*(T' not in \s-1PATH\s0" 4
(F) You used the \fB\-S\fR switch, but the script to execute could not be found
in the \s-1PATH\s0, or at least not with the correct permissions.  The script
exists in the current directory, but \s-1PATH\s0 prohibits running it.
.Ip "Can't find %s on \s-1PATH\s0" 4
(F) You used the \fB\-S\fR switch, but the script to execute could not be found
in the \s-1PATH\s0.
.Ip "Can't find label %s" 4
(F) You said to goto a label that isn't mentioned anywhere that it's possible
for us to go to.  See the \f(CWgoto\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't find string terminator %s anywhere before \s-1EOF\s0" 4
(F) Perl strings can stretch over multiple lines.  This message means that
the closing delimiter was omitted.  Because bracketed quotes count nesting
levels, the following is missing its final parenthesis:
.Sp
.Vb 1
\&    print q(The character '(' starts a side comment.);
.Ve
If you're getting this error from a here-document, you may have 
included unseen whitespace before or after your closing tag. A good 
programmer's editor will have a way to help you find these characters.
.Ip "Can't fork" 4
(F) A fatal error occurred while trying to fork while opening a pipeline.
.Ip "Can't get filespec \- stale stat buffer?" 4
(S) A warning peculiar to \s-1VMS\s0.  This arises because of the difference between
access checks under \s-1VMS\s0 and under the Unix model Perl assumes.  Under \s-1VMS\s0,
access checks are done by filename, rather than by bits in the stat buffer, so
that ACLs and other protections can be taken into account.  Unfortunately, Perl
assumes that the stat buffer contains all the necessary information, and passes
it, instead of the filespec, to the access checking routine.  It will try to
retrieve the filespec using the device name and \s-1FID\s0 present in the stat buffer,
but this works only if you haven't made a subsequent call to the \s-1CRTL\s0 \fIstat()\fR
routine, because the device name is overwritten with each call.  If this warning
appears, the name lookup failed, and the access checking routine gave up and
returned \s-1FALSE\s0, just to be conservative.  (Note: The access checking routine
knows about the Perl \f(CWstat\fR operator and file tests, so you shouldn't ever
see this warning in response to a Perl command; it arises only if some internal
code takes stat buffers lightly.)
.Ip "Can't get pipe mailbox device name" 4
(P) An error peculiar to \s-1VMS\s0.  After creating a mailbox to act as a pipe, Perl
can't retrieve its name for later use.
.Ip "Can't get \s-1SYSGEN\s0 parameter value for \s-1MAXBUF\s0" 4
(P) An error peculiar to \s-1VMS\s0.  Perl asked \f(CW$GETSYI\fR how big you want your
mailbox buffers to be, and didn't get an answer.
.Ip "Can't goto subroutine outside a subroutine" 4
(F) The deeply magical \*(L"goto subroutine\*(R" call can only replace one subroutine
call for another.  It can't manufacture one out of whole cloth.  In general
you should be calling it out of only an \s-1AUTOLOAD\s0 routine anyway.  See
the \f(CWgoto\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't goto subroutine from an eval-string" 4
(F) The \*(L"goto subroutine\*(R" call can't be used to jump out of an eval \*(L"string\*(R".
(You can use it to jump out of an eval {\s-1BLOCK\s0}, but you probably don't want to.)
.Ip "Can't localize through a reference" 4
(F) You said something like \f(CWlocal $$ref\fR, which Perl can't currently
handle, because when it goes to restore the old value of whatever \f(CW$ref\fR
pointed to after the scope of the \fIlocal()\fR is finished, it can't be
sure that \f(CW$ref\fR will still be a reference.  
.Ip "Can't localize lexical variable %s" 4
(F) You used local on a variable name that was previously declared as a
lexical variable using \*(L"my\*(R".  This is not allowed.  If you want to
localize a package variable of the same name, qualify it with the
package name.
.Ip "Can't localize pseudo-hash element" 4
(F) You said something like \f(CWlocal $ar->{'key'}\fR, where \f(CW$ar\fR is
a reference to a pseudo-hash.  That hasn't been implemented yet, but
you can get a similar effect by localizing the corresponding array
element directly -- \f(CWlocal $ar->[$ar->[0]{'key'}]\fR.
.Ip "Can't locate auto/%s.al in @\s-1INC\s0" 4
(F) A function (or method) was called in a package which allows autoload,
but there is no function to autoload.  Most probable causes are a misprint
in a function/method name or a failure to \f(CWAutoSplit\fR the file, say, by
doing \f(CWmake install\fR.
.Ip "Can't locate %s in @\s-1INC\s0" 4
(F) You said to do (or require, or use) a file that couldn't be found
in any of the libraries mentioned in \f(CW@INC\fR.  Perhaps you need to set the
\s-1PERL5LIB\s0 or \s-1PERL5OPT\s0 environment variable to say where the extra library
is, or maybe the script needs to add the library name to \f(CW@INC\fR.  Or maybe
you just misspelled the name of the file.  See the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage.
.Ip "Can't locate object method \*(N"%s\*(T" via package \*(N"%s\*(T"" 4
(F) You called a method correctly, and it correctly indicated a package
functioning as a class, but that package doesn't define that particular
method, nor does any of its base classes.  See the \fIperlobj\fR manpage.
.Ip "Can't locate package %s for @%s::\s-1ISA\s0" 4
(W) The \f(CW@ISA\fR array contained the name of another package that doesn't seem
to exist.
.Ip "Can't make list assignment to \e%\s-1ENV\s0 on this system" 4
(F) List assignment to \f(CW%ENV\fR is not supported on some systems, notably \s-1VMS\s0.
.Ip "Can't modify %s in %s" 4
(F) You aren't allowed to assign to the item indicated, or otherwise try to
change it, such as with an auto-increment.
.Ip "Can't modify nonexistent substring" 4
(P) The internal routine that does assignment to a \fIsubstr()\fR was handed
a \s-1NULL\s0.
.Ip "Can't msgrcv to read-only var" 4
(F) The target of a msgrcv must be modifiable to be used as a receive
buffer.
.Ip "Can't open %s: %s" 4
(S) The implicit opening of a file through use of the \f(CW<>\fR
filehandle, either implicitly under the \f(CW-n\fR or \f(CW-p\fR command-line
switches, or explicitly, failed for the indicated reason.  Usually this
is because you don't have read permission for a file which you named
on the command line.
.Ip "Can't open bidirectional pipe" 4
(W) You tried to say \f(CWopen(CMD, "|cmd|")\fR, which is not supported.  You can
try any of several modules in the Perl library to do this, such as
\s-1IPC::\s0Open2.  Alternately, direct the pipe's output to a file using \*(L">\*(R",
and then read it in under a different file handle.
.Ip "Can't open error file %s as stderr" 4
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
couldn't open the file specified after \*(L'2>\*(R' or \*(L'2>>\*(R' on the
command line for writing.
.Ip "Can't open input file %s as stdin" 4
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
couldn't open the file specified after \*(L'<\*(R' on the command line for reading.
.Ip "Can't open output file %s as stdout" 4
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
couldn't open the file specified after \*(L'>\*(R' or \*(L'>>\*(R' on the command
line for writing.
.Ip "Can't open output pipe (name: %s)" 4
(P) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
couldn't open the pipe into which to send data destined for stdout.
.Ip "Can't open perl script \*(N"%s"": %s" 4
(F) The script you specified can't be opened for the indicated reason.
.Ip "Can't redefine active sort subroutine %s" 4
(F) Perl optimizes the internal handling of sort subroutines and keeps
pointers into them.  You tried to redefine one such sort subroutine when it
was currently active, which is not allowed.  If you really want to do
this, you should write \f(CWsort { &func } @x\fR instead of \f(CWsort func @x\fR.
.Ip "Can't rename %s to %s: %s, skipping file" 4
(S) The rename done by the \fB\-i\fR switch failed for some reason, probably because
you don't have write permission to the directory.
.Ip "Can't reopen input pipe (name: %s) in binary mode" 4
(P) An error peculiar to \s-1VMS\s0.  Perl thought stdin was a pipe, and tried to
reopen it to accept binary data.  Alas, it failed.
.Ip "Can't reswap uid and euid" 4
(P) The \fIsetreuid()\fR call failed for some reason in the setuid emulator
of suidperl.
.Ip "Can't return outside a subroutine" 4
(F) The return statement was executed in mainline code, that is, where
there was no subroutine call to return out of.  See the \fIperlsub\fR manpage.
.Ip "Can't stat script \*(N"%s\*(T"" 4
(P) For some reason you can't \fIfstat()\fR the script even though you have
it open already.  Bizarre.
.Ip "Can't swap uid and euid" 4
(P) The \fIsetreuid()\fR call failed for some reason in the setuid emulator
of suidperl.
.Ip "Can't take log of %g" 4
(F) For ordinary real numbers, you can't take the logarithm of a
negative number or zero. There's a Math::Complex package that comes
standard with Perl, though, if you really want to do that for
the negative numbers.
.Ip "Can't take sqrt of %g" 4
(F) For ordinary real numbers, you can't take the square root of a
negative number.  There's a Math::Complex package that comes standard
with Perl, though, if you really want to do that.
.Ip "Can't undef active subroutine" 4
(F) You can't undefine a routine that's currently running.  You can,
however, redefine it while it's running, and you can even undef the
redefined subroutine while the old routine is running.  Go figure.
.Ip "Can't unshift" 4
(F) You tried to unshift an \*(L"unreal\*(R" array that can't be unshifted, such
as the main Perl stack.
.Ip "Can't upgrade that kind of scalar" 4
(P) The internal sv_upgrade routine adds \*(L"members\*(R" to an \s-1SV\s0, making
it into a more specialized kind of \s-1SV\s0.  The top several \s-1SV\s0 types are
so specialized, however, that they cannot be interconverted.  This
message indicates that such a conversion was attempted.
.Ip "Can't upgrade to undef" 4
(P) The undefined \s-1SV\s0 is the bottom of the totem pole, in the scheme
of upgradability.  Upgrading to undef indicates an error in the
code calling sv_upgrade.
.Ip "Can't use %%! because Errno.pm is not available" 4
(F) The first time the %! hash is used, perl automatically loads the
Errno.pm module. The Errno module is expected to tie the %! hash to
provide symbolic names for \f(CW$!\fR errno values.
.Ip "Can't use \*(N"my %s\*(T" in sort comparison" 4
(F) The global variables \f(CW$a\fR and \f(CW$b\fR are reserved for sort comparisons.
You mentioned \f(CW$a\fR or \f(CW$b\fR in the same line as the <=> or cmp operator,
and the variable had earlier been declared as a lexical variable.
Either qualify the sort variable with the package name, or rename the
lexical variable.
.Ip "Can't use %s for loop variable" 4
(F) Only a simple scalar variable may be used as a loop variable on a foreach.
.Ip "Can't use %s ref as %s ref" 4
(F) You've mixed up your reference types.  You have to dereference a
reference of the type needed.  You can use the \fIref()\fR function to
test the type of the reference, if need be.
.Ip "Can't use \e1 to mean $1 in expression" 4
(W) In an ordinary expression, backslash is a unary operator that creates
a reference to its argument.  The use of backslash to indicate a backreference
to a matched substring is valid only as part of a regular expression pattern.
Trying to do this in ordinary Perl code produces a value that prints
out looking like \fI\s-1SCALAR\s0\fR\|(0xdecaf).  Use the \f(CW$1\fR form instead.
.Ip "Can't use bareword '%s' as %s ref while \e""strict refs\e\*(T" in use" 4
(F) Only hard references are allowed by \*(L"strict refs\*(R".  Symbolic references
are disallowed.  See the \fIperlref\fR manpage.
.Ip "Can't use string '%s' as %s ref while \*(N"strict refs\*(T" in use" 4
(F) Only hard references are allowed by \*(L"strict refs\*(R".  Symbolic references
are disallowed.  See the \fIperlref\fR manpage.
.Ip "Can't use an undefined value as %s reference" 4
(F) A value used as either a hard reference or a symbolic reference must
be a defined value.  This helps to delurk some insidious errors.
.Ip "Can't use global %s in \*(N"my\*(T"" 4
(F) You tried to declare a magical variable as a lexical variable.  This is
not allowed, because the magic can be tied to only one location (namely
the global variable) and it would be incredibly confusing to have
variables in your program that looked like magical variables but
weren't.
.Ip "Can't use subscript on %s" 4
(F) The compiler tried to interpret a bracketed expression as a
subscript.  But to the left of the brackets was an expression that
didn't look like an array reference, or anything else subscriptable.
.Ip "Can't x= to read-only value" 4
(F) You tried to repeat a constant value (often the undefined value) with
an assignment operator, which implies modifying the value itself.
Perhaps you need to copy the value to a temporary, and repeat that.
.Ip "Cannot find an opnumber for \*(N"%s\*(T"" 4
(F) A string of a form \f(CWCORE::word\fR was given to \fIprototype()\fR, but
there is no builtin with the name \f(CWword\fR.
.Ip "Cannot resolve method `%s\*(T' overloading `%s\*(T' in package `%s\*(T'" 4
(F|P) Error resolving overloading specified by a method name (as
opposed to a subroutine reference): no such method callable via the
package. If method name is \f(CW???\fR, this is an internal error.
.Ip "Character class syntax [. .] is reserved for future extensions" 4
(W) Within regular expression character classes ([]) the syntax beginning
with \*(L"[.\*(R" and ending with \*(L".]\*(R" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: \*(L"\e[.\*(R" and \*(L".\e]\*(R".
.Ip "Character class syntax [: :] is reserved for future extensions" 4
(W) Within regular expression character classes ([]) the syntax beginning
with \*(L"[:\*(R" and ending with \*(L":]\*(R" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: \*(L"\e[:\*(R" and \*(L":\e]\*(R".
.Ip "Character class syntax [= =] is reserved for future extensions" 4
(W) Within regular expression character classes ([]) the syntax
beginning with \*(L"[=\*(R" and ending with \*(L"=]\*(R" is reserved for future extensions.
If you need to represent those character sequences inside a regular
expression character class, just quote the square brackets with the
backslash: \*(L"\e[=\*(R" and \*(L"=\e]\*(R".
.Ip "chmod: mode argument is missing initial 0" 4
(W) A novice will sometimes say
.Sp
.Vb 1
\&    chmod 777, $filename
.Ve
not realizing that 777 will be interpreted as a decimal number, equivalent
to 01411.  Octal constants are introduced with a leading 0 in Perl, as in C.
.Ip "Close on unopened file <%s>" 4
(W) You tried to close a filehandle that was never opened.
.Ip "Compilation failed in require" 4
(F) Perl could not compile a file specified in a \f(CWrequire\fR statement.
Perl uses this generic message when none of the errors that it encountered
were severe enough to halt compilation immediately.
.Ip "Complex regular subexpression recursion limit (%d) exceeded" 4
(W) The regular expression engine uses recursion in complex situations
where back-tracking is required.  Recursion depth is limited to 32766,
or perhaps less in architectures where the stack cannot grow
arbitrarily.  ("Simple\*(R" and \*(L"medium\*(R" situations are handled without
recursion and are not subject to a limit.)  Try shortening the string
under examination; looping in Perl code (e.g. with \f(CWwhile\fR) rather
than in the regular expression engine; or rewriting the regular
expression so that it is simpler or backtracks less.  (See the \fIperlbook\fR manpage
for information on \fIMastering Regular Expressions\fR.)
.Ip "connect() on closed fd" 4
(W) You tried to do a connect on a closed socket.  Did you forget to check
the return value of your \fIsocket()\fR call?  See the \f(CWconnect\fR entry in the \fIperlfunc\fR manpage.
.Ip "Constant is not %s reference" 4
(F) A constant value (perhaps declared using the \f(CWuse constant\fR pragma)
is being dereferenced, but it amounts to the wrong type of reference.  The
message indicates the type of reference that was expected. This usually
indicates a syntax error in dereferencing the constant value.
See the section on \fIConstant Functions\fR in the \fIperlsub\fR manpage and the \fIconstant\fR manpage.
.Ip "Constant subroutine %s redefined" 4
(S) You redefined a subroutine which had previously been eligible for
inlining.  See the section on \fIConstant Functions\fR in the \fIperlsub\fR manpage for commentary and
workarounds.
.Ip "Constant subroutine %s undefined" 4
(S) You undefined a subroutine which had previously been eligible for
inlining.  See the section on \fIConstant Functions\fR in the \fIperlsub\fR manpage for commentary and
workarounds.
.Ip "Copy method did not return a reference" 4
(F) The method which overloads \*(L"=\*(R" is buggy. See the section on \fICopy Constructor\fR in the \fIoverload\fR manpage.
.Ip "Corrupt malloc ptr 0x%lx at 0x%lx" 4
(P) The malloc package that comes with Perl had an internal failure.
.Ip "corrupted regexp pointers" 4
(P) The regular expression engine got confused by what the regular
expression compiler gave it.
.Ip "corrupted regexp program" 4
(P) The regular expression engine got passed a regexp program without
a valid magic number.
.Ip "Deep recursion on subroutine \*(N"%s\*(T"" 4
(W) This subroutine has called itself (directly or indirectly) 100
times more than it has returned.  This probably indicates an infinite
recursion, unless you're writing strange benchmark programs, in which
case it indicates something else.
.Ip "Delimiter for here document is too long" 4
(F) In a here document construct like \f(CW<<FOO\fR, the label
\f(CWFOO\fR is too long for Perl to handle.  You have to be seriously
twisted to write code that triggers this error.
.Ip "Did you mean &%s instead?" 4
(W) You probably referred to an imported subroutine &\s-1FOO\s0 as \f(CW$FOO\fR or some such.
.Ip "Did you mean $ or @ instead of %?" 4
(W) You probably said \f(CW%hash\fR{$key} when you meant \f(CW$hash\fR{$key} or \f(CW@hash\fR{@keys}.
On the other hand, maybe you just meant \f(CW%hash\fR and got carried away.
.Ip "Died" 4
(F) You passed \fIdie()\fR an empty string (the equivalent of \f(CWdie ""\fR) or
you called it with no args and both \f(CW$@\fR and \f(CW$_\fR were empty.
.Ip "Do you need to predeclare %s?" 4
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  It often means a subroutine or module
name is being referenced that hasn't been declared yet.  This may be
because of ordering problems in your file, or because of a missing
\*(L"sub\*(R", \*(L"package\*(R", \*(L"require\*(R", or \*(L"use\*(R" statement.  If you're
referencing something that isn't defined yet, you don't actually have
to define the subroutine or package before the current location.  You
can use an empty \*(L"sub foo;\*(R" or \*(L"package \s-1FOO\s0;\*(R" to enter a \*(L"forward\*(R"
declaration.
.Ip "Don't know how to handle magic of type \*(N'%s\*(T'" 4
(P) The internal handling of magical variables has been cursed.
.Ip "do_study: out of memory" 4
(P) This should have been caught by \fIsafemalloc()\fR instead.
.Ip "Duplicate free() ignored" 4
(S) An internal routine called \fIfree()\fR on something that had already
been freed.
.Ip "elseif should be elsif" 4
(S) There is no keyword \*(L"elseif\*(R" in Perl because Larry thinks it's
ugly.  Your code will be interpreted as an attempt to call a method
named \*(L"elseif\*(R" for the class returned by the following block.  This is
unlikely to be what you want.
.Ip "\s-1END\s0 failed\*(--cleanup aborted" 4
(F) An untrapped exception was raised while executing an \s-1END\s0 subroutine.
The interpreter is immediately exited.
.Ip "entering effective %s failed" 4
(F) While under the \f(CWuse filetest\fR pragma, switching the real and
effective uids or gids failed.
.Ip "Error converting file specification %s" 4
(F) An error peculiar to \s-1VMS\s0.  Because Perl may have to deal with file
specifications in either \s-1VMS\s0 or Unix syntax, it converts them to a
single form when it must operate on them directly.  Either you've
passed an invalid file specification to Perl, or you've found a
case the conversion routines don't handle.  Drat.
.Ip "%s: Eval-group in insecure regular expression" 4
(F) Perl detected tainted data when trying to compile a regular expression
that contains the \f(CW(?{ ... })\fR zero-width assertion, which is unsafe.
See the section on \fI(?{ code })\fR in the \fIperlre\fR manpage, and the \fIperlsec\fR manpage.
.Ip "%s: Eval-group not allowed, use re \*(N'eval\*(T'" 4
(F) A regular expression contained the \f(CW(?{ ... })\fR zero-width assertion,
but that construct is only allowed when the \f(CWuse re 'eval'\fR pragma is
in effect.  See the section on \fI(?{ code })\fR in the \fIperlre\fR manpage.
.Ip "%s: Eval-group not allowed at run time" 4
(F) Perl tried to compile a regular expression containing the \f(CW(?{ ... })\fR
zero-width assertion at run time, as it would when the pattern contains
interpolated values.  Since that is a security risk, it is not allowed.
If you insist, you may still do this by explicitly building the pattern
from an interpolated string at run time and using that in an \fIeval()\fR.
See the section on \fI(?{ code })\fR in the \fIperlre\fR manpage.
.Ip "Excessively long <> operator" 4
(F) The contents of a <> operator may not exceed the maximum size of a
Perl identifier.  If you're just trying to glob a long list of
filenames, try using the \fIglob()\fR operator, or put the filenames into a
variable and glob that.
.Ip "Execution of %s aborted due to compilation errors" 4
(F) The final summary message when a Perl compilation fails.
.Ip "Exiting eval via %s" 4
(W) You are exiting an eval by unconventional means, such as
a goto, or a loop control statement.
.Ip "Exiting pseudo-block via %s" 4
(W) You are exiting a rather special block construct (like a sort block or
subroutine) by unconventional means, such as a goto, or a loop control
statement.  See the \f(CWsort\fR entry in the \fIperlfunc\fR manpage.
.Ip "Exiting subroutine via %s" 4
(W) You are exiting a subroutine by unconventional means, such as
a goto, or a loop control statement.
.Ip "Exiting substitution via %s" 4
(W) You are exiting a substitution by unconventional means, such as
a return, a goto, or a loop control statement.
.Ip "Explicit blessing to \*(N'\*(T' (assuming package main)" 4
(W) You are blessing a reference to a zero length string.  This has
the effect of blessing the reference into the package main.  This is
usually not what you want.  Consider providing a default target
package, e.g. \fIbless\fR\|($ref, \f(CW$p\fR || \*(L'MyPackage');
.Ip "Fatal \s-1VMS\s0 error at %s, line %d" 4
(P) An error peculiar to \s-1VMS\s0.  Something untoward happened in a \s-1VMS\s0 system
service or \s-1RTL\s0 routine; Perl's exit status should provide more details.  The
filename in \*(L"at \f(CW%s\fR\*(R" and the line number in \*(L"line \f(CW%d\fR\*(R" tell you which section of
the Perl source code is distressed.
.Ip "fcntl is not implemented" 4
(F) Your machine apparently doesn't implement \fIfcntl()\fR.  What is this, a
\s-1PDP\s0\-11 or something?
.Ip "Filehandle %s never opened" 4
(W) An I/O operation was attempted on a filehandle that was never initialized.
You need to do an \fIopen()\fR or a \fIsocket()\fR call, or call a constructor from
the FileHandle package.
.Ip "Filehandle %s opened for only input" 4
(W) You tried to write on a read-only filehandle.  If you
intended it to be a read-write filehandle, you needed to open it with
\*(L"+<\*(R" or \*(L"+>\*(R" or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If
you intended only to write the file, use \*(L">\*(R" or \*(L">>\*(R".  See
the \f(CWopen\fR entry in the \fIperlfunc\fR manpage.
.Ip "Filehandle opened for only input" 4
(W) You tried to write on a read-only filehandle.  If you
intended it to be a read-write filehandle, you needed to open it with
\*(L"+<\*(R" or \*(L"+>\*(R" or \*(L"+>>\*(R" instead of with \*(L"<\*(R" or nothing.  If
you intended only to write the file, use \*(L">\*(R" or \*(L">>\*(R".  See
the \f(CWopen\fR entry in the \fIperlfunc\fR manpage.
.Ip "Final $ should be \e$ or $name" 4
(F) You must now decide whether the final $ in a string was meant to be
a literal dollar sign, or was meant to introduce a variable name
that happens to be missing.  So you have to put either the backslash or
the name.
.Ip "Final @ should be \e@ or @name" 4
(F) You must now decide whether the final @ in a string was meant to be
a literal \*(L"at\*(R" sign, or was meant to introduce a variable name
that happens to be missing.  So you have to put either the backslash or
the name.
.Ip "Format %s redefined" 4
(W) You redefined a format.  To suppress this warning, say
.Sp
.Vb 4
\&    {
\&        local $^W = 0;
\&        eval "format NAME =...";
\&    }
.Ve
.Ip "Format not terminated" 4
(F) A format must be terminated by a line with a solitary dot.  Perl got
to the end of your file without finding such a line.
.Ip "Found = in conditional, should be ==" 4
(W) You said
.Sp
.Vb 1
\&    if ($foo = 123)
.Ve
when you meant
.Sp
.Vb 1
\&    if ($foo == 123)
.Ve
(or something like that).
.Ip "gdbm store returned %d, errno %d, key \*(N"%s\*(T"" 4
(S) A warning from the GDBM_File extension that a store failed.
.Ip "gethostent not implemented" 4
(F) Your C library apparently doesn't implement \fIgethostent()\fR, probably
because if it did, it'd feel morally obligated to return every hostname
on the Internet.
.Ip "get{sock,peer}name() on closed fd" 4
(W) You tried to get a socket or peer socket name on a closed socket.
Did you forget to check the return value of your \fIsocket()\fR call?
.Ip "getpwnam returned invalid \s-1UIC\s0 %#o for user \*(N"%s\*(T"" 4
(S) A warning peculiar to \s-1VMS\s0.  The call to \f(CWsys$getuai\fR underlying the
\f(CWgetpwnam\fR operator returned an invalid \s-1UIC\s0.
.Ip "Glob not terminated" 4
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and not
finding it.  Chances are you left some needed parentheses out earlier in
the line, and you really meant a \*(L"less than\*(R".
.Ip "Global symbol \*(N"%s\*(T" requires explicit package name" 4
(F) You've said \*(L"use strict vars\*(R", which indicates that all variables
must either be lexically scoped (using \*(L"my"), or explicitly qualified to
say which package the global variable is in (using \*(L"::").
.Ip "goto must have label" 4
(F) Unlike with \*(L"next\*(R" or \*(L"last\*(R", you're not allowed to goto an
unspecified destination.  See the \f(CWgoto\fR entry in the \fIperlfunc\fR manpage.
.Ip "Had to create %s unexpectedly" 4
(S) A routine asked for a symbol from a symbol table that ought to have
existed already, but for some reason it didn't, and had to be created on
an emergency basis to prevent a core dump.
.Ip "Hash %%s missing the % in argument %d of %s()" 4
(D) Really old Perl let you omit the % on hash names in some spots.  This
is now heavily deprecated.
.Ip "Identifier too long" 4
(F) Perl limits identifiers (names for variables, functions, etc.) to
about 250 characters for simple names, and somewhat more for compound
names (like \f(CW$A::B\fR).  You've exceeded Perl's limits.  Future
versions of Perl are likely to eliminate these arbitrary limitations.
.Ip "Ill-formed logical name |%s| in prime_env_iter" 4
(W) A warning peculiar to \s-1VMS\s0.  A logical name was encountered when preparing
to iterate over \f(CW%ENV\fR which violates the syntactic rules governing logical
names.  Because it cannot be translated normally, it is skipped, and will not
appear in \f(CW%ENV\fR.  This may be a benign occurrence, as some software packages
might directly modify logical name tables and introduce nonstandard names,
or it may indicate that a logical name table has been corrupted.
.Ip "Illegal character %s (carriage return)" 4
(F) A carriage return character was found in the input.  This is an
error, and not a warning, because carriage return characters can break
multi-line strings, including here documents (e.g., \f(CWprint <<EOF;\fR).
.Sp
Under Unix, this error is usually caused by executing Perl code --
either the main program, a module, or an eval'd string -- that was
transferred over a network connection from a non-Unix system without
properly converting the text file format.
.Sp
Under systems that use something other than \*(L'\en\*(R' to delimit lines of
text, this error can also be caused by reading Perl code from a file
handle that is in binary mode (as set by the \f(CWbinmode\fR operator).
.Sp
In either case, the Perl code in question will probably need to be
converted with something like \f(CWs/\ex0D\ex0A?/\en/g\fR before it can be
executed.
.Ip "Illegal division by zero" 4
(F) You tried to divide a number by 0.  Either something was wrong in your
logic, or you need to put a conditional in to guard against meaningless input.
.Ip "Illegal modulus zero" 4
(F) You tried to divide a number by 0 to get the remainder.  Most numbers
don't take to this kindly.
.Ip "Illegal octal digit" 4
(F) You used an 8 or 9 in a octal number.
.Ip "Illegal octal digit ignored" 4
(W) You may have tried to use an 8 or 9 in a octal number.  Interpretation
of the octal number stopped before the 8 or 9.
.Ip "Illegal hex digit ignored" 4
(W) You may have tried to use a character other than 0 \- 9 or A \- F in a
hexadecimal number.  Interpretation of the hexadecimal number stopped
before the illegal character.
.Ip "Illegal switch in \s-1PERL5OPT\s0: %s" 4
(X) The \s-1PERL5OPT\s0 environment variable may only be used to set the
following switches: \fB\-[DIMUdmw]\fR.
.Ip "In string, @%s now must be written as \e@%s" 4
(F) It used to be that Perl would try to guess whether you wanted an
array interpolated or a literal @.  It did this when the string was first
used at runtime.  Now strings are parsed at compile time, and ambiguous
instances of @ must be disambiguated, either by prepending a backslash to
indicate a literal, or by declaring (or using) the array within the
program before the string (lexically).  (Someday it will simply assume
that an unbackslashed @ interpolates an array.)
.Ip "Insecure dependency in %s" 4
(F) You tried to do something that the tainting mechanism didn't like.
The tainting mechanism is turned on when you're running setuid or setgid,
or when you specify \fB\-T\fR to turn it on explicitly.  The tainting mechanism
labels all data that's derived directly or indirectly from the user,
who is considered to be unworthy of your trust.  If any such data is
used in a \*(L"dangerous\*(R" operation, you get this error.  See the \fIperlsec\fR manpage
for more information.
.Ip "Insecure directory in %s" 4
(F) You can't use \fIsystem()\fR, \fIexec()\fR, or a piped open in a setuid or setgid
script if \f(CW$ENV{PATH}\fR contains a directory that is writable by the world.
See the \fIperlsec\fR manpage.
.Ip "Insecure $\s-1ENV\s0{%s} while running %s" 4
(F) You can't use \fIsystem()\fR, \fIexec()\fR, or a piped open in a setuid or
setgid script if any of \f(CW$ENV{PATH}\fR, \f(CW$ENV{IFS}\fR, \f(CW$ENV{CDPATH}\fR,
\f(CW$ENV{ENV}\fR or \f(CW$ENV{BASH_ENV}\fR are derived from data supplied (or
potentially supplied) by the user.  The script must set the path to a
known value, using trustworthy data.  See the \fIperlsec\fR manpage.
.Ip "Integer overflow in hex number" 4
(S) The literal hex number you have specified is too big for your
architecture. On a 32-bit architecture the largest hex literal is
0xFFFFFFFF.
.Ip "Integer overflow in octal number" 4
(S) The literal octal number you have specified is too big for your
architecture. On a 32-bit architecture the largest octal literal is
037777777777.
.Ip "Internal inconsistency in tracking vforks" 4
(S) A warning peculiar to \s-1VMS\s0.  Perl keeps track of the number
of times you've called \f(CWfork\fR and \f(CWexec\fR, to determine
whether the current call to \f(CWexec\fR should affect the current
script or a subprocess (see the \f(CWexec\fR entry in the \fIperlvms\fR manpage).  Somehow, this count
has become scrambled, so Perl is making a guess and treating
this \f(CWexec\fR as a request to terminate the Perl script
and execute the specified command.
.Ip "internal disaster in regexp" 4
(P) Something went badly wrong in the regular expression parser.
.Ip "glob failed (%s)" 4
(W) Something went wrong with the external \fIprogram\fR\|(s) used for \f(CWglob\fR
and \f(CW<*.c>\fR.  Usually, this means that you supplied a \f(CWglob\fR
pattern that caused the external program to fail and exit with a nonzero
status.  If the message indicates that the abnormal exit resulted in a
coredump, this may also mean that your csh (C shell) is broken.  If so,
you should change all of the csh-related variables in config.sh:  If you
have tcsh, make the variables refer to it as if it were csh (e.g.
\f(CWfull_csh='/usr/bin/tcsh'\fR); otherwise, make them all empty (except that
\f(CWd_csh\fR should be \f(CW'undef'\fR) so that Perl will think csh is missing.
In either case, after editing config.sh, run \f(CW./Configure -S\fR and
rebuild Perl.
.Ip "internal urp in regexp at /%s/" 4
(P) Something went badly awry in the regular expression parser.
.Ip "invalid [] range in regexp" 4
(F) The range specified in a character class had a minimum character
greater than the maximum character.  See the \fIperlre\fR manpage.
.Ip "Invalid conversion in %s: \*(N"%s\*(T"" 4
(W) Perl does not understand the given format conversion.
See the \f(CWsprintf\fR entry in the \fIperlfunc\fR manpage.
.Ip "Invalid type in pack: \*(N'%s\*(T'" 4
(F) The given character is not a valid pack type.  See the \f(CWpack\fR entry in the \fIperlfunc\fR manpage.
(W) The given character is not a valid pack type but used to be silently
ignored.
.Ip "Invalid type in unpack: \*(N'%s\*(T'" 4
(F) The given character is not a valid unpack type.  See the \f(CWunpack\fR entry in the \fIperlfunc\fR manpage.
(W) The given character is not a valid unpack type but used to be silently
ignored.
.Ip "ioctl is not implemented" 4
(F) Your machine apparently doesn't implement \fIioctl()\fR, which is pretty
strange for a machine that supports C.
.Ip "junk on end of regexp" 4
(P) The regular expression parser is confused.
.Ip "Label not found for \*(N"last %s\*(T"" 4
(F) You named a loop to break out of, but you're not currently in a
loop of that name, not even if you count where you were called from.
See the \f(CWlast\fR entry in the \fIperlfunc\fR manpage.
.Ip "Label not found for \*(N"next %s\*(T"" 4
(F) You named a loop to continue, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
the \f(CWlast\fR entry in the \fIperlfunc\fR manpage.
.Ip "Label not found for \*(N"redo %s\*(T"" 4
(F) You named a loop to restart, but you're not currently in a loop of
that name, not even if you count where you were called from.  See
the \f(CWlast\fR entry in the \fIperlfunc\fR manpage.
.Ip "leaving effective %s failed" 4
(F) While under the \f(CWuse filetest\fR pragma, switching the real and
effective uids or gids failed.
.Ip "listen() on closed fd" 4
(W) You tried to do a listen on a closed socket.  Did you forget to check
the return value of your \fIsocket()\fR call?  See the \f(CWlisten\fR entry in the \fIperlfunc\fR manpage.
.Ip "Method for operation %s not found in package %s during blessing" 4
(F) An attempt was made to specify an entry in an overloading table that
doesn't resolve to a valid subroutine.  See the \fIoverload\fR manpage.
.Ip "Might be a runaway multi-line %s string starting on line %d" 4
(S) An advisory indicating that the previous error may have been caused
by a missing delimiter on a string or pattern, because it eventually
ended earlier on the current line.
.Ip "Misplaced _ in number" 4
(W) An underline in a decimal constant wasn't on a 3-digit boundary.
.Ip "Missing $ on loop variable" 4
(F) Apparently you've been programming in \fBcsh\fR too much.  Variables are always
mentioned with the $ in Perl, unlike in the shells, where it can vary from
one line to the next.
.Ip "Missing comma after first argument to %s function" 4
(F) While certain functions allow you to specify a filehandle or an
\*(L"indirect object\*(R" before the argument list, this ain't one of them.
.Ip "Missing operator before %s?" 4
(S) This is an educated guess made in conjunction with the message \*(L"%s
found where operator expected\*(R".  Often the missing operator is a comma.
.Ip "Missing right bracket" 4
(F) The lexer counted more opening curly brackets (braces) than closing ones.
As a general rule, you'll find it's missing near the place you were last
editing.
.Ip "Modification of a read-only value attempted" 4
(F) You tried, directly or indirectly, to change the value of a
constant.  You didn't, of course, try \*(L"2 = 1\*(R", because the compiler
catches that.  But an easy way to do the same thing is:
.Sp
.Vb 2
\&    sub mod { $_[0] = 1 }
\&    mod(2);
.Ve
Another way is to assign to a \fIsubstr()\fR that's off the end of the string.
.Ip "Modification of non-creatable array value attempted, subscript %d" 4
(F) You tried to make an array value spring into existence, and the
subscript was probably negative, even counting from end of the array
backwards.
.Ip "Modification of non-creatable hash value attempted, subscript \*(N"%s\*(T"" 4
(P) You tried to make a hash value spring into existence, and it couldn't
be created for some peculiar reason.
.Ip "Module name must be constant" 4
(F) Only a bare module name is allowed as the first argument to a \*(L"use\*(R".
.Ip "msg%s not implemented" 4
(F) You don't have System V message \s-1IPC\s0 on your system.
.Ip "Multidimensional syntax %s not supported" 4
(W) Multidimensional arrays aren't written like \f(CW$foo[1,2,3]\fR.  They're written
like \f(CW$foo[1][2][3]\fR, as in C.
.Ip "Name \*(N"%s::%s\*(T" used only once: possible typo" 4
(W) Typographical errors often show up as unique variable names.
If you had a good reason for having a unique name, then just mention
it again somehow to suppress the message.  The \f(CWuse vars\fR pragma is
provided for just this purpose.
.Ip "Negative length" 4
(F) You tried to do a read/write/send/recv operation with a buffer length
that is less than 0.  This is difficult to imagine.
.Ip "nested *?+ in regexp" 4
(F) You can't quantify a quantifier without intervening parentheses.  So
things like ** or +* or ?* are illegal.
.Sp
Note, however, that the minimal matching quantifiers, \f(CW*?\fR, \f(CW+?\fR, and \f(CW??\fR appear
to be nested quantifiers, but aren't.  See the \fIperlre\fR manpage.
.Ip "No #! line" 4
(F) The setuid emulator requires that scripts have a well-formed #! line
even on machines that don't support the #! construct.
.Ip "No %s allowed while running setuid" 4
(F) Certain operations are deemed to be too insecure for a setuid or setgid
script to even be allowed to attempt.  Generally speaking there will be
another way to do what you want that is, if not secure, at least securable.
See the \fIperlsec\fR manpage.
.Ip "No \fB\-e\fR allowed in setuid scripts" 4
(F) A setuid script can't be specified by the user.
.Ip "No comma allowed after %s" 4
(F) A list operator that has a filehandle or \*(L"indirect object\*(R" is not
allowed to have a comma between that and the following arguments.
Otherwise it'd be just another one of the arguments.
.Sp
One possible cause for this is that you expected to have imported a
constant to your name space with \fBuse\fR or \fBimport\fR while no such
importing took place, it may for example be that your operating system
does not support that particular constant. Hopefully you did use an
explicit import list for the constants you expect to see, please see
the \f(CWuse\fR entry in the \fIperlfunc\fR manpage and the \f(CWimport\fR entry in the \fIperlfunc\fR manpage. While an explicit import list
would probably have caught this error earlier it naturally does not
remedy the fact that your operating system still does not support that
constant. Maybe you have a typo in the constants of the symbol import
list of \fBuse\fR or \fBimport\fR or in the constant name at the line where
this error was triggered?
.Ip "No command into which to pipe on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line redirection,
and found a \*(L'|\*(R' at the end of the command line, so it doesn't know where you
want to pipe the output from this command.
.Ip "No \s-1DB::DB\s0 routine defined" 4
(F) The currently executing code was compiled with the \fB\-d\fR switch,
but for some reason the perl5db.pl file (or some facsimile thereof)
didn't define a routine to be called at the beginning of each
statement.  Which is odd, because the file should have been required
automatically, and should have blown up the require if it didn't parse
right.
.Ip "No dbm on this machine" 4
(P) This is counted as an internal error, because every machine should
supply dbm nowadays, because Perl comes with \s-1SDBM\s0.  See the \fISDBM_File\fR manpage.
.Ip "No DBsub routine" 4
(F) The currently executing code was compiled with the \fB\-d\fR switch,
but for some reason the perl5db.pl file (or some facsimile thereof)
didn't define a \s-1DB::\s0sub routine to be called at the beginning of each
ordinary subroutine call.
.Ip "No error file after 2> or 2>> on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line redirection,
and found a \*(L'2>\*(R' or a \*(L'2>>\*(R' on the command line, but can't find
the name of the file to which to write data destined for stderr.
.Ip "No input file after < on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line redirection,
and found a \*(L'<\*(R' on the command line, but can't find the name of the file
from which to read data for stdin.
.Ip "No output file after > on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line redirection,
and found a lone \*(L'>\*(R' at the end of the command line, so it doesn't know
where you wanted to redirect stdout.
.Ip "No output file after > or >> on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl handles its own command line redirection,
and found a \*(L'>\*(R' or a \*(L'>>\*(R' on the command line, but can't find the
name of the file to which to write data destined for stdout.
.Ip "No Perl script found in input" 4
(F) You called \f(CWperl -x\fR, but no line was found in the file beginning
with #! and containing the word \*(L"perl\*(R".
.Ip "No setregid available" 4
(F) Configure didn't find anything resembling the \fIsetregid()\fR call for
your system.
.Ip "No setreuid available" 4
(F) Configure didn't find anything resembling the \fIsetreuid()\fR call for
your system.
.Ip "No space allowed after \fB\-I\fR" 4
(F) The argument to \fB\-I\fR must follow the \fB\-I\fR immediately with no
intervening space.
.Ip "No such array field" 4
(F) You tried to access an array as a hash, but the field name used is
not defined.  The hash at index 0 should map all valid field names to
array indices for that to work.
.Ip "No such field \*(N"%s\*(T" in variable %s of type %s" 4
(F) You tried to access a field of a typed variable where the type
does not know about the field name.  The field names are looked up in
the \f(CW%FIELDS\fR hash in the type package at compile time.  The \f(CW%FIELDS\fR hash
is usually set up with the \*(L'fields\*(R' pragma.
.Ip "No such pipe open" 4
(P) An error peculiar to \s-1VMS\s0.  The internal routine \fImy_pclose()\fR tried to
close a pipe which hadn't been opened.  This should have been caught earlier as
an attempt to close an unopened filehandle.
.Ip "No such signal: \s-1SIG\s0%s" 4
(W) You specified a signal name as a subscript to \f(CW%SIG\fR that was not recognized.
Say \f(CWkill -l\fR in your shell to see the valid signal names on your system.
.Ip "no \s-1UTC\s0 offset information; assuming local time is \s-1UTC\s0" 4
(S) A warning peculiar to \s-1VMS\s0.  Per was unable to find the local
timezone offset, so it's assuming that local system time is equivalent
to \s-1UTC\s0.  If it's not, define the logical name \fI\s-1SYS$TIMEZONE_DIFFERENTIAL\s0\fR
to translate to the number of seconds which need to be added to \s-1UTC\s0 to
get local time.
.Ip "Not a \s-1CODE\s0 reference" 4
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the \fIref()\fR function to find out what kind of ref it really was.
See also the \fIperlref\fR manpage.
.Ip "Not a format reference" 4
(F) I'm not sure how you managed to generate a reference to an anonymous
format, but this indicates you did, and that it didn't exist.
.Ip "Not a \s-1GLOB\s0 reference" 4
(F) Perl was trying to evaluate a reference to a \*(L"typeglob\*(R" (that is,
a symbol table entry that looks like \f(CW*foo\fR), but found a reference to
something else instead.  You can use the \fIref()\fR function to find out
what kind of ref it really was.  See the \fIperlref\fR manpage.
.Ip "Not a \s-1HASH\s0 reference" 4
(F) Perl was trying to evaluate a reference to a hash value, but
found a reference to something else instead.  You can use the \fIref()\fR
function to find out what kind of ref it really was.  See the \fIperlref\fR manpage.
.Ip "Not a perl script" 4
(F) The setuid emulator requires that scripts have a well-formed #! line
even on machines that don't support the #! construct.  The line must
mention perl.
.Ip "Not a \s-1SCALAR\s0 reference" 4
(F) Perl was trying to evaluate a reference to a scalar value, but
found a reference to something else instead.  You can use the \fIref()\fR
function to find out what kind of ref it really was.  See the \fIperlref\fR manpage.
.Ip "Not a subroutine reference" 4
(F) Perl was trying to evaluate a reference to a code value (that is, a
subroutine), but found a reference to something else instead.  You can
use the \fIref()\fR function to find out what kind of ref it really was.
See also the \fIperlref\fR manpage.
.Ip "Not a subroutine reference in overload table" 4
(F) An attempt was made to specify an entry in an overloading table that
doesn't somehow point to a valid subroutine.  See the \fIoverload\fR manpage.
.Ip "Not an \s-1ARRAY\s0 reference" 4
(F) Perl was trying to evaluate a reference to an array value, but
found a reference to something else instead.  You can use the \fIref()\fR
function to find out what kind of ref it really was.  See the \fIperlref\fR manpage.
.Ip "Not enough arguments for %s" 4
(F) The function requires more arguments than you specified.
.Ip "Not enough format arguments" 4
(W) A format specified more picture fields than the next line supplied.
See the \fIperlform\fR manpage.
.Ip "Null filename used" 4
(F) You can't require the null filename, especially because on many machines
that means the current directory!  See the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage.
.Ip "Null picture in formline" 4
(F) The first argument to formline must be a valid format picture
specification.  It was found to be empty, which probably means you
supplied it an uninitialized value.  See the \fIperlform\fR manpage.
.Ip "\s-1NULL\s0 \s-1OP\s0 \s-1IN\s0 \s-1RUN\s0" 4
(P) Some internal routine called \fIrun()\fR with a null opcode pointer.
.Ip "Null realloc" 4
(P) An attempt was made to realloc \s-1NULL\s0.
.Ip "\s-1NULL\s0 regexp argument" 4
(P) The internal pattern matching routines blew it big time.
.Ip "\s-1NULL\s0 regexp parameter" 4
(P) The internal pattern matching routines are out of their gourd.
.Ip "Number too long" 4
(F) Perl limits the representation of decimal numbers in programs to about
about 250 characters.  You've exceeded that length.  Future versions of
Perl are likely to eliminate this arbitrary limitation.  In the meantime,
try using scientific notation (e.g. \*(L"1e6\*(R" instead of \*(L"1_000_000").
.Ip "Odd number of elements in hash assignment" 4
(S) You specified an odd number of elements to initialize a hash, which
is odd, because hashes come in key/value pairs.
.Ip "Offset outside string" 4
(F) You tried to do a read/write/send/recv operation with an offset
pointing outside the buffer.  This is difficult to imagine.
The sole exception to this is that \f(CWsysread()\fRing past the buffer
will extend the buffer and zero pad the new area.
.Ip "oops: oopsAV" 4
(S) An internal warning that the grammar is screwed up.
.Ip "oops: oopsHV" 4
(S) An internal warning that the grammar is screwed up.
.Ip "Operation `%s': no method found, %s" 4
(F) An attempt was made to perform an overloaded operation for which
no handler was defined.  While some handlers can be autogenerated in
terms of other handlers, there is no default handler for any
operation, unless \f(CWfallback\fR overloading key is specified to be
true.  See the \fIoverload\fR manpage.
.Ip "Operator or semicolon missing before %s" 4
(S) You used a variable or subroutine call where the parser was
expecting an operator.  The parser has assumed you really meant
to use an operator, but this is highly likely to be incorrect.
For example, if you say \*(L"*foo *foo\*(R" it will be interpreted as
if you said \*(L"*foo * \*(L'foo'\*(R".
.Ip "Out of memory for yacc stack" 4
(F) The yacc parser wanted to grow its stack so it could continue parsing,
but \fIrealloc()\fR wouldn't give it more memory, virtual or otherwise.
.Ip "Out of memory during request for %s" 4
(X|F) The \fImalloc()\fR function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request.
.Sp
The request was judged to be small, so the possibility to trap it
depends on the way perl was compiled.  By default it is not trappable.
However, if compiled for this, Perl may use the contents of \f(CW$^M\fR as
an emergency pool after \fIdie()\fRing with this message.  In this case the
error is trappable \fIonce\fR.
.Ip "Out of memory during \*(N"large\*(T" request for %s" 4
(F) The \fImalloc()\fR function returned 0, indicating there was insufficient
remaining memory (or virtual memory) to satisfy the request. However,
the request was judged large enough (compile-time default is 64K), so
a possibility to shut down by trapping this error is granted.
.Ip "Out of memory during ridiculously large request" 4
(F) You can't allocate more than 2^31+"small amount\*(R" bytes.  This error
is most likely to be caused by a typo in the Perl program. e.g., \f(CW$arr[time]\fR
instead of \f(CW$arr[$time]\fR.
.Ip "page overflow" 4
(W) A single call to \fIwrite()\fR produced more lines than can fit on a page.
See the \fIperlform\fR manpage.
.Ip "panic: ck_grep" 4
(P) Failed an internal consistency check trying to compile a grep.
.Ip "panic: ck_split" 4
(P) Failed an internal consistency check trying to compile a split.
.Ip "panic: corrupt saved stack index" 4
(P) The savestack was requested to restore more localized values than there
are in the savestack.
.Ip "panic: die %s" 4
(P) We popped the context stack to an eval context, and then discovered
it wasn't an eval context.
.Ip "panic: do_match" 4
(P) The internal \fIpp_match()\fR routine was called with invalid operational data.
.Ip "panic: do_split" 4
(P) Something terrible went wrong in setting up for the split.
.Ip "panic: do_subst" 4
(P) The internal \fIpp_subst()\fR routine was called with invalid operational data.
.Ip "panic: do_trans" 4
(P) The internal \fIdo_trans()\fR routine was called with invalid operational data.
.Ip "panic: frexp" 4
(P) The library function \fIfrexp()\fR failed, making \fIprintf\fR\|("%f") impossible.
.Ip "panic: goto" 4
(P) We popped the context stack to a context with the specified label,
and then discovered it wasn't a context we know how to do a goto in.
.Ip "panic: \s-1INTERPCASEMOD\s0" 4
(P) The lexer got into a bad state at a case modifier.
.Ip "panic: \s-1INTERPCONCAT\s0" 4
(P) The lexer got into a bad state parsing a string with brackets.
.Ip "panic: last" 4
(P) We popped the context stack to a block context, and then discovered
it wasn't a block context.
.Ip "panic: leave_scope clearsv" 4
(P) A writable lexical variable became read-only somehow within the scope.
.Ip "panic: leave_scope inconsistency" 4
(P) The savestack probably got out of sync.  At least, there was an
invalid enum on the top of it.
.Ip "panic: malloc" 4
(P) Something requested a negative number of bytes of malloc.
.Ip "panic: mapstart" 4
(P) The compiler is screwed up with respect to the \fImap()\fR function.
.Ip "panic: null array" 4
(P) One of the internal array routines was passed a null \s-1AV\s0 pointer.
.Ip "panic: pad_alloc" 4
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_free curpad" 4
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_free po" 4
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pad_reset curpad" 4
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_sv po" 4
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pad_swipe curpad" 4
(P) The compiler got confused about which scratch pad it was allocating
and freeing temporaries and lexicals from.
.Ip "panic: pad_swipe po" 4
(P) An invalid scratch pad offset was detected internally.
.Ip "panic: pp_iter" 4
(P) The foreach iterator got called in a non-loop context frame.
.Ip "panic: realloc" 4
(P) Something requested a negative number of bytes of realloc.
.Ip "panic: restartop" 4
(P) Some internal routine requested a goto (or something like it), and
didn't supply the destination.
.Ip "panic: return" 4
(P) We popped the context stack to a subroutine or eval context, and
then discovered it wasn't a subroutine or eval context.
.Ip "panic: scan_num" 4
(P) \fIscan_num()\fR got called on something that wasn't a number.
.Ip "panic: sv_insert" 4
(P) The \fIsv_insert()\fR routine was told to remove more string than there
was string.
.Ip "panic: top_env" 4
(P) The compiler attempted to do a goto, or something weird like that.
.Ip "panic: yylex" 4
(P) The lexer got into a bad state while processing a case modifier.
.Ip "Parentheses missing around \*(N"%s\*(T" list" 4
(W) You said something like
.Sp
.Vb 1
\&    my $foo, $bar = @_;
.Ve
when you meant
.Sp
.Vb 1
\&    my ($foo, $bar) = @_;
.Ve
Remember that \*(L"my\*(R" and \*(L"local\*(R" bind closer than comma.
.Ip "Perl %3.3f required\*(--this is only version %s, stopped" 4
(F) The module in question uses features of a version of Perl more recent
than the currently running version.  How long has it been since you upgraded,
anyway?  See the \f(CWrequire\fR entry in the \fIperlfunc\fR manpage.
.Ip "Permission denied" 4
(F) The setuid emulator in suidperl decided you were up to no good.
.Ip "pid %x not a child" 4
(W) A warning peculiar to \s-1VMS\s0.  \fIWaitpid()\fR was asked to wait for a process which
isn't a subprocess of the current process.  While this is fine from \s-1VMS\s0\*(R'
perspective, it's probably not what you intended.
.Ip "\s-1POSIX\s0 getpgrp can't take an argument" 4
(F) Your C compiler uses \s-1POSIX\s0 \fIgetpgrp()\fR, which takes no argument, unlike
the \s-1BSD\s0 version, which takes a pid.
.Ip "Possible attempt to put comments in qw() list" 4
(W) \fIqw()\fR lists contain items separated by whitespace; as with literal
strings, comment characters are not ignored, but are instead treated
as literal data.  (You may have used different delimiters than the
parentheses shown here; braces are also frequently used.)
.Sp
You probably wrote something like this:
.Sp
.Vb 4
\&    @list = qw(
\&        a # a comment
\&        b # another comment
\&    );
.Ve
when you should have written this:
.Sp
.Vb 4
\&    @list = qw(
\&        a
\&        b
\&    );
.Ve
If you really want comments, build your list the
old-fashioned way, with quotes and commas:
.Sp
.Vb 4
\&    @list = (
\&        'a',    # a comment
\&        'b',    # another comment
\&    );
.Ve
.Ip "Possible attempt to separate words with commas" 4
(W) \fIqw()\fR lists contain items separated by whitespace; therefore commas
aren't needed to separate the items.  (You may have used different
delimiters than the parentheses shown here; braces are also frequently
used.)
.Sp
You probably wrote something like this:
.Sp
.Vb 1
\&    qw! a, b, c !;
.Ve
which puts literal commas into some of the list items.  Write it without
commas if you don't want them to appear in your data:
.Sp
.Vb 1
\&    qw! a b c !;
.Ve
.Ip "Possible memory corruption: %s overflowed 3rd argument" 4
(F) An \fIioctl()\fR or \fIfcntl()\fR returned more than Perl was bargaining for.
Perl guesses a reasonable buffer size, but puts a sentinel byte at the
end of the buffer just in case.  This sentinel byte got clobbered, and
Perl assumes that memory is now corrupted.  See the \f(CWioctl\fR entry in the \fIperlfunc\fR manpage.
.Ip "Precedence problem: open %s should be open(%s)" 4
(S) The old irregular construct
.Sp
.Vb 1
\&    open FOO || die;
.Ve
is now misinterpreted as
.Sp
.Vb 1
\&    open(FOO || die);
.Ve
because of the strict regularization of Perl 5's grammar into unary
and list operators.  (The old open was a little of both.)  You must
put parentheses around the filehandle, or use the new \*(L"or\*(R" operator
instead of \*(L"||\*(R".
.Ip "print on closed filehandle %s" 4
(W) The filehandle you're printing on got itself closed sometime before now.
Check your logic flow.
.Ip "printf on closed filehandle %s" 4
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.
.Ip "Probable precedence problem on %s" 4
(W) The compiler found a bareword where it expected a conditional,
which often indicates that an || or && was parsed as part of the
last argument of the previous construct, for example:
.Sp
.Vb 1
\&    open FOO || die;
.Ve
.Ip "Prototype mismatch: %s vs %s" 4
(S) The subroutine being declared or defined had previously been declared
or defined with a different function prototype.
.Ip "Range iterator outside integer range" 4
(F) One (or both) of the numeric arguments to the range operator \*(L"..\*(R"
are outside the range which can be represented by integers internally.
One possible workaround is to force Perl to use magical string
increment by prepending \*(L"0\*(R" to your numbers.
.Ip "Read on closed filehandle <%s>" 4
(W) The filehandle you're reading from got itself closed sometime before now.
Check your logic flow.
.Ip "Reallocation too large: %lx" 4
(F) You can't allocate more than 64K on an \s-1MS\s0\-\s-1DOS\s0 machine.
.Ip "Recompile perl with \fB\-D\fR\s-1DEBUGGING\s0 to use \fB\-D\fR switch" 4
(F) You can't use the \fB\-D\fR option unless the code to produce the
desired output is compiled into Perl, which entails some overhead,
which is why it's currently left out of your copy.
.Ip "Recursive inheritance detected in package \*(N'%s\*(T'" 4
(F) More than 100 levels of inheritance were used.  Probably indicates
an unintended loop in your inheritance hierarchy.
.Ip "Recursive inheritance detected while looking for method \*(N'%s\*(T' in package \*(N'%s\*(T'" 4
(F) More than 100 levels of inheritance were encountered while invoking a
method.  Probably indicates an unintended loop in your inheritance hierarchy.
.Ip "Reference found where even-sized list expected" 4
(W) You gave a single reference where Perl was expecting a list with
an even number of elements (for assignment to a hash). This
usually means that you used the anon hash constructor when you meant 
to use parens. In any case, a hash requires key/value \fBpairs\fR.
.Sp
.Vb 4
\&    %hash = { one => 1, two => 2, };    # WRONG
\&    %hash = [ qw/ an anon array / ];    # WRONG
\&    %hash = ( one => 1, two => 2, );    # right
\&    %hash = qw( one 1 two 2 );                  # also fine
.Ve
.Ip "Reference miscount in sv_replace()" 4
(W) The internal \fIsv_replace()\fR function was handed a new \s-1SV\s0 with a
reference count of other than 1.
.Ip "regexp *+ operand could be empty" 4
(F) The part of the regexp subject to either the * or + quantifier
could match an empty string.
.Ip "regexp memory corruption" 4
(P) The regular expression engine got confused by what the regular
expression compiler gave it.
.Ip "regexp out of space" 4
(P) A \*(L"can't happen\*(R" error, because \fIsafemalloc()\fR should have caught it earlier.
.Ip "regexp too big" 4
(F) The current implementation of regular expressions uses shorts as
address offsets within a string.  Unfortunately this means that if
the regular expression compiles to longer than 32767, it'll blow up.
Usually when you want a regular expression this big, there is a better
way to do it with multiple statements.  See the \fIperlre\fR manpage.
.Ip "Reversed %s= operator" 4
(W) You wrote your assignment operator backwards.  The = must always
comes last, to avoid ambiguity with subsequent unary operators.
.Ip "Runaway format" 4
(F) Your format contained the ~~ repeat-until-blank sequence, but it
produced 200 lines at once, and the 200th line looked exactly like the
199th line.  Apparently you didn't arrange for the arguments to exhaust
themselves, either by using ^ instead of @ (for scalar variables), or by
shifting or popping (for array variables).  See the \fIperlform\fR manpage.
.Ip "Scalar value @%s[%s] better written as $%s[%s]" 4
(W) You've used an array slice (indicated by @) to select a single element of
an array.  Generally it's better to ask for a scalar value (indicated by $).
The difference is that \f(CW$foo[&bar]\fR always behaves like a scalar, both when
assigning to it and when evaluating its argument, while \f(CW@foo[&bar]\fR behaves
like a list when you assign to it, and provides a list context to its
subscript, which can do weird things if you're expecting only one subscript.
.Sp
On the other hand, if you were actually hoping to treat the array
element as a list, you need to look into how references work, because
Perl will not magically convert between scalars and lists for you.  See
the \fIperlref\fR manpage.
.Ip "Scalar value @%s{%s} better written as $%s{%s}" 4
(W) You've used a hash slice (indicated by @) to select a single element of
a hash.  Generally it's better to ask for a scalar value (indicated by $).
The difference is that \f(CW$foo{&bar}\fR always behaves like a scalar, both when
assigning to it and when evaluating its argument, while \f(CW@foo{&bar}\fR behaves
like a list when you assign to it, and provides a list context to its
subscript, which can do weird things if you're expecting only one subscript.
.Sp
On the other hand, if you were actually hoping to treat the hash
element as a list, you need to look into how references work, because
Perl will not magically convert between scalars and lists for you.  See
the \fIperlref\fR manpage.
.Ip "Script is not setuid/setgid in suidperl" 4
(F) Oddly, the suidperl program was invoked on a script without a setuid
or setgid bit set.  This doesn't make much sense.
.Ip "Search pattern not terminated" 4
(F) The lexer couldn't find the final delimiter of a // or m{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW$\fR from a variable \f(CW$m\fR may cause this error.
.Ip "%sseek() on unopened file" 4
(W) You tried to use the \fIseek()\fR or \fIsysseek()\fR function on a filehandle that
was either never opened or has since been closed.
.Ip "select not implemented" 4
(F) This machine doesn't implement the \fIselect()\fR system call.
.Ip "sem%s not implemented" 4
(F) You don't have System V semaphore \s-1IPC\s0 on your system.
.Ip "semi-panic: attempt to dup freed string" 4
(S) The internal \fInewSVsv()\fR routine was called to duplicate a scalar
that had previously been marked as free.
.Ip "Semicolon seems to be missing" 4
(W) A nearby syntax error was probably caused by a missing semicolon,
or possibly some other missing operator, such as a comma.
.Ip "Send on closed socket" 4
(W) The filehandle you're sending to got itself closed sometime before now.
Check your logic flow.
.Ip "Sequence (? incomplete" 4
(F) A regular expression ended with an incomplete extension (?.
See the \fIperlre\fR manpage.
.Ip "Sequence (?#... not terminated" 4
(F) A regular expression comment must be terminated by a closing
parenthesis.  Embedded parentheses aren't allowed.  See the \fIperlre\fR manpage.
.Ip "Sequence (?%s...) not implemented" 4
(F) A proposed regular expression extension has the character reserved
but has not yet been written.  See the \fIperlre\fR manpage.
.Ip "Sequence (?%s...) not recognized" 4
(F) You used a regular expression extension that doesn't make sense.
See the \fIperlre\fR manpage.
.Ip "Server error" 4
Also known as \*(L"500 Server error\*(R".
.Sp
\fBThis is a \s-1CGI\s0 error, not a Perl error\fR.
.Sp
You need to make sure your script is executable, is accessible by the user
\s-1CGI\s0 is running the script under (which is probably not the user account you
tested it under), does not rely on any environment variables (like \s-1PATH\s0)
from the user it isn't running under, and isn't in a location where the \s-1CGI\s0
server can't find it, basically, more or less.  Please see the following
for more information:
.Sp
.Vb 5
\&        http://www.perl.com/perl/faq/idiots-guide.html
\&        http://www.perl.com/perl/faq/perl-cgi-faq.html
\&        ftp://rtfm.mit.edu/pub/usenet/news.answers/www/cgi-faq
\&        http://hoohoo.ncsa.uiuc.edu/cgi/interface.html
\&        http://www-genome.wi.mit.edu/WWW/faqs/www-security-faq.html
.Ve
.Ip "setegid() not implemented" 4
(F) You tried to assign to \f(CW$)\fR, and your operating system doesn't support
the \fIsetegid()\fR system call (or equivalent), or at least Configure didn't
think so.
.Ip "seteuid() not implemented" 4
(F) You tried to assign to \f(CW$>\fR, and your operating system doesn't support
the \fIseteuid()\fR system call (or equivalent), or at least Configure didn't
think so.
.Ip "setrgid() not implemented" 4
(F) You tried to assign to \f(CW$(\fR, and your operating system doesn't support
the \fIsetrgid()\fR system call (or equivalent), or at least Configure didn't
think so.
.Ip "setruid() not implemented" 4
(F) You tried to assign to \f(CW$<\fR, and your operating system doesn't support
the \fIsetruid()\fR system call (or equivalent), or at least Configure didn't
think so.
.Ip "Setuid/gid script is writable by world" 4
(F) The setuid emulator won't run a script that is writable by the world,
because the world might have written on it already.
.Ip "shm%s not implemented" 4
(F) You don't have System V shared memory \s-1IPC\s0 on your system.
.Ip "shutdown() on closed fd" 4
(W) You tried to do a shutdown on a closed socket.  Seems a bit superfluous.
.Ip "\s-1SIG\s0%s handler \*(N"%s\*(T" not defined" 4
(W) The signal handler named in \f(CW%SIG\fR doesn't, in fact, exist.  Perhaps you
put it into the wrong package?
.Ip "sort is now a reserved word" 4
(F) An ancient error message that almost nobody ever runs into anymore.
But before sort was a keyword, people sometimes used it as a filehandle.
.Ip "Sort subroutine didn't return a numeric value" 4
(F) A sort comparison routine must return a number.  You probably blew
it by not using \f(CW<=>\fR or \f(CWcmp\fR, or by not using them correctly.
See the \f(CWsort\fR entry in the \fIperlfunc\fR manpage.
.Ip "Sort subroutine didn't return single value" 4
(F) A sort comparison subroutine may not return a list value with more
or less than one element.  See the \f(CWsort\fR entry in the \fIperlfunc\fR manpage.
.Ip "Split loop" 4
(P) The split was looping infinitely.  (Obviously, a split shouldn't iterate
more times than there are characters of input, which is what happened.)
See the \f(CWsplit\fR entry in the \fIperlfunc\fR manpage.
.Ip "Stat on unopened file <%s>" 4
(W) You tried to use the \fIstat()\fR function (or an equivalent file test)
on a filehandle that was either never opened or has since been closed.
.Ip "Statement unlikely to be reached" 4
(W) You did an \fIexec()\fR with some statement after it other than a \fIdie()\fR.
This is almost always an error, because \fIexec()\fR never returns unless
there was a failure.  You probably wanted to use \fIsystem()\fR instead,
which does return.  To suppress this warning, put the \fIexec()\fR in a block
by itself.
.Ip "Strange *+?{} on zero-length expression" 4
(W) You applied a regular expression quantifier in a place where it
makes no sense, such as on a zero-width assertion.
Try putting the quantifier inside the assertion instead.  For example,
the way to match \*(L"abc\*(R" provided that it is followed by three
repetitions of \*(L"xyz\*(R" is \f(CW/abc(?=(?:xyz){3})/\fR, not \f(CW/abc(?=xyz){3}/\fR.
.Ip "Stub found while resolving method `%s\*(T' overloading `%s\*(T' in package `%s\*(T'" 4
(P) Overloading resolution over \f(CW@ISA\fR tree may be broken by importation stubs.
Stubs should never be implicitely created, but explicit calls to \f(CWcan\fR
may break this.
.Ip "Subroutine %s redefined" 4
(W) You redefined a subroutine.  To suppress this warning, say
.Sp
.Vb 4
\&    {
\&        local $^W = 0;
\&        eval "sub name { ... }";
\&    }
.Ve
.Ip "Substitution loop" 4
(P) The substitution was looping infinitely.  (Obviously, a
substitution shouldn't iterate more times than there are characters of
input, which is what happened.)  See the discussion of substitution in
the section on \fIQuote and Quote-like Operators\fR in the \fIperlop\fR manpage.
.Ip "Substitution pattern not terminated" 4
(F) The lexer couldn't find the interior delimiter of a s/// or s{}{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW$\fR from variable \f(CW$s\fR may cause this error.
.Ip "Substitution replacement not terminated" 4
(F) The lexer couldn't find the final delimiter of a s/// or s{}{}
construct.  Remember that bracketing delimiters count nesting level.
Missing the leading \f(CW$\fR from variable \f(CW$s\fR may cause this error.
.Ip "substr outside of string" 4
(S),(W) You tried to reference a \fIsubstr()\fR that pointed outside of a
string.  That is, the absolute value of the offset was larger than the
length of the string.  See the \f(CWsubstr\fR entry in the \fIperlfunc\fR manpage.  This warning is
mandatory if substr is used in an lvalue context (as the left hand side
of an assignment or as a subroutine argument for example).
.Ip "suidperl is no longer needed since %s" 4
(F) Your Perl was compiled with \fB\-D\fR\s-1SETUID_SCRIPTS_ARE_SECURE_NOW\s0, but a
version of the setuid emulator somehow got run anyway.
.Ip "switching effective %s is not implemented" 4
(F) While under the \f(CWuse filetest\fR pragma, we cannot switch the
real and effective uids or gids.
.Ip "syntax error" 4
(F) Probably means you had a syntax error.  Common reasons include:
.Sp
.Vb 6
\&    A keyword is misspelled.
\&    A semicolon is missing.
\&    A comma is missing.
\&    An opening or closing parenthesis is missing.
\&    An opening or closing brace is missing.
\&    A closing quote is missing.
.Ve
Often there will be another error message associated with the syntax
error giving more information.  (Sometimes it helps to turn on \fB\-w\fR.)
The error message itself often tells you where it was in the line when
it decided to give up.  Sometimes the actual error is several tokens
before this, because Perl is good at understanding random input.
Occasionally the line number may be misleading, and once in a blue moon
the only way to figure out what's triggering the error is to call
\f(CWperl -c\fR repeatedly, chopping away half the program each time to see
if the error went away.  Sort of the cybernetic version of 20\ questions.
.Ip "syntax error at line %d: `%s\*(T' unexpected" 4
(A) You've accidentally run your script through the Bourne shell
instead of Perl.  Check the #! line, or manually feed your script
into Perl yourself.
.Ip "System V %s is not implemented on this machine" 4
(F) You tried to do something with a function beginning with \*(L"sem\*(R",
\*(L"shm\*(R", or \*(L"msg\*(R" but that System V \s-1IPC\s0 is not implemented in your
machine.  In some machines the functionality can exist but be
unconfigured.  Consult your system support.
.Ip "Syswrite on closed filehandle" 4
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.
.Ip "Target of goto is too deeply nested" 4
(F) You tried to use \f(CWgoto\fR to reach a label that was too deeply
nested for Perl to reach.  Perl is doing you a favor by refusing.
.Ip "tell() on unopened file" 4
(W) You tried to use the \fItell()\fR function on a filehandle that was either
never opened or has since been closed.
.Ip "Test on unopened file <%s>" 4
(W) You tried to invoke a file test operator on a filehandle that isn't
open.  Check your logic.  See also the section on \fI\-X\fR in the \fIperlfunc\fR manpage.
.Ip "That use of $[ is unsupported" 4
(F) Assignment to \f(CW$[\fR is now strictly circumscribed, and interpreted as
a compiler directive.  You may say only one of
.Sp
.Vb 6
\&    $[ = 0;
\&    $[ = 1;
\&    ...
\&    local $[ = 0;
\&    local $[ = 1;
\&    ...
.Ve
This is to prevent the problem of one module changing the array base
out from under another module inadvertently.  See the section on \fI$[\fR in the \fIperlvar\fR manpage.
.Ip "The %s function is unimplemented" 4
The function indicated isn't implemented on this architecture, according
to the probings of Configure.
.Ip "The crypt() function is unimplemented due to excessive paranoia" 4
(F) Configure couldn't find the \fIcrypt()\fR function on your machine,
probably because your vendor didn't supply it, probably because they
think the U.S. Government thinks it's a secret, or at least that they
will continue to pretend that it is.  And if you quote me on that, I
will deny it.
.Ip "The stat preceding \f(CW-l _\fR wasn't an lstat" 4
(F) It makes no sense to test the current stat buffer for symbolic linkhood
if the last stat that wrote to the stat buffer already went past
the symlink to get to the real file.  Use an actual filename instead.
.Ip "times not implemented" 4
(F) Your version of the C library apparently doesn't do \fItimes()\fR.  I suspect
you're not running on Unix.
.Ip "Too few args to syscall" 4
(F) There has to be at least one argument to \fIsyscall()\fR to specify the
system call to call, silly dilly.
.Ip "Too late for \*(N"\fB\-T\fR\*(T" option" 4
(X) The #! line (or local equivalent) in a Perl script contains the
\fB\-T\fR option, but Perl was not invoked with \fB\-T\fR in its command line.
This is an error because, by the time Perl discovers a \fB\-T\fR in a
script, it's too late to properly taint everything from the environment.
So Perl gives up.
.Sp
If the Perl script is being executed as a command using the #!
mechanism (or its local equivalent), this error can usually be fixed
by editing the #! line so that the \fB\-T\fR option is a part of Perl's
first argument: e.g. change \f(CWperl -n -T\fR to \f(CWperl -T -n\fR.
.Sp
If the Perl script is being executed as \f(CWperl scriptname\fR, then the
\fB\-T\fR option must appear on the command line: \f(CWperl -T scriptname\fR.
.Ip "Too late for \*(N"\-%s\*(T" option" 4
(X) The #! line (or local equivalent) in a Perl script contains the
\fB\-M\fR or \fB\-m\fR option.  This is an error because \fB\-M\fR and \fB\-m\fR options
are not intended for use inside scripts.  Use the \f(CWuse\fR pragma instead.
.Ip "Too many ('s" 4
.Ip "Too many )'s" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "Too many args to syscall" 4
(F) Perl supports a maximum of only 14 args to \fIsyscall()\fR.
.Ip "Too many arguments for %s" 4
(F) The function requires fewer arguments than you specified.
.Ip "trailing \e in regexp" 4
(F) The regular expression ends with an unbackslashed backslash.  Backslash
it.   See the \fIperlre\fR manpage.
.Ip "Transliteration pattern not terminated" 4
(F) The lexer couldn't find the interior delimiter of a tr/// or tr[][]
or y/// or y[][] construct.  Missing the leading \f(CW$\fR from variables
\f(CW$tr\fR or \f(CW$y\fR may cause this error.
.Ip "Transliteration replacement not terminated" 4
(F) The lexer couldn't find the final delimiter of a tr/// or tr[][]
construct.
.Ip "truncate not implemented" 4
(F) Your machine doesn't implement a file truncation mechanism that
Configure knows about.
.Ip "Type of arg %d to %s must be %s (not %s)" 4
(F) This function requires the argument in that position to be of a
certain type.  Arrays must be \f(CW@NAME\fR or \f(CW@{EXPR}\fR.  Hashes must be
\f(CW%NAME\fR or \f(CW%{EXPR}\fR.  No implicit dereferencing is allowed\*(--use the
{\s-1EXPR\s0} forms as an explicit dereference.  See the \fIperlref\fR manpage.
.Ip "umask: argument is missing initial 0" 4
(W) A umask of 222 is incorrect.  It should be 0222, because octal
literals always start with 0 in Perl, as in C.
.Ip "umask not implemented" 4
(F) Your machine doesn't implement the umask function and you tried
to use it to restrict permissions for yourself (\s-1EXPR\s0 & 0700).
.Ip "Unable to create sub named \*(N"%s\*(T"" 4
(F) You attempted to create or access a subroutine with an illegal name.
.Ip "Unbalanced context: %d more PUSHes than POPs" 4
(W) The exit code detected an internal inconsistency in how many execution
contexts were entered and left.
.Ip "Unbalanced saves: %d more saves than restores" 4
(W) The exit code detected an internal inconsistency in how many
values were temporarily localized.
.Ip "Unbalanced scopes: %d more ENTERs than LEAVEs" 4
(W) The exit code detected an internal inconsistency in how many blocks
were entered and left.
.Ip "Unbalanced tmps: %d more allocs than frees" 4
(W) The exit code detected an internal inconsistency in how many mortal
scalars were allocated and freed.
.Ip "Undefined format \*(N"%s\*(T" called" 4
(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?  See the \fIperlform\fR manpage.
.Ip "Undefined sort subroutine \*(N"%s\*(T" called" 4
(F) The sort comparison routine specified doesn't seem to exist.  Perhaps
it's in a different package?  See the \f(CWsort\fR entry in the \fIperlfunc\fR manpage.
.Ip "Undefined subroutine &%s called" 4
(F) The subroutine indicated hasn't been defined, or if it was, it
has since been undefined.
.Ip "Undefined subroutine called" 4
(F) The anonymous subroutine you're trying to call hasn't been defined,
or if it was, it has since been undefined.
.Ip "Undefined subroutine in sort" 4
(F) The sort comparison routine specified is declared but doesn't seem to
have been defined yet.  See the \f(CWsort\fR entry in the \fIperlfunc\fR manpage.
.Ip "Undefined top format \*(N"%s\*(T" called" 4
(F) The format indicated doesn't seem to exist.  Perhaps it's really in
another package?  See the \fIperlform\fR manpage.
.Ip "Undefined value assigned to typeglob" 4
(W) An undefined value was assigned to a typeglob, a la \f(CW*foo = undef\fR.
This does nothing.  It's possible that you really mean \f(CWundef *foo\fR.
.Ip "unexec of %s into %s failed!" 4
(F) The \fIunexec()\fR routine failed for some reason.  See your local \s-1FSF\s0
representative, who probably put it there in the first place.
.Ip "Unknown \s-1BYTEORDER\s0" 4
(F) There are no byte-swapping functions for a machine with this byte order.
.Ip "unmatched () in regexp" 4
(F) Unbackslashed parentheses must always be balanced in regular
expressions.  If you're a vi user, the % key is valuable for finding
the matching parenthesis.  See the \fIperlre\fR manpage.
.Ip "Unmatched right bracket" 4
(F) The lexer counted more closing curly brackets (braces) than opening
ones, so you're probably missing an opening bracket.  As a general
rule, you'll find the missing one (so to speak) near the place you were
last editing.
.Ip "unmatched [] in regexp" 4
(F) The brackets around a character class must match.  If you wish to
include a closing bracket in a character class, backslash it or put it first.
See the \fIperlre\fR manpage.
.Ip "Unquoted string \*(N"%s\*(T" may clash with future reserved word" 4
(W) You used a bareword that might someday be claimed as a reserved word.
It's best to put such a word in quotes, or capitalize it somehow, or insert
an underbar into it.  You might also declare it as a subroutine.
.Ip "Unrecognized character %s" 4
(F) The Perl parser has no idea what to do with the specified character
in your Perl script (or eval).  Perhaps you tried to run a compressed
script, a binary program, or a directory as a Perl program.
.Ip "Unrecognized signal name \*(N"%s\*(T"" 4
(F) You specified a signal name to the \fIkill()\fR function that was not recognized.
Say \f(CWkill -l\fR in your shell to see the valid signal names on your system.
.Ip "Unrecognized switch: \-%s  (\-h will show valid options)" 4
(F) You specified an illegal option to Perl.  Don't do that.
(If you think you didn't do that, check the #! line to see if it's
supplying the bad switch on your behalf.)
.Ip "Unsuccessful %s on filename containing newline" 4
(W) A file operation was attempted on a filename, and that operation
failed, \s-1PROBABLY\s0 because the filename contained a newline, \s-1PROBABLY\s0
because you forgot to \fIchop()\fR or \fIchomp()\fR it off.  See the \f(CWchomp\fR entry in the \fIperlfunc\fR manpage.
.Ip "Unsupported directory function \*(N"%s\*(T" called" 4
(F) Your machine doesn't support \fIopendir()\fR and \fIreaddir()\fR.
.Ip "Unsupported function fork" 4
(F) Your version of executable does not support forking.
.Sp
Note that under some systems, like \s-1OS/2\s0, there may be different flavors of
Perl executables, some of which may support fork, some not. Try changing
the name you call Perl by to \f(CWperl_\fR, \f(CWperl__\fR, and so on.
.Ip "Unsupported function %s" 4
(F) This machine doesn't implement the indicated function, apparently.
At least, Configure doesn't think so.
.Ip "Unsupported socket function \*(N"%s\*(T" called" 4
(F) Your machine doesn't support the Berkeley socket mechanism, or at
least that's what Configure thought.
.Ip "Unterminated <> operator" 4
(F) The lexer saw a left angle bracket in a place where it was expecting
a term, so it's looking for the corresponding right angle bracket, and not
finding it.  Chances are you left some needed parentheses out earlier in
the line, and you really meant a \*(L"less than\*(R".
.Ip "Use of $# is deprecated" 4
(D) This was an ill-advised attempt to emulate a poorly defined \fBawk\fR feature.
Use an explicit \fIprintf()\fR or \fIsprintf()\fR instead.
.Ip "Use of $* is deprecated" 4
(D) This variable magically turned on multi-line pattern matching, both for
you and for any luckless subroutine that you happen to call.  You should
use the new \f(CW//m\fR and \f(CW//s\fR modifiers now to do that without the dangerous
action-at-a-distance effects of \f(CW$*\fR.
.Ip "Use of %s in printf format not supported" 4
(F) You attempted to use a feature of printf that is accessible from
only C.  This usually means there's a better way to do it in Perl.
.Ip "Use of bare << to mean <<"""" is deprecated" 4
(D) You are now encouraged to use the explicitly quoted form if you
wish to use an empty line as the terminator of the here-document.
.Ip "Use of implicit split to @_ is deprecated" 4
(D) It makes a lot of work for the compiler when you clobber a
subroutine's argument list, so it's better if you assign the results of
a \fIsplit()\fR explicitly to an array (or list).
.Ip "Use of inherited \s-1AUTOLOAD\s0 for non-method %s() is deprecated" 4
(D) As an (ahem) accidental feature, \f(CWAUTOLOAD\fR subroutines are looked
up as methods (using the \f(CW@ISA\fR hierarchy) even when the subroutines to
be autoloaded were called as plain functions (e.g. \f(CWFoo::bar()\fR), not
as methods (e.g. \f(CWFoo->bar()\fR or \f(CW$obj->bar()\fR).
.Sp
This bug will be rectified in Perl 5.005, which will use method lookup
only for methods\*(R' \f(CWAUTOLOAD\fRs.  However, there is a significant base
of existing code that may be using the old behavior.  So, as an
interim step, Perl 5.004 issues an optional warning when non-methods
use inherited \f(CWAUTOLOAD\fRs.
.Sp
The simple rule is:  Inheritance will not work when autoloading
non-methods.  The simple fix for old code is:  In any module that used to
depend on inheriting \f(CWAUTOLOAD\fR for non-methods from a base class named
\f(CWBaseClass\fR, execute \f(CW*AUTOLOAD = \e&BaseClass::AUTOLOAD\fR during startup.
.Sp
In code that currently says \f(CWuse AutoLoader; @ISA = qw(AutoLoader);\fR you
should remove AutoLoader from \f(CW@ISA\fR and change \f(CWuse AutoLoader;\fR to
\f(CWuse AutoLoader 'AUTOLOAD';\fR.
.Ip "Use of reserved word \*(N"%s\*(T" is deprecated" 4
(D) The indicated bareword is a reserved word.  Future versions of perl
may use it as a keyword, so you're better off either explicitly quoting
the word in a manner appropriate for its context of use, or using a
different name altogether.  The warning can be suppressed for subroutine
names by either adding a \f(CW&\fR prefix, or using a package qualifier,
e.g. \f(CW&our()\fR, or \f(CWFoo::our()\fR.
.Ip "Use of %s is deprecated" 4
(D) The construct indicated is no longer recommended for use, generally
because there's a better way to do it, and also because the old way has
bad side effects.
.Ip "Use of uninitialized value" 4
(W) An undefined value was used as if it were already defined.  It was
interpreted as a "" or a 0, but maybe it was a mistake.  To suppress this
warning assign an initial value to your variables.
.Ip "Useless use of \*(N"re\*(T" pragma" 4
(W) You did \f(CWuse re;\fR without any arguments.   That isn't very useful.
.Ip "Useless use of %s in void context" 4
(W) You did something without a side effect in a context that does nothing
with the return value, such as a statement that doesn't return a value
from a block, or the left side of a scalar comma operator.  Very often
this points not to stupidity on your part, but a failure of Perl to parse
your program the way you thought it would.  For example, you'd get this
if you mixed up your C precedence with Python precedence and said
.Sp
.Vb 1
\&    $one, $two = 1, 2;
.Ve
when you meant to say
.Sp
.Vb 1
\&    ($one, $two) = (1, 2);
.Ve
Another common error is to use ordinary parentheses to construct a list
reference when you should be using square or curly brackets, for
example, if you say
.Sp
.Vb 1
\&    $array = (1,2);
.Ve
when you should have said
.Sp
.Vb 1
\&    $array = [1,2];
.Ve
The square brackets explicitly turn a list value into a scalar value,
while parentheses do not.  So when a parenthesized list is evaluated in
a scalar context, the comma is treated like C's comma operator, which
throws away the left argument, which is not what you want.  See
the \fIperlref\fR manpage for more on this.
.Ip "untie attempted while %d inner references still exist" 4
(W) A copy of the object returned from \f(CWtie\fR (or \f(CWtied\fR) was still
valid when \f(CWuntie\fR was called.
.Ip "Value of %s can be \*(N"0\*(T"; test with defined()" 4
(W) In a conditional expression, you used <\s-1HANDLE\s0>, <*> (glob), \f(CWeach()\fR,
or \f(CWreaddir()\fR as a boolean value.  Each of these constructs can return a
value of \*(L"0\*(R"; that would make the conditional expression false, which is
probably not what you intended.  When using these constructs in conditional
expressions, test their values with the \f(CWdefined\fR operator.
.Ip "Variable \*(N"%s\*(T" is not imported%s" 4
(F) While \*(L"use strict\*(R" in effect, you referred to a global variable
that you apparently thought was imported from another module, because
something else of the same name (usually a subroutine) is exported
by that module.  It usually means you put the wrong funny character
on the front of your variable.
.Ip "Variable \*(N"%s\*(T" may be unavailable" 4
(W) An inner (nested) \fIanonymous\fR subroutine is inside a \fInamed\fR
subroutine, and outside that is another subroutine; and the anonymous
(innermost) subroutine is referencing a lexical variable defined in
the outermost subroutine.  For example:
.Sp
.Vb 1
\&   sub outermost { my $a; sub middle { sub { $a } } }
.Ve
If the anonymous subroutine is called or referenced (directly or
indirectly) from the outermost subroutine, it will share the variable
as you would expect.  But if the anonymous subroutine is called or
referenced when the outermost subroutine is not active, it will see
the value of the shared variable as it was before and during the
*first* call to the outermost subroutine, which is probably not what
you want.
.Sp
In these circumstances, it is usually best to make the middle
subroutine anonymous, using the \f(CWsub {}\fR syntax.  Perl has specific
support for shared variables in nested anonymous subroutines; a named
subroutine in between interferes with this feature.
.Ip "Variable \*(N"%s\*(T" will not stay shared" 4
(W) An inner (nested) \fInamed\fR subroutine is referencing a lexical
variable defined in an outer subroutine.
.Sp
When the inner subroutine is called, it will probably see the value of
the outer subroutine's variable as it was before and during the
*first* call to the outer subroutine; in this case, after the first
call to the outer subroutine is complete, the inner and outer
subroutines will no longer share a common value for the variable.  In
other words, the variable will no longer be shared.
.Sp
Furthermore, if the outer subroutine is anonymous and references a
lexical variable outside itself, then the outer and inner subroutines
will \fInever\fR share the given variable.
.Sp
This problem can usually be solved by making the inner subroutine
anonymous, using the \f(CWsub {}\fR syntax.  When inner anonymous subs that
reference variables in outer subroutines are called or referenced,
they are automatically rebound to the current values of such
variables.
.Ip "Variable syntax" 4
(A) You've accidentally run your script through \fBcsh\fR instead
of Perl.  Check the #! line, or manually feed your script into
Perl yourself.
.Ip "perl: warning: Setting locale failed." 4
(S) The whole warning message will look something like:
.Sp
.Vb 6
\&        perl: warning: Setting locale failed.
\&        perl: warning: Please check that your locale settings:
\&                LC_ALL = "En_US",
\&                LANG = (unset)
\&            are supported and installed on your system.
\&        perl: warning: Falling back to the standard locale ("C").
.Ve
Exactly what were the failed locale settings varies.  In the above the
settings were that the \s-1LC_ALL\s0 was \*(L"En_US\*(R" and the \s-1LANG\s0 had no value.
This error means that Perl detected that you and/or your system
administrator have set up the so-called variable system but Perl could
not use those settings.  This was not dead serious, fortunately: there
is a \*(L"default locale\*(R" called \*(L"C\*(R" that Perl can and will use, the
script will be run.  Before you really fix the problem, however, you
will get the same error message each time you run Perl.  How to really
fix the problem can be found in the \fIperllocale\fR manpage section \fB\s-1LOCALE\s0 \s-1PROBLEMS\s0\fR.
.Ip "Warning: something's wrong" 4
(W) You passed \fIwarn()\fR an empty string (the equivalent of \f(CWwarn ""\fR) or
you called it with no args and \f(CW$_\fR was empty.
.Ip "Warning: unable to close filehandle %s properly" 4
(S) The implicit \fIclose()\fR done by an \fIopen()\fR got an error indication on the
\fIclose()\fR.  This usually indicates your file system ran out of disk space.
.Ip "Warning: Use of \*(N"%s\*(T" without parentheses is ambiguous" 4
(S) You wrote a unary operator followed by something that looks like a
binary operator that could also have been interpreted as a term or
unary operator.  For instance, if you know that the rand function
has a default argument of 1.0, and you write
.Sp
.Vb 1
\&    rand + 5;
.Ve
you may \s-1THINK\s0 you wrote the same thing as
.Sp
.Vb 1
\&    rand() + 5;
.Ve
but in actual fact, you got
.Sp
.Vb 1
\&    rand(+5);
.Ve
So put in parentheses to say what you really mean.
.Ip "Write on closed filehandle" 4
(W) The filehandle you're writing to got itself closed sometime before now.
Check your logic flow.
.Ip "X outside of string" 4
(F) You had a pack template that specified a relative position before
the beginning of the string being unpacked.  See the \f(CWpack\fR entry in the \fIperlfunc\fR manpage.
.Ip "x outside of string" 4
(F) You had a pack template that specified a relative position after
the end of the string being unpacked.  See the \f(CWpack\fR entry in the \fIperlfunc\fR manpage.
.Ip "Xsub \*(N"%s\*(T" called in sort" 4
(F) The use of an external subroutine as a sort comparison is not yet supported.
.Ip "Xsub called in sort" 4
(F) The use of an external subroutine as a sort comparison is not yet supported.
.Ip "You can't use \f(CW-l\fR on a filehandle" 4
(F) A filehandle represents an opened file, and when you opened the file it
already went past any symlink you are presumably trying to look for.
Use a filename instead.
.Ip "\s-1YOU\s0 \s-1HAVEN\s0'T \s-1DISABLED\s0 \s-1SET\s0\-\s-1ID\s0 \s-1SCRIPTS\s0 \s-1IN\s0 \s-1THE\s0 \s-1KERNEL\s0 \s-1YET\s0!" 4
(F) And you probably never will, because you probably don't have the
sources to your kernel, and your vendor probably doesn't give a rip
about what you want.  Your best bet is to use the wrapsuid script in
the eg directory to put a setuid C wrapper around your script.
.Ip "You need to quote \*(N"%s\*(T"" 4
(W) You assigned a bareword as a signal handler name.  Unfortunately, you
already have a subroutine of that name declared, which means that Perl 5
will try to call the subroutine when the assignment is executed, which is
probably not what you want.  (If it \s-1IS\s0 what you want, put an & in front.)
.Ip "[gs]etsockopt() on closed fd" 4
(W) You tried to get or set a socket option on a closed socket.
Did you forget to check the return value of your \fIsocket()\fR call?
See the \f(CWgetsockopt\fR entry in the \fIperlfunc\fR manpage.
.Ip "\e1 better written as $1" 4
(W) Outside of patterns, backreferences live on as variables.  The use
of backslashes is grandfathered on the right-hand side of a
substitution, but stylistically it's better to use the variable form
because other Perl programmers will expect it, and it works better
if there are more than 9 backreferences.
.Ip "\*(N'|\*(T' and \*(N'<\*(T' may not both be specified on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
found that \s-1STDIN\s0 was a pipe, and that you also tried to redirect \s-1STDIN\s0 using
\&'<\*(R'.  Only one \s-1STDIN\s0 stream to a customer, please.
.Ip "\*(N'|\*(T' and \*(N'>\*(T' may not both be specified on command line" 4
(F) An error peculiar to \s-1VMS\s0.  Perl does its own command line redirection, and
thinks you tried to redirect stdout both to a file and into a pipe to another
command.  You need to choose one or the other, though nothing's stopping you
from piping into a program or Perl script which \*(L'splits\*(R' output into two
streams, such as
.Sp
.Vb 6
\&    open(OUT,">$ARGV[0]") or die "Can't write to $ARGV[0]: $!";
\&    while (<STDIN>) {
\&        print;
\&        print OUT;
\&    }
\&    close OUT;
.Ve
.Ip "Got an error from DosAllocMem" 4
(P) An error peculiar to \s-1OS/2\s0.  Most probably you're using an obsolete
version of Perl, and this should not happen anyway.
.Ip "Malformed \s-1PERLLIB_PREFIX\s0" 4
(F) An error peculiar to \s-1OS/2\s0.  \s-1PERLLIB_PREFIX\s0 should be of the form
.Sp
.Vb 1
\&    prefix1;prefix2
.Ve
or
.Sp
.Vb 1
\&    prefix1 prefix2
.Ve
with nonempty prefix1 and prefix2.  If \f(CWprefix1\fR is indeed a prefix
of a builtin library search path, prefix2 is substituted.  The error
may appear if components are not found, or are too long.  See
\*(L"\s-1PERLLIB_PREFIX\s0\*(R" in \fI\s-1README\s0.os2\fR.
.Ip "\s-1PERL_SH_DIR\s0 too long" 4
(F) An error peculiar to \s-1OS/2\s0. \s-1PERL_SH_DIR\s0 is the directory to find the
\f(CWsh\fR\-shell in.  See \*(L"\s-1PERL_SH_DIR\s0\*(R" in \fI\s-1README\s0.os2\fR.
.Ip "Process terminated by \s-1SIG\s0%s" 4
(W) This is a standard message issued by \s-1OS/2\s0 applications, while *nix
applications die in silence.  It is considered a feature of the \s-1OS/2\s0
port.  One can easily disable this by appropriate sighandlers, see
the section on \fISignals\fR in the \fIperlipc\fR manpage.  See also \*(L"Process terminated by \s-1SIGTERM/SIGINT\s0\*(R"
in \fI\s-1README\s0.os2\fR.

.rn }` ''
.IX Title "PERLDIAG 1"
.IX Name "perldiag - various Perl diagnostics"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Item "\*(N"my\*(T" variable %s can't be in a package"

.IX Item "\*(N"my\*(T" variable %s masks earlier declaration in same %s"

.IX Item "\*(N"no\*(T" not allowed in expression"

.IX Item "\*(N"use\*(T" not allowed in expression"

.IX Item "% may only be used in unpack"

.IX Item "%s (...) interpreted as function"

.IX Item "%s argument is not a \s-1HASH\s0 element"

.IX Item "%s argument is not a \s-1HASH\s0 element or slice"

.IX Item "%s did not return a true value"

.IX Item "%s found where operator expected"

.IX Item "%s had compilation errors"

.IX Item "%s has too many errors"

.IX Item "%s matches null string many times"

.IX Item "%s never introduced"

.IX Item "%s syntax \s-1OK\s0"

.IX Item "%s: Command not found"

.IX Item "%s: Expression syntax"

.IX Item "%s: Undefined variable"

.IX Item "%s: not found"

.IX Item "(Missing semicolon on previous line?)"

.IX Item "\fB\-P\fR not allowed for setuid/setgid script"

.IX Item "\f(CW-T\fR and \f(CW-B\fR not implemented on filehandles"

.IX Item "\f(CW-p\fR destination: %s"

.IX Item "500 Server error"

.IX Item "?+* follows nothing in regexp"

.IX Item "@ outside of string"

.IX Item "accept() on closed fd"

.IX Item "Allocation too large: %lx"

.IX Item "Applying %s to %s will act on scalar(%s)"

.IX Item "Arg too short for msgsnd"

.IX Item "Ambiguous use of %s resolved as %s"

.IX Item "Ambiguous call resolved as \s-1CORE\s0::%s(), qualify as such or use &"

.IX Item "Args must match #! line"

.IX Item "Argument \*(N"%s\*(T" isn't numeric%s"

.IX Item "Array @%s missing the @ in argument %d of %s()"

.IX Item "assertion botched: %s"

.IX Item "Assertion failed: file \*(N"%s\*(T""

.IX Item "Assignment to both a list and a scalar"

.IX Item "Attempt to free non-arena \s-1SV\s0: 0x%lx"

.IX Item "Attempt to free nonexistent shared string"

.IX Item "Attempt to free temp prematurely"

.IX Item "Attempt to free unreferenced glob pointers"

.IX Item "Attempt to free unreferenced scalar"

.IX Item "Attempt to pack pointer to temporary value"

.IX Item "Attempt to use reference as lvalue in substr"

.IX Item "Bad arg length for %s, is %d, should be %d"

.IX Item "Bad filehandle: %s"

.IX Item "Bad free() ignored"

.IX Item "Bad hash"

.IX Item "Bad index while coercing array into hash"

.IX Item "Bad name after %s::"

.IX Item "Bad symbol for array"

.IX Item "Bad symbol for filehandle"

.IX Item "Bad symbol for hash"

.IX Item "Badly placed ()'s"

.IX Item "Bareword \*(N"%s\*(T" not allowed while \*(N"strict subs\*(T" in use"

.IX Item "Bareword \*(N"%s\*(T" refers to nonexistent package"

.IX Item "\s-1BEGIN\s0 failed\*(--compilation aborted"

.IX Item "\s-1BEGIN\s0 not safe after errors\*(--compilation aborted"

.IX Item "bind() on closed fd"

.IX Item "Bizarre copy of %s in %s"

.IX Item "Callback called exit"

.IX Item "Can't \*(N"goto\*(T" outside a block"

.IX Item "Can't \*(N"goto\*(T" into the middle of a foreach loop"

.IX Item "Can't \*(N"last\*(T" outside a block"

.IX Item "Can't \*(N"next\*(T" outside a block"

.IX Item "Can't \*(N"redo\*(T" outside a block"

.IX Item "Can't bless non-reference value"

.IX Item "Can't break at that line"

.IX Item "Can't call method \*(N"%s\*(T" in empty package \*(N"%s\*(T""

.IX Item "Can't call method \*(N"%s\*(T" on unblessed reference"

.IX Item "Can't call method \*(N"%s\*(T" without a package or object reference"

.IX Item "Can't call method \*(N"%s\*(T" on an undefined value"

.IX Item "Can't chdir to %s"

.IX Item "Can't coerce %s to integer in %s"

.IX Item "Can't coerce %s to number in %s"

.IX Item "Can't coerce %s to string in %s"

.IX Item "Can't coerce array into hash"

.IX Item "Can't create pipe mailbox"

.IX Item "Can't declare %s in my"

.IX Item "Can't do inplace edit on %s: %s"

.IX Item "Can't do inplace edit without backup"

.IX Item "Can't do inplace edit: %s > 14 characters"

.IX Item "Can't do inplace edit: %s is not a regular file"

.IX Item "Can't do setegid!"

.IX Item "Can't do seteuid!"

.IX Item "Can't do setuid"

.IX Item "Can't do waitpid with flags"

.IX Item "Can't do {n,m} with n > m"

.IX Item "Can't emulate \-%s on #! line"

.IX Item "Can't exec \*(N"%s"": %s"

.IX Item "Can't exec %s"

.IX Item "Can't execute %s"

.IX Item "Can't find %s on \s-1PATH\s0, \*(N'.\*(T' not in \s-1PATH\s0"

.IX Item "Can't find %s on \s-1PATH\s0"

.IX Item "Can't find label %s"

.IX Item "Can't find string terminator %s anywhere before \s-1EOF\s0"

.IX Item "Can't fork"

.IX Item "Can't get filespec \- stale stat buffer?"

.IX Item "Can't get pipe mailbox device name"

.IX Item "Can't get \s-1SYSGEN\s0 parameter value for \s-1MAXBUF\s0"

.IX Item "Can't goto subroutine outside a subroutine"

.IX Item "Can't goto subroutine from an eval-string"

.IX Item "Can't localize through a reference"

.IX Item "Can't localize lexical variable %s"

.IX Item "Can't localize pseudo-hash element"

.IX Item "Can't locate auto/%s.al in @\s-1INC\s0"

.IX Item "Can't locate %s in @\s-1INC\s0"

.IX Item "Can't locate object method \*(N"%s\*(T" via package \*(N"%s\*(T""

.IX Item "Can't locate package %s for @%s::\s-1ISA\s0"

.IX Item "Can't make list assignment to \e%\s-1ENV\s0 on this system"

.IX Item "Can't modify %s in %s"

.IX Item "Can't modify nonexistent substring"

.IX Item "Can't msgrcv to read-only var"

.IX Item "Can't open %s: %s"

.IX Item "Can't open bidirectional pipe"

.IX Item "Can't open error file %s as stderr"

.IX Item "Can't open input file %s as stdin"

.IX Item "Can't open output file %s as stdout"

.IX Item "Can't open output pipe (name: %s)"

.IX Item "Can't open perl script \*(N"%s"": %s"

.IX Item "Can't redefine active sort subroutine %s"

.IX Item "Can't rename %s to %s: %s, skipping file"

.IX Item "Can't reopen input pipe (name: %s) in binary mode"

.IX Item "Can't reswap uid and euid"

.IX Item "Can't return outside a subroutine"

.IX Item "Can't stat script \*(N"%s\*(T""

.IX Item "Can't swap uid and euid"

.IX Item "Can't take log of %g"

.IX Item "Can't take sqrt of %g"

.IX Item "Can't undef active subroutine"

.IX Item "Can't unshift"

.IX Item "Can't upgrade that kind of scalar"

.IX Item "Can't upgrade to undef"

.IX Item "Can't use %%! because Errno.pm is not available"

.IX Item "Can't use \*(N"my %s\*(T" in sort comparison"

.IX Item "Can't use %s for loop variable"

.IX Item "Can't use %s ref as %s ref"

.IX Item "Can't use \e1 to mean $1 in expression"

.IX Item "Can't use bareword '%s' as %s ref while \e""strict refs\e\*(T" in use"

.IX Item "Can't use string '%s' as %s ref while \*(N"strict refs\*(T" in use"

.IX Item "Can't use an undefined value as %s reference"

.IX Item "Can't use global %s in \*(N"my\*(T""

.IX Item "Can't use subscript on %s"

.IX Item "Can't x= to read-only value"

.IX Item "Cannot find an opnumber for \*(N"%s\*(T""

.IX Item "Cannot resolve method `%s\*(T' overloading `%s\*(T' in package `%s\*(T'"

.IX Item "Character class syntax [. .] is reserved for future extensions"

.IX Item "Character class syntax [: :] is reserved for future extensions"

.IX Item "Character class syntax [= =] is reserved for future extensions"

.IX Item "chmod: mode argument is missing initial 0"

.IX Item "Close on unopened file <%s>"

.IX Item "Compilation failed in require"

.IX Item "Complex regular subexpression recursion limit (%d) exceeded"

.IX Item "connect() on closed fd"

.IX Item "Constant is not %s reference"

.IX Item "Constant subroutine %s redefined"

.IX Item "Constant subroutine %s undefined"

.IX Item "Copy method did not return a reference"

.IX Item "Corrupt malloc ptr 0x%lx at 0x%lx"

.IX Item "corrupted regexp pointers"

.IX Item "corrupted regexp program"

.IX Item "Deep recursion on subroutine \*(N"%s\*(T""

.IX Item "Delimiter for here document is too long"

.IX Item "Did you mean &%s instead?"

.IX Item "Did you mean $ or @ instead of %?"

.IX Item "Died"

.IX Item "Do you need to predeclare %s?"

.IX Item "Don't know how to handle magic of type \*(N'%s\*(T'"

.IX Item "do_study: out of memory"

.IX Item "Duplicate free() ignored"

.IX Item "elseif should be elsif"

.IX Item "\s-1END\s0 failed\*(--cleanup aborted"

.IX Item "entering effective %s failed"

.IX Item "Error converting file specification %s"

.IX Item "%s: Eval-group in insecure regular expression"

.IX Item "%s: Eval-group not allowed, use re \*(N'eval\*(T'"

.IX Item "%s: Eval-group not allowed at run time"

.IX Item "Excessively long <> operator"

.IX Item "Execution of %s aborted due to compilation errors"

.IX Item "Exiting eval via %s"

.IX Item "Exiting pseudo-block via %s"

.IX Item "Exiting subroutine via %s"

.IX Item "Exiting substitution via %s"

.IX Item "Explicit blessing to \*(N'\*(T' (assuming package main)"

.IX Item "Fatal \s-1VMS\s0 error at %s, line %d"

.IX Item "fcntl is not implemented"

.IX Item "Filehandle %s never opened"

.IX Item "Filehandle %s opened for only input"

.IX Item "Filehandle opened for only input"

.IX Item "Final $ should be \e$ or $name"

.IX Item "Final @ should be \e@ or @name"

.IX Item "Format %s redefined"

.IX Item "Format not terminated"

.IX Item "Found = in conditional, should be =="

.IX Item "gdbm store returned %d, errno %d, key \*(N"%s\*(T""

.IX Item "gethostent not implemented"

.IX Item "get{sock,peer}name() on closed fd"

.IX Item "getpwnam returned invalid \s-1UIC\s0 %#o for user \*(N"%s\*(T""

.IX Item "Glob not terminated"

.IX Item "Global symbol \*(N"%s\*(T" requires explicit package name"

.IX Item "goto must have label"

.IX Item "Had to create %s unexpectedly"

.IX Item "Hash %%s missing the % in argument %d of %s()"

.IX Item "Identifier too long"

.IX Item "Ill-formed logical name |%s| in prime_env_iter"

.IX Item "Illegal character %s (carriage return)"

.IX Item "Illegal division by zero"

.IX Item "Illegal modulus zero"

.IX Item "Illegal octal digit"

.IX Item "Illegal octal digit ignored"

.IX Item "Illegal hex digit ignored"

.IX Item "Illegal switch in \s-1PERL5OPT\s0: %s"

.IX Item "In string, @%s now must be written as \e@%s"

.IX Item "Insecure dependency in %s"

.IX Item "Insecure directory in %s"

.IX Item "Insecure $\s-1ENV\s0{%s} while running %s"

.IX Item "Integer overflow in hex number"

.IX Item "Integer overflow in octal number"

.IX Item "Internal inconsistency in tracking vforks"

.IX Item "internal disaster in regexp"

.IX Item "glob failed (%s)"

.IX Item "internal urp in regexp at /%s/"

.IX Item "invalid [] range in regexp"

.IX Item "Invalid conversion in %s: \*(N"%s\*(T""

.IX Item "Invalid type in pack: \*(N'%s\*(T'"

.IX Item "Invalid type in unpack: \*(N'%s\*(T'"

.IX Item "ioctl is not implemented"

.IX Item "junk on end of regexp"

.IX Item "Label not found for \*(N"last %s\*(T""

.IX Item "Label not found for \*(N"next %s\*(T""

.IX Item "Label not found for \*(N"redo %s\*(T""

.IX Item "leaving effective %s failed"

.IX Item "listen() on closed fd"

.IX Item "Method for operation %s not found in package %s during blessing"

.IX Item "Might be a runaway multi-line %s string starting on line %d"

.IX Item "Misplaced _ in number"

.IX Item "Missing $ on loop variable"

.IX Item "Missing comma after first argument to %s function"

.IX Item "Missing operator before %s?"

.IX Item "Missing right bracket"

.IX Item "Modification of a read-only value attempted"

.IX Item "Modification of non-creatable array value attempted, subscript %d"

.IX Item "Modification of non-creatable hash value attempted, subscript \*(N"%s\*(T""

.IX Item "Module name must be constant"

.IX Item "msg%s not implemented"

.IX Item "Multidimensional syntax %s not supported"

.IX Item "Name \*(N"%s::%s\*(T" used only once: possible typo"

.IX Item "Negative length"

.IX Item "nested *?+ in regexp"

.IX Item "No #! line"

.IX Item "No %s allowed while running setuid"

.IX Item "No \fB\-e\fR allowed in setuid scripts"

.IX Item "No comma allowed after %s"

.IX Item "No command into which to pipe on command line"

.IX Item "No \s-1DB::DB\s0 routine defined"

.IX Item "No dbm on this machine"

.IX Item "No DBsub routine"

.IX Item "No error file after 2> or 2>> on command line"

.IX Item "No input file after < on command line"

.IX Item "No output file after > on command line"

.IX Item "No output file after > or >> on command line"

.IX Item "No Perl script found in input"

.IX Item "No setregid available"

.IX Item "No setreuid available"

.IX Item "No space allowed after \fB\-I\fR"

.IX Item "No such array field"

.IX Item "No such field \*(N"%s\*(T" in variable %s of type %s"

.IX Item "No such pipe open"

.IX Item "No such signal: \s-1SIG\s0%s"

.IX Item "no \s-1UTC\s0 offset information; assuming local time is \s-1UTC\s0"

.IX Item "Not a \s-1CODE\s0 reference"

.IX Item "Not a format reference"

.IX Item "Not a \s-1GLOB\s0 reference"

.IX Item "Not a \s-1HASH\s0 reference"

.IX Item "Not a perl script"

.IX Item "Not a \s-1SCALAR\s0 reference"

.IX Item "Not a subroutine reference"

.IX Item "Not a subroutine reference in overload table"

.IX Item "Not an \s-1ARRAY\s0 reference"

.IX Item "Not enough arguments for %s"

.IX Item "Not enough format arguments"

.IX Item "Null filename used"

.IX Item "Null picture in formline"

.IX Item "\s-1NULL\s0 \s-1OP\s0 \s-1IN\s0 \s-1RUN\s0"

.IX Item "Null realloc"

.IX Item "\s-1NULL\s0 regexp argument"

.IX Item "\s-1NULL\s0 regexp parameter"

.IX Item "Number too long"

.IX Item "Odd number of elements in hash assignment"

.IX Item "Offset outside string"

.IX Item "oops: oopsAV"

.IX Item "oops: oopsHV"

.IX Item "Operation `%s': no method found, %s"

.IX Item "Operator or semicolon missing before %s"

.IX Item "Out of memory for yacc stack"

.IX Item "Out of memory during request for %s"

.IX Item "Out of memory during \*(N"large\*(T" request for %s"

.IX Item "Out of memory during ridiculously large request"

.IX Item "page overflow"

.IX Item "panic: ck_grep"

.IX Item "panic: ck_split"

.IX Item "panic: corrupt saved stack index"

.IX Item "panic: die %s"

.IX Item "panic: do_match"

.IX Item "panic: do_split"

.IX Item "panic: do_subst"

.IX Item "panic: do_trans"

.IX Item "panic: frexp"

.IX Item "panic: goto"

.IX Item "panic: \s-1INTERPCASEMOD\s0"

.IX Item "panic: \s-1INTERPCONCAT\s0"

.IX Item "panic: last"

.IX Item "panic: leave_scope clearsv"

.IX Item "panic: leave_scope inconsistency"

.IX Item "panic: malloc"

.IX Item "panic: mapstart"

.IX Item "panic: null array"

.IX Item "panic: pad_alloc"

.IX Item "panic: pad_free curpad"

.IX Item "panic: pad_free po"

.IX Item "panic: pad_reset curpad"

.IX Item "panic: pad_sv po"

.IX Item "panic: pad_swipe curpad"

.IX Item "panic: pad_swipe po"

.IX Item "panic: pp_iter"

.IX Item "panic: realloc"

.IX Item "panic: restartop"

.IX Item "panic: return"

.IX Item "panic: scan_num"

.IX Item "panic: sv_insert"

.IX Item "panic: top_env"

.IX Item "panic: yylex"

.IX Item "Parentheses missing around \*(N"%s\*(T" list"

.IX Item "Perl %3.3f required\*(--this is only version %s, stopped"

.IX Item "Permission denied"

.IX Item "pid %x not a child"

.IX Item "\s-1POSIX\s0 getpgrp can't take an argument"

.IX Item "Possible attempt to put comments in qw() list"

.IX Item "Possible attempt to separate words with commas"

.IX Item "Possible memory corruption: %s overflowed 3rd argument"

.IX Item "Precedence problem: open %s should be open(%s)"

.IX Item "print on closed filehandle %s"

.IX Item "printf on closed filehandle %s"

.IX Item "Probable precedence problem on %s"

.IX Item "Prototype mismatch: %s vs %s"

.IX Item "Range iterator outside integer range"

.IX Item "Read on closed filehandle <%s>"

.IX Item "Reallocation too large: %lx"

.IX Item "Recompile perl with \fB\-D\fR\s-1DEBUGGING\s0 to use \fB\-D\fR switch"

.IX Item "Recursive inheritance detected in package \*(N'%s\*(T'"

.IX Item "Recursive inheritance detected while looking for method \*(N'%s\*(T' in package \*(N'%s\*(T'"

.IX Item "Reference found where even-sized list expected"

.IX Item "Reference miscount in sv_replace()"

.IX Item "regexp *+ operand could be empty"

.IX Item "regexp memory corruption"

.IX Item "regexp out of space"

.IX Item "regexp too big"

.IX Item "Reversed %s= operator"

.IX Item "Runaway format"

.IX Item "Scalar value @%s[%s] better written as $%s[%s]"

.IX Item "Scalar value @%s{%s} better written as $%s{%s}"

.IX Item "Script is not setuid/setgid in suidperl"

.IX Item "Search pattern not terminated"

.IX Item "%sseek() on unopened file"

.IX Item "select not implemented"

.IX Item "sem%s not implemented"

.IX Item "semi-panic: attempt to dup freed string"

.IX Item "Semicolon seems to be missing"

.IX Item "Send on closed socket"

.IX Item "Sequence (? incomplete"

.IX Item "Sequence (?#... not terminated"

.IX Item "Sequence (?%s...) not implemented"

.IX Item "Sequence (?%s...) not recognized"

.IX Item "Server error"

.IX Item "setegid() not implemented"

.IX Item "seteuid() not implemented"

.IX Item "setrgid() not implemented"

.IX Item "setruid() not implemented"

.IX Item "Setuid/gid script is writable by world"

.IX Item "shm%s not implemented"

.IX Item "shutdown() on closed fd"

.IX Item "\s-1SIG\s0%s handler \*(N"%s\*(T" not defined"

.IX Item "sort is now a reserved word"

.IX Item "Sort subroutine didn't return a numeric value"

.IX Item "Sort subroutine didn't return single value"

.IX Item "Split loop"

.IX Item "Stat on unopened file <%s>"

.IX Item "Statement unlikely to be reached"

.IX Item "Strange *+?{} on zero-length expression"

.IX Item "Stub found while resolving method `%s\*(T' overloading `%s\*(T' in package `%s\*(T'"

.IX Item "Subroutine %s redefined"

.IX Item "Substitution loop"

.IX Item "Substitution pattern not terminated"

.IX Item "Substitution replacement not terminated"

.IX Item "substr outside of string"

.IX Item "suidperl is no longer needed since %s"

.IX Item "switching effective %s is not implemented"

.IX Item "syntax error"

.IX Item "syntax error at line %d: `%s\*(T' unexpected"

.IX Item "System V %s is not implemented on this machine"

.IX Item "Syswrite on closed filehandle"

.IX Item "Target of goto is too deeply nested"

.IX Item "tell() on unopened file"

.IX Item "Test on unopened file <%s>"

.IX Item "That use of $[ is unsupported"

.IX Item "The %s function is unimplemented"

.IX Item "The crypt() function is unimplemented due to excessive paranoia"

.IX Item "The stat preceding \f(CW-l _\fR wasn't an lstat"

.IX Item "times not implemented"

.IX Item "Too few args to syscall"

.IX Item "Too late for \*(N"\fB\-T\fR\*(T" option"

.IX Item "Too late for \*(N"\-%s\*(T" option"

.IX Item "Too many ('s"

.IX Item "Too many )'s"

.IX Item "Too many args to syscall"

.IX Item "Too many arguments for %s"

.IX Item "trailing \e in regexp"

.IX Item "Transliteration pattern not terminated"

.IX Item "Transliteration replacement not terminated"

.IX Item "truncate not implemented"

.IX Item "Type of arg %d to %s must be %s (not %s)"

.IX Item "umask: argument is missing initial 0"

.IX Item "umask not implemented"

.IX Item "Unable to create sub named \*(N"%s\*(T""

.IX Item "Unbalanced context: %d more PUSHes than POPs"

.IX Item "Unbalanced saves: %d more saves than restores"

.IX Item "Unbalanced scopes: %d more ENTERs than LEAVEs"

.IX Item "Unbalanced tmps: %d more allocs than frees"

.IX Item "Undefined format \*(N"%s\*(T" called"

.IX Item "Undefined sort subroutine \*(N"%s\*(T" called"

.IX Item "Undefined subroutine &%s called"

.IX Item "Undefined subroutine called"

.IX Item "Undefined subroutine in sort"

.IX Item "Undefined top format \*(N"%s\*(T" called"

.IX Item "Undefined value assigned to typeglob"

.IX Item "unexec of %s into %s failed!"

.IX Item "Unknown \s-1BYTEORDER\s0"

.IX Item "unmatched () in regexp"

.IX Item "Unmatched right bracket"

.IX Item "unmatched [] in regexp"

.IX Item "Unquoted string \*(N"%s\*(T" may clash with future reserved word"

.IX Item "Unrecognized character %s"

.IX Item "Unrecognized signal name \*(N"%s\*(T""

.IX Item "Unrecognized switch: \-%s  (\-h will show valid options)"

.IX Item "Unsuccessful %s on filename containing newline"

.IX Item "Unsupported directory function \*(N"%s\*(T" called"

.IX Item "Unsupported function fork"

.IX Item "Unsupported function %s"

.IX Item "Unsupported socket function \*(N"%s\*(T" called"

.IX Item "Unterminated <> operator"

.IX Item "Use of $# is deprecated"

.IX Item "Use of $* is deprecated"

.IX Item "Use of %s in printf format not supported"

.IX Item "Use of bare << to mean <<"""" is deprecated"

.IX Item "Use of implicit split to @_ is deprecated"

.IX Item "Use of inherited \s-1AUTOLOAD\s0 for non-method %s() is deprecated"

.IX Item "Use of reserved word \*(N"%s\*(T" is deprecated"

.IX Item "Use of %s is deprecated"

.IX Item "Use of uninitialized value"

.IX Item "Useless use of \*(N"re\*(T" pragma"

.IX Item "Useless use of %s in void context"

.IX Item "untie attempted while %d inner references still exist"

.IX Item "Value of %s can be \*(N"0\*(T"; test with defined()"

.IX Item "Variable \*(N"%s\*(T" is not imported%s"

.IX Item "Variable \*(N"%s\*(T" may be unavailable"

.IX Item "Variable \*(N"%s\*(T" will not stay shared"

.IX Item "Variable syntax"

.IX Item "perl: warning: Setting locale failed."

.IX Item "Warning: something's wrong"

.IX Item "Warning: unable to close filehandle %s properly"

.IX Item "Warning: Use of \*(N"%s\*(T" without parentheses is ambiguous"

.IX Item "Write on closed filehandle"

.IX Item "X outside of string"

.IX Item "x outside of string"

.IX Item "Xsub \*(N"%s\*(T" called in sort"

.IX Item "Xsub called in sort"

.IX Item "You can't use \f(CW-l\fR on a filehandle"

.IX Item "\s-1YOU\s0 \s-1HAVEN\s0'T \s-1DISABLED\s0 \s-1SET\s0\-\s-1ID\s0 \s-1SCRIPTS\s0 \s-1IN\s0 \s-1THE\s0 \s-1KERNEL\s0 \s-1YET\s0!"

.IX Item "You need to quote \*(N"%s\*(T""

.IX Item "[gs]etsockopt() on closed fd"

.IX Item "\e1 better written as $1"

.IX Item "\*(N'|\*(T' and \*(N'<\*(T' may not both be specified on command line"

.IX Item "\*(N'|\*(T' and \*(N'>\*(T' may not both be specified on command line"

.IX Item "Got an error from DosAllocMem"

.IX Item "Malformed \s-1PERLLIB_PREFIX\s0"

.IX Item "\s-1PERL_SH_DIR\s0 too long"

.IX Item "Process terminated by \s-1SIG\s0%s"

