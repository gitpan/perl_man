.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
'''   \*(M", \*(S", \*(N" and \*(T" are the equivalent of
'''   \*(L" and \*(R", except that they are used on ".xx" lines,
'''   such as .IP and .SH, which do another additional levels of
'''   double-quote interpretation
.ds M" """
.ds S" """
.ds N" """""
.ds T" """""
.ds L' '
.ds R' '
.ds M' '
.ds S' '
.ds N' '
.ds T' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds M" ``
.ds S" ''
.ds N" ``
.ds T" ''
.ds L' `
.ds R' '
.ds M' `
.ds S' '
.ds N' `
.ds T' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH PERLFAQ7 1 "perl 5.004, patch 55" "25/Nov/97" "Perl Programmers Reference Guide"
.UC
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
perlfaq7 \- Perl Language Issues ($Revision: 1.18 $, \f(CW$Date:\fR 1997/04/24 22:44:14 $)
.SH "DESCRIPTION"
This section deals with general Perl language issues that don't
clearly fit into any of the other sections.
.Sh "Can I get a \s-1BNF/\s0yacc/\s-1RE\s0 for the Perl language?"
No, in the words of Chaim Frenkel: \*(L"Perl's grammar can not be reduced
to \s-1BNF\s0.  The work of parsing perl is distributed between yacc, the
lexer, smoke and mirrors.\*(R"
.Sh "What are all these $@%* punctuation signs, and how do I know when to use them?"
They are type specifiers, as detailed in the \fIperldata\fR manpage:
.PP
.Vb 5
\&    $ for scalar values (number, string or reference)
\&    @ for arrays
\&    % for hashes (associative arrays)
\&    * for all types of that symbol name.  In version 4 you used them like
\&      pointers, but in modern perls you can just use references.
.Ve
While there are a few places where you don't actually need these type
specifiers, you should always use them.
.PP
A couple of others that you're likely to encounter that aren't
really type specifiers are:
.PP
.Vb 2
\&    <> are used for inputting a record from a filehandle.
\&    \e  takes a reference to something.
.Ve
Note that <\s-1FILE\s0> is \fIneither\fR the type specifier for files
nor the name of the handle.  It is the \f(CW<>\fR operator applied
to the handle \s-1FILE\s0.  It reads one line (well, record \- see
the section on \fI$/\fR in the \fIperlvar\fR manpage) from the handle \s-1FILE\s0 in scalar context, or \fIall\fR lines
in list context.  When performing open, close, or any other operation
besides \f(CW<>\fR on files, or even talking about the handle, do
\fInot\fR use the brackets.  These are correct: \f(CWeof(FH)\fR, \f(CWseek(FH, 0,
2)\fR and \*(L"copying from \s-1STDIN\s0 to \s-1FILE\s0\*(R".
.Sh "Do I always/never have to quote my strings or use semicolons and commas?"
Normally, a bareword doesn't need to be quoted, but in most cases
probably should be (and must be under \f(CWuse strict\fR).  But a hash key
consisting of a simple word (that isn't the name of a defined
subroutine) and the left-hand operand to the \f(CW=>\fR operator both
count as though they were quoted:
.PP
.Vb 4
\&    This                    is like this
\&    ------------            ---------------
\&    $foo{line}              $foo{"line"}
\&    bar => stuff            "bar" => stuff
.Ve
The final semicolon in a block is optional, as is the final comma in a
list.  Good style (see the \fIperlstyle\fR manpage) says to put them in except for
one-liners:
.PP
.Vb 2
\&    if ($whoops) { exit 1 }
\&    @nums = (1, 2, 3);
.Ve
.Vb 7
\&    if ($whoops) {
\&        exit 1;
\&    }
\&    @lines = (
\&        "There Beren came from mountains cold",
\&        "And lost he wandered under leaves",
\&    );
.Ve
.Sh "How do I skip some return values?"
One way is to treat the return values as a list and index into it:
.PP
.Vb 1
\&        $dir = (getpwnam($user))[7];
.Ve
Another way is to use undef as an element on the left-hand-side:
.PP
.Vb 1
\&    ($dev, $ino, undef, undef, $uid, $gid) = stat($file);
.Ve
.Sh "How do I temporarily block warnings?"
The \f(CW$^W\fR variable (documented in the \fIperlvar\fR manpage) controls
runtime warnings for a block:
.PP
.Vb 4
\&    {
\&        local $^W = 0;        # temporarily turn off warnings
\&        $a = $b + $c;         # I know these might be undef
\&    }
.Ve
Note that like all the punctuation variables, you cannot currently
use \fImy()\fR on \f(CW$^W\fR, only \fIlocal()\fR.
.PP
A new \f(CWuse warnings\fR pragma is in the works to provide finer control
over all this.  The curious should check the perl5-porters mailing list
archives for details.
.Sh "What's an extension?"
A way of calling compiled C code from Perl.  Reading the \fIperlxstut\fR manpage
is a good place to learn more about extensions.
.Sh "Why do Perl operators have different precedence than C operators?"
Actually, they don't.  All C operators that Perl copies have the same
precedence in Perl as they do in C.  The problem is with operators that C
doesn't have, especially functions that give a list context to everything
on their right, eg print, chmod, exec, and so on.  Such functions are
called \*(L"list operators\*(R" and appear as such in the precedence table in
the \fIperlop\fR manpage.
.PP
A common mistake is to write:
.PP
.Vb 1
\&    unlink $file || die "snafu";
.Ve
This gets interpreted as:
.PP
.Vb 1
\&    unlink ($file || die "snafu");
.Ve
To avoid this problem, either put in extra parentheses or use the
super low precedence \f(CWor\fR operator:
.PP
.Vb 2
\&    (unlink $file) || die "snafu";
\&    unlink $file or die "snafu";
.Ve
The \*(L"English\*(R" operators (\f(CWand\fR, \f(CWor\fR, \f(CWxor\fR, and \f(CWnot\fR)
deliberately have precedence lower than that of list operators for
just such situations as the one above.
.PP
Another operator with surprising precedence is exponentiation.  It
binds more tightly even than unary minus, making \f(CW-2**2\fR product a
negative not a positive four.  It is also right-associating, meaning
that \f(CW2**3**2\fR is two raised to the ninth power, not eight squared.
.Sh "How do I declare/create a structure?"
In general, you don't \*(L"declare\*(R" a structure.  Just use a (probably
anonymous) hash reference.  See the \fIperlref\fR manpage and the \fIperldsc\fR manpage for details.
Here's an example:
.PP
.Vb 3
\&    $person = {};                   # new anonymous hash
\&    $person->{AGE}  = 24;           # set field AGE to 24
\&    $person->{NAME} = "Nat";        # set field NAME to "Nat"
.Ve
If you're looking for something a bit more rigorous, try the \fIperltoot\fR manpage.
.Sh "How do I create a module?"
A module is a package that lives in a file of the same name.  For
example, the Hello::There module would live in Hello/There.pm.  For
details, read the \fIperlmod\fR manpage.  You'll also find the \fIExporter\fR manpage helpful.  If
you're writing a C or mixed-language module with both C and Perl, then
you should study the \fIperlxstut\fR manpage.
.PP
Here's a convenient template you might wish you use when starting your
own module.  Make sure to change the names appropriately.
.PP
.Vb 1
\&    package Some::Module;  # assumes Some/Module.pm
.Ve
.Vb 1
\&    use strict;
.Ve
.Vb 3
\&    BEGIN {
\&        use Exporter   ();
\&        use vars       qw($VERSION @ISA @EXPORT @EXPORT_OK %EXPORT_TAGS);
.Ve
.Vb 2
\&        ## set the version for version checking; uncomment to use
\&        ## $VERSION     = 1.00;
.Ve
.Vb 3
\&        # if using RCS/CVS, this next line may be preferred,
\&        # but beware two-digit versions.
\&        $VERSION = do{my@r=q$Revision: 1.18 $=~/\ed+/g;sprintf '%d.'.'%02d'x$#r,@r};
.Ve
.Vb 3
\&        @ISA         = qw(Exporter);
\&        @EXPORT      = qw(&func1 &func2 &func3);
\&        %EXPORT_TAGS = ( );     # eg: TAG => [ qw!name1 name2! ],
.Ve
.Vb 5
\&        # your exported package globals go here,
\&        # as well as any optionally exported functions
\&        @EXPORT_OK   = qw($Var1 %Hashit);
\&    }
\&    use vars      @EXPORT_OK;
.Ve
.Vb 2
\&    # non-exported package globals go here
\&    use vars      qw( @more $stuff );
.Ve
.Vb 3
\&    # initialize package globals, first exported ones
\&    $Var1   = '';
\&    %Hashit = ();
.Ve
.Vb 3
\&    # then the others (which are still accessible as $Some::Module::stuff)
\&    $stuff  = '';
\&    @more   = ();
.Ve
.Vb 2
\&    # all file-scoped lexicals must be created before
\&    # the functions below that use them.
.Ve
.Vb 3
\&    # file-private lexicals go here
\&    my $priv_var    = '';
\&    my %secret_hash = ();
.Ve
.Vb 5
\&    # here's a file-private function as a closure,
\&    # callable as &$priv_func;  it cannot be prototyped.
\&    my $priv_func = sub {
\&        # stuff goes here.
\&    };
.Ve
.Vb 5
\&    # make all your functions, whether exported or not;
\&    # remember to put something interesting in the {} stubs
\&    sub func1      {}    # no prototype
\&    sub func2()    {}    # proto'd void
\&    sub func3($$)  {}    # proto'd to 2 scalars
.Ve
.Vb 2
\&    # this one isn't exported, but could be called!
\&    sub func4(\e%)  {}    # proto'd to 1 hash ref
.Ve
.Vb 1
\&    END { }       # module clean-up code here (global destructor)
.Ve
.Vb 1
\&    1;            # modules must return true
.Ve
.Sh "How do I create a class?"
See the \fIperltoot\fR manpage for an introduction to classes and objects, as well as
the \fIperlobj\fR manpage and the \fIperlbot\fR manpage.
.Sh "How can I tell if a variable is tainted?"
See the section on \fILaundering and Detecting Tainted Data\fR in the \fIperlsec\fR manpage.  Here's an
example (which doesn't use any system calls, because the \fIkill()\fR
is given no processes to signal):
.PP
.Vb 3
\&    sub is_tainted {
\&        return ! eval { join('',@_), kill 0; 1; };
\&    }
.Ve
This is not \f(CW-w\fR clean, however.  There is no \f(CW-w\fR clean way to
detect taintedness \- take this as a hint that you should untaint
all possibly-tainted data.
.Sh "What's a closure?"
Closures are documented in the \fIperlref\fR manpage.
.PP
\fIClosure\fR is a computer science term with a precise but
hard-to-explain meaning. Closures are implemented in Perl as anonymous
subroutines with lasting references to lexical variables outside their
own scopes.  These lexicals magically refer to the variables that were
around when the subroutine was defined (deep binding).
.PP
Closures make sense in any programming language where you can have the
return value of a function be itself a function, as you can in Perl.
Note that some languages provide anonymous functions but are not
capable of providing proper closures; the Python language, for
example.  For more information on closures, check out any textbook on
functional programming.  Scheme is a language that not only supports
but encourages closures.
.PP
Here's a classic function-generating function:
.PP
.Vb 3
\&    sub add_function_generator {
\&      return sub { shift + shift };
\&    }
.Ve
.Vb 2
\&    $add_sub = add_function_generator();
\&    $sum = &$add_sub(4,5);                # $sum is 9 now.
.Ve
The closure works as a \fIfunction template\fR with some customization
slots left out to be filled later.  The anonymous subroutine returned
by \fIadd_function_generator()\fR isn't technically a closure because it
refers to no lexicals outside its own scope.
.PP
Contrast this with the following \fImake_adder()\fR function, in which the
returned anonymous function contains a reference to a lexical variable
outside the scope of that function itself.  Such a reference requires
that Perl return a proper closure, thus locking in for all time the
value that the lexical had when the function was created.
.PP
.Vb 4
\&    sub make_adder {
\&        my $addpiece = shift;
\&        return sub { shift + $addpiece };
\&    }
.Ve
.Vb 2
\&    $f1 = make_adder(20);
\&    $f2 = make_adder(555);
.Ve
Now \f(CW&$f1($n)\fR is always 20 plus whatever \f(CW$n\fR you pass in, whereas
\f(CW&$f2($n)\fR is always 555 plus whatever \f(CW$n\fR you pass in.  The \f(CW$addpiece\fR
in the closure sticks around.
.PP
Closures are often used for less esoteric purposes.  For example, when
you want to pass in a bit of code into a function:
.PP
.Vb 2
\&    my $line;
\&    timeout( 30, sub { $line = <STDIN> } );
.Ve
If the code to execute had been passed in as a string, \f(CW'$line =
<STDIN>'\fR, there would have been no way for the hypothetical
\fItimeout()\fR function to access the lexical variable \f(CW$line\fR back in its
caller's scope.
.Sh "What is variable suicide and how can I prevent it?"
Variable suicide is when you (temporarily or permanently) lose the
value of a variable.  It is caused by scoping through \fImy()\fR and \fIlocal()\fR
interacting with either closures or aliased \fIforeach()\fR interator
variables and subroutine arguments.  It used to be easy to
inadvertently lose a variable's value this way, but now it's much
harder.  Take this code:
.PP
.Vb 6
\&    my $f = "foo";
\&    sub T {
\&      while ($i++ < 3) { my $f = $f; $f .= "bar"; print $f, "\en" }
\&    }
\&    T;
\&    print "Finally $f\en";
.Ve
The \f(CW$f\fR that has \*(L"bar\*(R" added to it three times should be a new \f(CW$f\fR
(\f(CWmy $f\fR should create a new local variable each time through the
loop).  It isn't, however.  This is a bug, and will be fixed.
.Sh "How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regexp}?"
With the exception of regexps, you need to pass references to these
objects.  See the section on \fIPass by Reference\fR in the \fIperlsub\fR manpage for this particular
question, and the \fIperlref\fR manpage for information on references.
.Ip "Passing Variables and Functions" 4
Regular variables and functions are quite easy: just pass in a
reference to an existing or anonymous variable or function:
.Sp
.Vb 1
\&    func( \e$some_scalar );
.Ve
.Vb 2
\&    func( \e$some_array );
\&    func( [ 1 .. 10 ]   );
.Ve
.Vb 2
\&    func( \e%some_hash   );
\&    func( { this => 10, that => 20 }   );
.Ve
.Vb 2
\&    func( \e&some_func   );
\&    func( sub { $_[0] ** $_[1] }   );
.Ve
.Ip "Passing Filehandles" 4
To create filehandles you can pass to subroutines, you can use \f(CW*FH\fR
or \f(CW\e*FH\fR notation ("typeglobs\*(R" \- see the \fIperldata\fR manpage for more information),
or create filehandles dynamically using the old FileHandle or the new
\s-1IO::\s0File modules, both part of the standard Perl distribution.
.Sp
.Vb 5
\&    use Fcntl;
\&    use IO::File;
\&    my $fh = new IO::File $filename, O_WRONLY|O_APPEND;
\&                or die "Can't append to $filename: $!";
\&    func($fh);
.Ve
.Ip "Passing Regexps" 4
To pass regexps around, you'll need to either use one of the highly
experimental regular expression modules from \s-1CPAN\s0 (Nick Ing-Simmons's
Regexp or Ilya Zakharevich's Devel::Regexp), pass around strings
and use an exception-trapping eval, or else be be very, very clever.
Here's an example of how to pass in a string to be regexp compared:
.Sp
.Vb 6
\&    sub compare($$) {
\&        my ($val1, $regexp) = @_;
\&        my $retval = eval { $val =~ /$regexp/ };
\&        die if $@;
\&        return $retval;
\&    }
.Ve
.Vb 1
\&    $match = compare("old McDonald", q/d.*D/);
.Ve
Make sure you never say something like this:
.Sp
.Vb 1
\&    return eval "\e$val =~ /$regexp/";   # WRONG
.Ve
or someone can sneak shell escapes into the regexp due to the double
interpolation of the eval and the double-quoted string.  For example:
.Sp
.Vb 1
\&    $pattern_of_evil = 'danger ${ system("rm -rf * &") } danger';
.Ve
.Vb 1
\&    eval "\e$string =~ /$pattern_of_evil/";
.Ve
Those preferring to be very, very clever might see the O'Reilly book,
\fIMastering Regular Expressions\fR, by Jeffrey Friedl.  Page 273's
\fIBuild_MatchMany_Function()\fR is particularly interesting.  A complete
citation of this book is given in the \fIperlfaq2\fR manpage.
.Ip "Passing Methods" 4
To pass an object method into a subroutine, you can do this:
.Sp
.Vb 7
\&    call_a_lot(10, $some_obj, "methname")
\&    sub call_a_lot {
\&        my ($count, $widget, $trick) = @_;
\&        for (my $i = 0; $i < $count; $i++) {
\&            $widget->$trick();
\&        }
\&    }
.Ve
or you can use a closure to bundle up the object and its method call
and arguments:
.Sp
.Vb 6
\&    my $whatnot =  sub { $some_obj->obfuscate(@args) };
\&    func($whatnot);
\&    sub func {
\&        my $code = shift;
\&        &$code();
\&    }
.Ve
You could also investigate the \fIcan()\fR method in the \s-1UNIVERSAL\s0 class
(part of the standard perl distribution).
.Sh "How do I create a static variable?"
As with most things in Perl, \s-1TMTOWTDI\s0.  What is a \*(L"static variable\*(R" in
other languages could be either a function-private variable (visible
only within a single function, retaining its value between calls to
that function), or a file-private variable (visible only to functions
within the file it was declared in) in Perl.
.PP
Here's code to implement a function-private variable:
.PP
.Vb 5
\&    BEGIN {
\&        my $counter = 42;
\&        sub prev_counter { return --$counter }
\&        sub next_counter { return $counter++ }
\&    }
.Ve
Now \fIprev_counter()\fR and \fInext_counter()\fR share a private variable \f(CW$counter\fR
that was initialized at compile time.
.PP
To declare a file-private variable, you'll still use a \fImy()\fR, putting
it at the outer scope level at the top of the file.  Assume this is in
file Pax.pm:
.PP
.Vb 2
\&    package Pax;
\&    my $started = scalar(localtime(time()));
.Ve
.Vb 1
\&    sub begun { return $started }
.Ve
When \f(CWuse Pax\fR or \f(CWrequire Pax\fR loads this module, the variable will
be initialized.  It won't get garbage-collected the way most variables
going out of scope do, because the \fIbegun()\fR function cares about it,
but no one else can get it.  It is not called \f(CW$Pax::started\fR because
its scope is unrelated to the package.  It's scoped to the file.  You
could conceivably have several packages in that same file all
accessing the same private variable, but another file with the same
package couldn't get to it.
.Sh "What's the difference between dynamic and lexical (static) scoping?  Between \fIlocal()\fR and \fImy()\fR?"
\f(CWlocal($x)\fR saves away the old value of the global variable \f(CW$x\fR,
and assigns a new value for the duration of the subroutine, \fIwhich is
visible in other functions called from that subroutine\fR.  This is done
at run-time, so is called dynamic scoping.  \fIlocal()\fR always affects global
variables, also called package variables or dynamic variables.
.PP
\f(CWmy($x)\fR creates a new variable that is only visible in the current
subroutine.  This is done at compile-time, so is called lexical or
static scoping.  \fImy()\fR always affects private variables, also called
lexical variables or (improperly) \fIstatic\fR\|(ly scoped) variables.
.PP
For instance:
.PP
.Vb 3
\&    sub visible {
\&        print "var has value $var\en";
\&    }
.Ve
.Vb 4
\&    sub dynamic {
\&        local $var = 'local';   # new temporary value for the still-global
\&        visible();              #   variable called $var
\&    }
.Ve
.Vb 4
\&    sub lexical {
\&        my $var = 'private';    # new private variable, $var
\&        visible();              # (invisible outside of sub scope)
\&    }
.Ve
.Vb 1
\&    $var = 'global';
.Ve
.Vb 3
\&    visible();                  # prints global
\&    dynamic();                  # prints local
\&    lexical();                  # prints global
.Ve
Notice how at no point does the value \*(L"private\*(R" get printed.  That's
because \f(CW$var\fR only has that value within the block of the \fIlexical()\fR
function, and it is hidden from called subroutine.
.PP
In summary, \fIlocal()\fR doesn't make what you think of as private, local
variables.  It gives a global variable a temporary value.  \fImy()\fR is
what you're looking for if you want private variables.
.PP
See also the \fIperlsub\fR manpage, which explains this all in more detail.
.Sh "How can I access a dynamic variable while a similarly named lexical is in scope?"
You can do this via symbolic references, provided you haven't set
\f(CWuse strict "refs"\fR.  So instead of \f(CW$var\fR, use \f(CW${'var'}\fR.
.PP
.Vb 2
\&    local $var = "global";
\&    my    $var = "lexical";
.Ve
.Vb 1
\&    print "lexical is $var\en";
.Ve
.Vb 2
\&    no strict 'refs';
\&    print "global  is ${'var'}\en";
.Ve
If you know your package, you can just mention it explicitly, as in
\f(CW$Some_Pack::var\fR.  Note that the notation \f(CW$::var\fR is \fInot\fR the dynamic
\f(CW$var\fR in the current package, but rather the one in the \f(CWmain\fR
package, as though you had written \f(CW$main::var\fR.  Specifying the package
directly makes you hard-code its name, but it executes faster and
avoids running afoul of \f(CWuse strict "refs"\fR.
.Sh "What's the difference between deep and shallow binding?"
In deep binding, lexical variables mentioned in anonymous subroutines
are the same ones that were in scope when the subroutine was created.
In shallow binding, they are whichever variables with the same names
happen to be in scope when the subroutine is called.  Perl always uses
deep binding of lexical variables (i.e., those created with \fImy()\fR).
However, dynamic variables (aka global, local, or package variables)
are effectively shallowly bound.  Consider this just one more reason
not to use them.  See the answer to the section on \fIWhat's a closure?\fR.
.Sh "Why doesn't \*(M"\fIlocal\fR\|($foo) = <\s-1FILE\s0>;\*(S" work right?"
\f(CWlocal()\fR gives list context to the right hand side of \f(CW=\fR.  The
<\s-1FH\s0> read operation, like so many of Perl's functions and
operators, can tell which context it was called in and behaves
appropriately.  In general, the \fIscalar()\fR function can help.  This
function does nothing to the data itself (contrary to popular myth)
but rather tells its argument to behave in whatever its scalar fashion
is.  If that function doesn't have a defined scalar behavior, this of
course doesn't help you (such as with \fIsort()\fR).
.PP
To enforce scalar context in this particular case, however, you need
merely omit the parentheses:
.PP
.Vb 3
\&    local($foo) = <FILE>;           # WRONG
\&    local($foo) = scalar(<FILE>);   # ok
\&    local $foo  = <FILE>;           # right
.Ve
You should probably be using lexical variables anyway, although the
issue is the same here:
.PP
.Vb 2
\&    my($foo) = <FILE>;  # WRONG
\&    my $foo  = <FILE>;  # right
.Ve
.Sh "How do I redefine a builtin function, operator, or method?"
Why do you want to do that? :\-)
.PP
If you want to override a predefined function, such as \fIopen()\fR,
then you'll have to import the new definition from a different
module.  See the section on \fIOverriding Builtin Functions\fR in the \fIperlsub\fR manpage.  There's
also an example in the section on \fIClass::Template\fR in the \fIperltoot\fR manpage.
.PP
If you want to overload a Perl operator, such as \f(CW+\fR or \f(CW**\fR,
then you'll want to use the \f(CWuse overload\fR pragma, documented
in the \fIoverload\fR manpage.
.PP
If you're talking about obscuring method calls in parent classes,
see the section on \fIOverridden Methods\fR in the \fIperltoot\fR manpage.
.Sh "What's the difference between calling a function as &foo and \fIfoo()\fR?"
When you call a function as \f(CW&foo\fR, you allow that function access to
your current \f(CW@_\fR values, and you by-pass prototypes.  That means that
the function doesn't get an empty \f(CW@_\fR, it gets yours!  While not
strictly speaking a bug (it's documented that way in the \fIperlsub\fR manpage), it
would be hard to consider this a feature in most cases.
.PP
When you call your function as \f(CW&foo()\fR, then you do get a new \f(CW@_\fR,
but prototyping is still circumvented.
.PP
Normally, you want to call a function using \f(CWfoo()\fR.  You may only
omit the parentheses if the function is already known to the compiler
because it already saw the definition (\f(CWuse\fR but not \f(CWrequire\fR),
or via a forward reference or \f(CWuse subs\fR declaration.  Even in this
case, you get a clean \f(CW@_\fR without any of the old values leaking through
where they don't belong.
.Sh "How do I create a switch or case statement?"
This is explained in more depth in the the \fIperlsyn\fR manpage.  Briefly, there's
no official case statement, because of the variety of tests possible
in Perl (numeric comparison, string comparison, glob comparison,
regexp matching, overloaded comparisons, ...).  Larry couldn't decide
how best to do this, so he left it out, even though it's been on the
wish list since perl1.
.PP
Here's a simple example of a switch based on pattern matching.  We'll
do a multi-way conditional based on the type of reference stored in
\f(CW$whatchamacallit:\fR
.PP
.Vb 2
\&    SWITCH:
\&      for (ref $whatchamacallit) {
.Ve
.Vb 1
\&        /^$/            && die "not a reference";
.Ve
.Vb 4
\&        /SCALAR/        && do {
\&                                print_scalar($$ref);
\&                                last SWITCH;
\&                        };
.Ve
.Vb 4
\&        /ARRAY/         && do {
\&                                print_array(@$ref);
\&                                last SWITCH;
\&                        };
.Ve
.Vb 4
\&        /HASH/          && do {
\&                                print_hash(%$ref);
\&                                last SWITCH;
\&                        };
.Ve
.Vb 4
\&        /CODE/          && do {
\&                                warn "can't print function ref";
\&                                last SWITCH;
\&                        };
.Ve
.Vb 1
\&        # DEFAULT
.Ve
.Vb 1
\&        warn "User defined type skipped";
.Ve
.Vb 1
\&    }
.Ve
.Sh "How can I catch accesses to undefined variables/functions/methods?"
The \s-1AUTOLOAD\s0 method, discussed in the section on \fIAutoloading\fR in the \fIperlsub\fR manpage and
the section on \fI\s-1AUTOLOAD\s0: Proxy Methods\fR in the \fIperltoot\fR manpage, lets you capture calls to
undefined functions and methods.
.PP
When it comes to undefined variables that would trigger a warning
under \f(CW-w\fR, you can use a handler to trap the pseudo-signal
\f(CW__WARN__\fR like this:
.PP
.Vb 1
\&    $SIG{__WARN__} = sub {
.Ve
.Vb 1
\&        for ( $_[0] ) {
.Ve
.Vb 4
\&            /Use of uninitialized value/  && do {
\&                # promote warning to a fatal
\&                die $_;
\&            };
.Ve
.Vb 1
\&            # other warning cases to catch could go here;
.Ve
.Vb 2
\&            warn $_;
\&        }
.Ve
.Vb 1
\&    };
.Ve
.Sh "Why can't a method included in this same file be found?"
Some possible reasons: your inheritance is getting confused, you've
misspelled the method name, or the object is of the wrong type.  Check
out the \fIperltoot\fR manpage for details on these.  You may also use \f(CWprint
ref($object)\fR to find out the class \f(CW$object\fR was blessed into.
.PP
Another possible reason for problems is because you've used the
indirect object syntax (eg, \f(CWfind Guru "Samy"\fR) on a class name
before Perl has seen that such a package exists.  It's wisest to make
sure your packages are all defined before you start using them, which
will be taken care of if you use the \f(CWuse\fR statement instead of
\f(CWrequire\fR.  If not, make sure to use arrow notation (eg,
\f(CWGuru-\fR\fIfind\fR\|("Samy")>) instead.  Object notation is explained in
the \fIperlobj\fR manpage.
.Sh "How can I find out my current package?"
If you're just a random program, you can do this to find
out what the currently compiled package is:
.PP
.Vb 1
\&    my $packname = ref bless [];
.Ve
But if you're a method and you want to print an error message
that includes the kind of object you were called on (which is
not necessarily the same as the one in which you were compiled):
.PP
.Vb 5
\&    sub amethod {
\&        my $self = shift;
\&        my $class = ref($self) || $self;
\&        warn "called me from a $class object";
\&    }
.Ve
.Sh "How can I comment out a large block of perl code?"
Use embedded \s-1POD\s0 to discard it:
.PP
.Vb 1
\&    # program is here
.Ve
.Vb 2
\&    =for nobody
\&    This paragraph is commented out
.Ve
.Vb 1
\&    # program continues
.Ve
.Vb 1
\&    =begin comment text
.Ve
.Vb 1
\&    all of this stuff
.Ve
.Vb 2
\&    here will be ignored
\&    by everyone
.Ve
.Vb 1
\&    =end comment text
.Ve
.Vb 1
\&    =cut
.Ve
.SH "AUTHOR AND COPYRIGHT"
Copyright (c) 1997 Tom Christiansen and Nathan Torkington.
All rights reserved.  See the \fIperlfaq\fR manpage for distribution information.

.rn }` ''
.IX Title "PERLFAQ7 1"
.IX Name "perlfaq7 - Perl Language Issues ($Revision: 1.18 $, $Date: 1997/04/24 22:44:14 $)"

.IX Header "NAME"

.IX Header "DESCRIPTION"

.IX Subsection "Can I get a \s-1BNF/\s0yacc/\s-1RE\s0 for the Perl language?"

.IX Subsection "What are all these $@%* punctuation signs, and how do I know when to use them?"

.IX Subsection "Do I always/never have to quote my strings or use semicolons and commas?"

.IX Subsection "How do I skip some return values?"

.IX Subsection "How do I temporarily block warnings?"

.IX Subsection "What's an extension?"

.IX Subsection "Why do Perl operators have different precedence than C operators?"

.IX Subsection "How do I declare/create a structure?"

.IX Subsection "How do I create a module?"

.IX Subsection "How do I create a class?"

.IX Subsection "How can I tell if a variable is tainted?"

.IX Subsection "What's a closure?"

.IX Subsection "What is variable suicide and how can I prevent it?"

.IX Subsection "How can I pass/return a {Function, FileHandle, Array, Hash, Method, Regexp}?"

.IX Item "Passing Variables and Functions"

.IX Item "Passing Filehandles"

.IX Item "Passing Regexps"

.IX Item "Passing Methods"

.IX Subsection "How do I create a static variable?"

.IX Subsection "What's the difference between dynamic and lexical (static) scoping?  Between \fIlocal()\fR and \fImy()\fR?"

.IX Subsection "How can I access a dynamic variable while a similarly named lexical is in scope?"

.IX Subsection "What's the difference between deep and shallow binding?"

.IX Subsection "Why doesn't \*(M"\fIlocal\fR\|($foo) = <\s-1FILE\s0>;\*(S" work right?"

.IX Subsection "How do I redefine a builtin function, operator, or method?"

.IX Subsection "What's the difference between calling a function as &foo and \fIfoo()\fR?"

.IX Subsection "How do I create a switch or case statement?"

.IX Subsection "How can I catch accesses to undefined variables/functions/methods?"

.IX Subsection "Why can't a method included in this same file be found?"

.IX Subsection "How can I find out my current package?"

.IX Subsection "How can I comment out a large block of perl code?"

.IX Header "AUTHOR AND COPYRIGHT"

